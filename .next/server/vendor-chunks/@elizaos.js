"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@elizaos";
exports.ids = ["vendor-chunks/@elizaos"];
exports.modules = {

/***/ "(rsc)/./node_modules/@elizaos/core/dist/chunk-2HSL25IJ.js":
/*!***********************************************************!*\
  !*** ./node_modules/@elizaos/core/dist/chunk-2HSL25IJ.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTemplateFunction: () => (/* binding */ createTemplateFunction),\n/* harmony export */   getTemplateValues: () => (/* binding */ getTemplateValues),\n/* harmony export */   processTemplate: () => (/* binding */ processTemplate)\n/* harmony export */ });\n// src/specs/v1/templates.ts\nfunction createTemplateFunction(template) {\n  if (typeof template === \"string\") {\n    return () => template;\n  } else {\n    return (state) => {\n      if (!state) {\n        return \"\";\n      }\n      return template({ state });\n    };\n  }\n}\nfunction processTemplate(template, state) {\n  if (!template) {\n    return \"\";\n  }\n  if (!state) {\n    return typeof template === \"string\" ? template : \"\";\n  }\n  if (typeof template === \"string\") {\n    return template;\n  } else {\n    return template({ state });\n  }\n}\nfunction getTemplateValues(state, defaultValues) {\n  if (!state || !state.values) {\n    return defaultValues || {};\n  }\n  const stateValues = state.values;\n  const defaults = defaultValues || {};\n  return { ...defaults, ...stateValues };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9kaXN0L2NodW5rLTJIU0wyNUlKLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLHNCQUFzQixPQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBTUUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZG1pbi9Eb2N1bWVudHMvcHJvamVjdHMvcGlnZ3ktcG90L25vZGVfbW9kdWxlcy9AZWxpemFvcy9jb3JlL2Rpc3QvY2h1bmstMkhTTDI1SUouanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NwZWNzL3YxL3RlbXBsYXRlcy50c1xuZnVuY3Rpb24gY3JlYXRlVGVtcGxhdGVGdW5jdGlvbih0ZW1wbGF0ZSkge1xuICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuICgpID0+IHRlbXBsYXRlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoc3RhdGUpID0+IHtcbiAgICAgIGlmICghc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGVtcGxhdGUoeyBzdGF0ZSB9KTtcbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiBwcm9jZXNzVGVtcGxhdGUodGVtcGxhdGUsIHN0YXRlKSB7XG4gIGlmICghdGVtcGxhdGUpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBpZiAoIXN0YXRlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0ZW1wbGF0ZSA9PT0gXCJzdHJpbmdcIiA/IHRlbXBsYXRlIDogXCJcIjtcbiAgfVxuICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0ZW1wbGF0ZSh7IHN0YXRlIH0pO1xuICB9XG59XG5mdW5jdGlvbiBnZXRUZW1wbGF0ZVZhbHVlcyhzdGF0ZSwgZGVmYXVsdFZhbHVlcykge1xuICBpZiAoIXN0YXRlIHx8ICFzdGF0ZS52YWx1ZXMpIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlcyB8fCB7fTtcbiAgfVxuICBjb25zdCBzdGF0ZVZhbHVlcyA9IHN0YXRlLnZhbHVlcztcbiAgY29uc3QgZGVmYXVsdHMgPSBkZWZhdWx0VmFsdWVzIHx8IHt9O1xuICByZXR1cm4geyAuLi5kZWZhdWx0cywgLi4uc3RhdGVWYWx1ZXMgfTtcbn1cblxuZXhwb3J0IHtcbiAgY3JlYXRlVGVtcGxhdGVGdW5jdGlvbixcbiAgcHJvY2Vzc1RlbXBsYXRlLFxuICBnZXRUZW1wbGF0ZVZhbHVlc1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/dist/chunk-2HSL25IJ.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/dist/chunk-JX2SRFHQ.js":
/*!***********************************************************!*\
  !*** ./node_modules/@elizaos/core/dist/chunk-JX2SRFHQ.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromV2Provider: () => (/* binding */ fromV2Provider),\n/* harmony export */   toV2Provider: () => (/* binding */ toV2Provider)\n/* harmony export */ });\n/* harmony import */ var _chunk_YIBXLDIR_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-YIBXLDIR.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-YIBXLDIR.js\");\n\n\n// src/specs/v1/provider.ts\nfunction fromV2Provider(providerV2) {\n  return {\n    name: providerV2.name,\n    description: providerV2.description,\n    dynamic: providerV2.dynamic,\n    position: providerV2.position,\n    private: providerV2.private,\n    get: async (runtime, message, state) => {\n      const stateV2 = state ? (0,_chunk_YIBXLDIR_js__WEBPACK_IMPORTED_MODULE_0__.toV2State)(state) : void 0;\n      try {\n        const result = await providerV2.get(runtime, message, stateV2);\n        return result.text || \"\";\n      } catch (error) {\n        console.error(`Error in v2 provider ${providerV2.name}:`, error);\n        throw error;\n      }\n    }\n  };\n}\nfunction toV2Provider(provider) {\n  return {\n    name: provider.name || \"unnamed-provider\",\n    description: provider.description,\n    dynamic: provider.dynamic,\n    position: provider.position,\n    private: provider.private,\n    get: async (runtime, message, state) => {\n      try {\n        const result = await provider.get(runtime, message, state);\n        if (typeof result === \"object\" && result !== null) {\n          return {\n            ...result,\n            values: result.values || {},\n            data: result.data || {},\n            text: result.text || \"\"\n          };\n        }\n        return {\n          values: {},\n          data: {},\n          text: String(result || \"\")\n        };\n      } catch (error) {\n        console.error(`Error in v1 provider ${provider.name || \"unnamed\"}:`, error);\n        throw error;\n      }\n    }\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9kaXN0L2NodW5rLUpYMlNSRkhRLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUU2Qjs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDZEQUFTO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUiw4Q0FBOEMsZ0JBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QyxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsOENBQThDLDJCQUEyQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUtFIiwic291cmNlcyI6WyIvVXNlcnMvYWRtaW4vRG9jdW1lbnRzL3Byb2plY3RzL3BpZ2d5LXBvdC9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9kaXN0L2NodW5rLUpYMlNSRkhRLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHRvVjJTdGF0ZVxufSBmcm9tIFwiLi9jaHVuay1ZSUJYTERJUi5qc1wiO1xuXG4vLyBzcmMvc3BlY3MvdjEvcHJvdmlkZXIudHNcbmZ1bmN0aW9uIGZyb21WMlByb3ZpZGVyKHByb3ZpZGVyVjIpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBwcm92aWRlclYyLm5hbWUsXG4gICAgZGVzY3JpcHRpb246IHByb3ZpZGVyVjIuZGVzY3JpcHRpb24sXG4gICAgZHluYW1pYzogcHJvdmlkZXJWMi5keW5hbWljLFxuICAgIHBvc2l0aW9uOiBwcm92aWRlclYyLnBvc2l0aW9uLFxuICAgIHByaXZhdGU6IHByb3ZpZGVyVjIucHJpdmF0ZSxcbiAgICBnZXQ6IGFzeW5jIChydW50aW1lLCBtZXNzYWdlLCBzdGF0ZSkgPT4ge1xuICAgICAgY29uc3Qgc3RhdGVWMiA9IHN0YXRlID8gdG9WMlN0YXRlKHN0YXRlKSA6IHZvaWQgMDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb3ZpZGVyVjIuZ2V0KHJ1bnRpbWUsIG1lc3NhZ2UsIHN0YXRlVjIpO1xuICAgICAgICByZXR1cm4gcmVzdWx0LnRleHQgfHwgXCJcIjtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGluIHYyIHByb3ZpZGVyICR7cHJvdmlkZXJWMi5uYW1lfTpgLCBlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHRvVjJQcm92aWRlcihwcm92aWRlcikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IHByb3ZpZGVyLm5hbWUgfHwgXCJ1bm5hbWVkLXByb3ZpZGVyXCIsXG4gICAgZGVzY3JpcHRpb246IHByb3ZpZGVyLmRlc2NyaXB0aW9uLFxuICAgIGR5bmFtaWM6IHByb3ZpZGVyLmR5bmFtaWMsXG4gICAgcG9zaXRpb246IHByb3ZpZGVyLnBvc2l0aW9uLFxuICAgIHByaXZhdGU6IHByb3ZpZGVyLnByaXZhdGUsXG4gICAgZ2V0OiBhc3luYyAocnVudGltZSwgbWVzc2FnZSwgc3RhdGUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb3ZpZGVyLmdldChydW50aW1lLCBtZXNzYWdlLCBzdGF0ZSk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcIm9iamVjdFwiICYmIHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICB2YWx1ZXM6IHJlc3VsdC52YWx1ZXMgfHwge30sXG4gICAgICAgICAgICBkYXRhOiByZXN1bHQuZGF0YSB8fCB7fSxcbiAgICAgICAgICAgIHRleHQ6IHJlc3VsdC50ZXh0IHx8IFwiXCJcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWVzOiB7fSxcbiAgICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgICB0ZXh0OiBTdHJpbmcocmVzdWx0IHx8IFwiXCIpXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBpbiB2MSBwcm92aWRlciAke3Byb3ZpZGVyLm5hbWUgfHwgXCJ1bm5hbWVkXCJ9OmAsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQge1xuICBmcm9tVjJQcm92aWRlcixcbiAgdG9WMlByb3ZpZGVyXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/dist/chunk-JX2SRFHQ.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/dist/chunk-P3YTG22Y.js":
/*!***********************************************************!*\
  !*** ./node_modules/@elizaos/core/dist/chunk-P3YTG22Y.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentRuntime: () => (/* binding */ AgentRuntime),\n/* harmony export */   AgentRuntime2: () => (/* binding */ AgentRuntime2),\n/* harmony export */   AgentRuntime3: () => (/* binding */ AgentRuntime3),\n/* harmony export */   AgentStatus: () => (/* binding */ AgentStatus2),\n/* harmony export */   AgentStatus2: () => (/* binding */ AgentStatus),\n/* harmony export */   CacheKeyPrefix: () => (/* binding */ CacheKeyPrefix3),\n/* harmony export */   CacheKeyPrefix2: () => (/* binding */ CacheKeyPrefix2),\n/* harmony export */   ChannelType: () => (/* binding */ ChannelType2),\n/* harmony export */   ChannelType2: () => (/* binding */ ChannelType),\n/* harmony export */   ContentType: () => (/* binding */ ContentType2),\n/* harmony export */   ContentType2: () => (/* binding */ ContentType),\n/* harmony export */   DatabaseAdapter: () => (/* binding */ DatabaseAdapter2),\n/* harmony export */   DatabaseAdapter2: () => (/* binding */ DatabaseAdapter),\n/* harmony export */   EventType: () => (/* binding */ EventType2),\n/* harmony export */   EventType2: () => (/* binding */ EventType),\n/* harmony export */   IBrowserService: () => (/* binding */ IBrowserService),\n/* harmony export */   IEmailService: () => (/* binding */ IEmailService),\n/* harmony export */   ILpService: () => (/* binding */ ILpService),\n/* harmony export */   IMessageService: () => (/* binding */ IMessageService),\n/* harmony export */   IPdfService: () => (/* binding */ IPdfService),\n/* harmony export */   IPostService: () => (/* binding */ IPostService),\n/* harmony export */   ITokenDataService: () => (/* binding */ ITokenDataService),\n/* harmony export */   ITranscriptionService: () => (/* binding */ ITranscriptionService),\n/* harmony export */   IVideoService: () => (/* binding */ IVideoService),\n/* harmony export */   IWalletService: () => (/* binding */ IWalletService),\n/* harmony export */   IWebSearchService: () => (/* binding */ IWebSearchService),\n/* harmony export */   KnowledgeScope: () => (/* binding */ KnowledgeScope3),\n/* harmony export */   KnowledgeScope2: () => (/* binding */ KnowledgeScope2),\n/* harmony export */   MemoryType: () => (/* binding */ MemoryType2),\n/* harmony export */   MemoryType2: () => (/* binding */ MemoryType),\n/* harmony export */   ModelType: () => (/* binding */ ModelType2),\n/* harmony export */   ModelType2: () => (/* binding */ ModelType),\n/* harmony export */   PlatformPrefix: () => (/* binding */ PlatformPrefix2),\n/* harmony export */   PlatformPrefix2: () => (/* binding */ PlatformPrefix),\n/* harmony export */   Role: () => (/* binding */ Role2),\n/* harmony export */   Role2: () => (/* binding */ Role),\n/* harmony export */   SOCKET_MESSAGE_TYPE: () => (/* binding */ SOCKET_MESSAGE_TYPE2),\n/* harmony export */   SOCKET_MESSAGE_TYPE2: () => (/* binding */ SOCKET_MESSAGE_TYPE),\n/* harmony export */   Semaphore: () => (/* binding */ Semaphore),\n/* harmony export */   Semaphore2: () => (/* binding */ Semaphore2),\n/* harmony export */   Sentry: () => (/* reexport module object */ _sentry_browser__WEBPACK_IMPORTED_MODULE_16__),\n/* harmony export */   Service: () => (/* binding */ Service3),\n/* harmony export */   Service2: () => (/* binding */ Service2),\n/* harmony export */   ServiceBuilder: () => (/* binding */ ServiceBuilder),\n/* harmony export */   ServiceBuilder2: () => (/* binding */ ServiceBuilder2),\n/* harmony export */   ServiceType: () => (/* binding */ ServiceType3),\n/* harmony export */   ServiceType2: () => (/* binding */ ServiceType2),\n/* harmony export */   TEEMode: () => (/* binding */ TEEMode2),\n/* harmony export */   TEEMode2: () => (/* binding */ TEEMode),\n/* harmony export */   TeeType: () => (/* binding */ TeeType2),\n/* harmony export */   TeeType2: () => (/* binding */ TeeType),\n/* harmony export */   VECTOR_DIMS: () => (/* binding */ VECTOR_DIMS2),\n/* harmony export */   VECTOR_DIMS2: () => (/* binding */ VECTOR_DIMS),\n/* harmony export */   addHeader: () => (/* binding */ addHeader),\n/* harmony export */   addHeader2: () => (/* binding */ addHeader2),\n/* harmony export */   asUUID: () => (/* binding */ asUUID2),\n/* harmony export */   asUUID2: () => (/* binding */ asUUID),\n/* harmony export */   asUUID3: () => (/* binding */ asUUID3),\n/* harmony export */   booleanFooter: () => (/* binding */ booleanFooter),\n/* harmony export */   booleanFooter2: () => (/* binding */ booleanFooter2),\n/* harmony export */   characterSchema: () => (/* binding */ characterSchema),\n/* harmony export */   composeActionExamples: () => (/* binding */ composeActionExamples2),\n/* harmony export */   composeActionExamples2: () => (/* binding */ composeActionExamples),\n/* harmony export */   composePrompt: () => (/* binding */ composePrompt),\n/* harmony export */   composePrompt2: () => (/* binding */ composePrompt2),\n/* harmony export */   composePromptFromState: () => (/* binding */ composePromptFromState),\n/* harmony export */   composePromptFromState2: () => (/* binding */ composePromptFromState2),\n/* harmony export */   createActionResult: () => (/* binding */ createActionResult),\n/* harmony export */   createLogger: () => (/* binding */ createLogger),\n/* harmony export */   createMessageMemory: () => (/* binding */ createMessageMemory2),\n/* harmony export */   createMessageMemory2: () => (/* binding */ createMessageMemory),\n/* harmony export */   createService: () => (/* binding */ createService),\n/* harmony export */   createService2: () => (/* binding */ createService2),\n/* harmony export */   createServiceError: () => (/* binding */ createServiceError2),\n/* harmony export */   createServiceError2: () => (/* binding */ createServiceError),\n/* harmony export */   createSettingFromConfig: () => (/* binding */ createSettingFromConfig),\n/* harmony export */   createSettingFromConfig2: () => (/* binding */ createSettingFromConfig2),\n/* harmony export */   createUniqueUuid: () => (/* binding */ createUniqueUuid),\n/* harmony export */   createUniqueUuid2: () => (/* binding */ createUniqueUuid2),\n/* harmony export */   decryptObjectValues: () => (/* binding */ decryptObjectValues),\n/* harmony export */   decryptObjectValues2: () => (/* binding */ decryptObjectValues2),\n/* harmony export */   decryptStringValue: () => (/* binding */ decryptStringValue),\n/* harmony export */   decryptStringValue2: () => (/* binding */ decryptStringValue2),\n/* harmony export */   decryptedCharacter: () => (/* binding */ decryptedCharacter),\n/* harmony export */   decryptedCharacter2: () => (/* binding */ decryptedCharacter2),\n/* harmony export */   defaultSpec: () => (/* binding */ defaultSpec),\n/* harmony export */   defineService: () => (/* binding */ defineService),\n/* harmony export */   defineService2: () => (/* binding */ defineService2),\n/* harmony export */   elizaLogger: () => (/* binding */ elizaLogger),\n/* harmony export */   elizaLogger2: () => (/* binding */ elizaLogger2),\n/* harmony export */   encryptObjectValues: () => (/* binding */ encryptObjectValues),\n/* harmony export */   encryptObjectValues2: () => (/* binding */ encryptObjectValues2),\n/* harmony export */   encryptStringValue: () => (/* binding */ encryptStringValue),\n/* harmony export */   encryptStringValue2: () => (/* binding */ encryptStringValue2),\n/* harmony export */   encryptedCharacter: () => (/* binding */ encryptedCharacter),\n/* harmony export */   encryptedCharacter2: () => (/* binding */ encryptedCharacter2),\n/* harmony export */   findEntityByName: () => (/* binding */ findEntityByName),\n/* harmony export */   findEntityByName2: () => (/* binding */ findEntityByName2),\n/* harmony export */   findWorldsForOwner: () => (/* binding */ findWorldsForOwner),\n/* harmony export */   findWorldsForOwner2: () => (/* binding */ findWorldsForOwner2),\n/* harmony export */   formatActionNames: () => (/* binding */ formatActionNames2),\n/* harmony export */   formatActionNames2: () => (/* binding */ formatActionNames),\n/* harmony export */   formatActions: () => (/* binding */ formatActions2),\n/* harmony export */   formatActions2: () => (/* binding */ formatActions),\n/* harmony export */   formatActors: () => (/* binding */ formatActors),\n/* harmony export */   formatEntities: () => (/* binding */ formatEntities),\n/* harmony export */   formatEntities2: () => (/* binding */ formatEntities2),\n/* harmony export */   formatMessages: () => (/* binding */ formatMessages),\n/* harmony export */   formatMessages2: () => (/* binding */ formatMessages2),\n/* harmony export */   formatMessages3: () => (/* binding */ formatMessages3),\n/* harmony export */   formatPosts: () => (/* binding */ formatPosts),\n/* harmony export */   formatPosts2: () => (/* binding */ formatPosts2),\n/* harmony export */   formatPosts3: () => (/* binding */ formatPosts3),\n/* harmony export */   formatTimestamp: () => (/* binding */ formatTimestamp),\n/* harmony export */   formatTimestamp2: () => (/* binding */ formatTimestamp2),\n/* harmony export */   formatTimestamp3: () => (/* binding */ formatTimestamp3),\n/* harmony export */   generateUuidFromString: () => (/* binding */ generateUuidFromString),\n/* harmony export */   getActorDetails: () => (/* binding */ getActorDetails),\n/* harmony export */   getContentTypeFromMimeType: () => (/* binding */ getContentTypeFromMimeType),\n/* harmony export */   getEntityDetails: () => (/* binding */ getEntityDetails),\n/* harmony export */   getEntityDetails2: () => (/* binding */ getEntityDetails2),\n/* harmony export */   getLocalServerUrl: () => (/* binding */ getLocalServerUrl),\n/* harmony export */   getMemoryText: () => (/* binding */ getMemoryText2),\n/* harmony export */   getMemoryText2: () => (/* binding */ getMemoryText),\n/* harmony export */   getSalt: () => (/* binding */ getSalt),\n/* harmony export */   getSalt2: () => (/* binding */ getSalt2),\n/* harmony export */   getTypedService: () => (/* binding */ getTypedService2),\n/* harmony export */   getTypedService2: () => (/* binding */ getTypedService),\n/* harmony export */   getUserServerRole: () => (/* binding */ getUserServerRole),\n/* harmony export */   getUserServerRole2: () => (/* binding */ getUserServerRole2),\n/* harmony export */   getWorldSettings: () => (/* binding */ getWorldSettings),\n/* harmony export */   getWorldSettings2: () => (/* binding */ getWorldSettings2),\n/* harmony export */   imageDescriptionTemplate: () => (/* binding */ imageDescriptionTemplate),\n/* harmony export */   imageDescriptionTemplate2: () => (/* binding */ imageDescriptionTemplate2),\n/* harmony export */   initializeOnboarding: () => (/* binding */ initializeOnboarding),\n/* harmony export */   initializeOnboarding2: () => (/* binding */ initializeOnboarding2),\n/* harmony export */   isCustomMetadata: () => (/* binding */ isCustomMetadata2),\n/* harmony export */   isCustomMetadata2: () => (/* binding */ isCustomMetadata),\n/* harmony export */   isDescriptionMetadata: () => (/* binding */ isDescriptionMetadata2),\n/* harmony export */   isDescriptionMetadata2: () => (/* binding */ isDescriptionMetadata),\n/* harmony export */   isDocumentMemory: () => (/* binding */ isDocumentMemory2),\n/* harmony export */   isDocumentMemory2: () => (/* binding */ isDocumentMemory),\n/* harmony export */   isDocumentMetadata: () => (/* binding */ isDocumentMetadata2),\n/* harmony export */   isDocumentMetadata2: () => (/* binding */ isDocumentMetadata),\n/* harmony export */   isFragmentMemory: () => (/* binding */ isFragmentMemory2),\n/* harmony export */   isFragmentMemory2: () => (/* binding */ isFragmentMemory),\n/* harmony export */   isFragmentMetadata: () => (/* binding */ isFragmentMetadata2),\n/* harmony export */   isFragmentMetadata2: () => (/* binding */ isFragmentMetadata),\n/* harmony export */   isMessageMetadata: () => (/* binding */ isMessageMetadata2),\n/* harmony export */   isMessageMetadata2: () => (/* binding */ isMessageMetadata),\n/* harmony export */   isValidCharacter: () => (/* binding */ isValidCharacter),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   logger2: () => (/* binding */ logger2),\n/* harmony export */   messageHandlerTemplate: () => (/* binding */ messageHandlerTemplate),\n/* harmony export */   messageHandlerTemplate2: () => (/* binding */ messageHandlerTemplate2),\n/* harmony export */   normalizeJsonString: () => (/* binding */ normalizeJsonString),\n/* harmony export */   parseAndValidateCharacter: () => (/* binding */ parseAndValidateCharacter),\n/* harmony export */   parseBooleanFromText: () => (/* binding */ parseBooleanFromText2),\n/* harmony export */   parseBooleanFromText2: () => (/* binding */ parseBooleanFromText3),\n/* harmony export */   parseJSONObjectFromText: () => (/* binding */ parseJSONObjectFromText),\n/* harmony export */   parseJSONObjectFromText2: () => (/* binding */ parseJSONObjectFromText2),\n/* harmony export */   parseKeyValueXml: () => (/* binding */ parseKeyValueXml),\n/* harmony export */   parseKeyValueXml2: () => (/* binding */ parseKeyValueXml2),\n/* harmony export */   postCreationTemplate: () => (/* binding */ postCreationTemplate),\n/* harmony export */   postCreationTemplate2: () => (/* binding */ postCreationTemplate2),\n/* harmony export */   safeReplacer: () => (/* binding */ safeReplacer),\n/* harmony export */   safeReplacer2: () => (/* binding */ safeReplacer2),\n/* harmony export */   saltSettingValue: () => (/* binding */ saltSettingValue),\n/* harmony export */   saltSettingValue2: () => (/* binding */ saltSettingValue2),\n/* harmony export */   saltWorldSettings: () => (/* binding */ saltWorldSettings),\n/* harmony export */   saltWorldSettings2: () => (/* binding */ saltWorldSettings2),\n/* harmony export */   shouldRespondTemplate: () => (/* binding */ shouldRespondTemplate),\n/* harmony export */   shouldRespondTemplate2: () => (/* binding */ shouldRespondTemplate2),\n/* harmony export */   splitChunks: () => (/* binding */ splitChunks),\n/* harmony export */   stringToUuid: () => (/* binding */ stringToUuid),\n/* harmony export */   stringToUuid2: () => (/* binding */ stringToUuid2),\n/* harmony export */   trimTokens: () => (/* binding */ trimTokens),\n/* harmony export */   trimTokens2: () => (/* binding */ trimTokens2),\n/* harmony export */   truncateToCompleteSentence: () => (/* binding */ truncateToCompleteSentence),\n/* harmony export */   truncateToCompleteSentence2: () => (/* binding */ truncateToCompleteSentence2),\n/* harmony export */   unsaltSettingValue: () => (/* binding */ unsaltSettingValue),\n/* harmony export */   unsaltSettingValue2: () => (/* binding */ unsaltSettingValue2),\n/* harmony export */   unsaltWorldSettings: () => (/* binding */ unsaltWorldSettings),\n/* harmony export */   unsaltWorldSettings2: () => (/* binding */ unsaltWorldSettings2),\n/* harmony export */   updateWorldSettings: () => (/* binding */ updateWorldSettings),\n/* harmony export */   updateWorldSettings2: () => (/* binding */ updateWorldSettings2),\n/* harmony export */   v1_exports: () => (/* binding */ v1_exports),\n/* harmony export */   v2_exports: () => (/* binding */ v2_exports),\n/* harmony export */   validateCharacter: () => (/* binding */ validateCharacter),\n/* harmony export */   validateUuid: () => (/* binding */ validateUuid),\n/* harmony export */   validateUuid2: () => (/* binding */ validateUuid2)\n/* harmony export */ });\n/* harmony import */ var _chunk_2HSL25IJ_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-2HSL25IJ.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-2HSL25IJ.js\");\n/* harmony import */ var _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-WO7Z3GE6.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-WO7Z3GE6.js\");\n/* harmony import */ var _chunk_U2ADTLZY_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-U2ADTLZY.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-U2ADTLZY.js\");\n/* harmony import */ var _chunk_JX2SRFHQ_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-JX2SRFHQ.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-JX2SRFHQ.js\");\n/* harmony import */ var _chunk_YIBXLDIR_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-YIBXLDIR.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-YIBXLDIR.js\");\n/* harmony import */ var _chunk_R5U7XKVJ_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunk-R5U7XKVJ.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-R5U7XKVJ.js\");\n/* harmony import */ var handlebars__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! handlebars */ \"(rsc)/./node_modules/handlebars/lib/index.js\");\n/* harmony import */ var js_sha1__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! js-sha1 */ \"(rsc)/./node_modules/js-sha1/src/sha1.js\");\n/* harmony import */ var langchain_text_splitter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! langchain/text_splitter */ \"(rsc)/./node_modules/langchain/text_splitter.js\");\n/* harmony import */ var unique_names_generator__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! unique-names-generator */ \"(rsc)/./node_modules/unique-names-generator/dist/index.m.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/types.js\");\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! pino */ \"(rsc)/./node_modules/pino/pino.js\");\n/* harmony import */ var _sentry_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/browser */ \"(rsc)/./node_modules/@sentry/browser/build/npm/esm/sdk.js\");\n/* harmony import */ var _sentry_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sentry/browser */ \"(rsc)/./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_browser__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @sentry/browser */ \"(rsc)/./node_modules/@sentry/browser/build/npm/esm/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm/v4.js\");\n/* harmony import */ var crypto_browserify__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! crypto-browserify */ \"(rsc)/./node_modules/crypto-browserify/index.js\");\n\n\n\n\n\n\n\n// src/specs/v2/index.ts\nvar v2_exports = {};\n(0,_chunk_R5U7XKVJ_js__WEBPACK_IMPORTED_MODULE_5__.__export)(v2_exports, {\n  AgentRuntime: () => AgentRuntime2,\n  AgentStatus: () => AgentStatus,\n  CacheKeyPrefix: () => CacheKeyPrefix2,\n  ChannelType: () => ChannelType,\n  ContentType: () => ContentType,\n  DatabaseAdapter: () => DatabaseAdapter,\n  EventType: () => EventType,\n  KnowledgeScope: () => KnowledgeScope2,\n  MemoryType: () => MemoryType,\n  ModelType: () => ModelType,\n  PlatformPrefix: () => PlatformPrefix,\n  Role: () => Role,\n  SOCKET_MESSAGE_TYPE: () => SOCKET_MESSAGE_TYPE,\n  Semaphore: () => Semaphore2,\n  Service: () => Service2,\n  ServiceBuilder: () => ServiceBuilder2,\n  ServiceType: () => ServiceType2,\n  TEEMode: () => TEEMode,\n  TeeType: () => TeeType,\n  VECTOR_DIMS: () => VECTOR_DIMS,\n  addHeader: () => addHeader2,\n  asUUID: () => asUUID,\n  booleanFooter: () => booleanFooter2,\n  composeActionExamples: () => composeActionExamples,\n  composePrompt: () => composePrompt2,\n  composePromptFromState: () => composePromptFromState2,\n  createMessageMemory: () => createMessageMemory,\n  createService: () => createService2,\n  createServiceError: () => createServiceError,\n  createSettingFromConfig: () => createSettingFromConfig2,\n  createUniqueUuid: () => createUniqueUuid2,\n  decryptObjectValues: () => decryptObjectValues2,\n  decryptSecret: () => decryptStringValue2,\n  decryptStringValue: () => decryptStringValue2,\n  decryptedCharacter: () => decryptedCharacter2,\n  defineService: () => defineService2,\n  elizaLogger: () => elizaLogger2,\n  encryptObjectValues: () => encryptObjectValues2,\n  encryptStringValue: () => encryptStringValue2,\n  encryptedCharacter: () => encryptedCharacter2,\n  findEntityByName: () => findEntityByName2,\n  findWorldsForOwner: () => findWorldsForOwner2,\n  formatActionNames: () => formatActionNames,\n  formatActions: () => formatActions,\n  formatEntities: () => formatEntities2,\n  formatMessages: () => formatMessages2,\n  formatPosts: () => formatPosts2,\n  formatTimestamp: () => formatTimestamp2,\n  getEntityDetails: () => getEntityDetails2,\n  getMemoryText: () => getMemoryText,\n  getSalt: () => getSalt2,\n  getTypedService: () => getTypedService,\n  getUserServerRole: () => getUserServerRole2,\n  getWorldSettings: () => getWorldSettings2,\n  imageDescriptionTemplate: () => imageDescriptionTemplate2,\n  initializeOnboarding: () => initializeOnboarding2,\n  isCustomMetadata: () => isCustomMetadata,\n  isDescriptionMetadata: () => isDescriptionMetadata,\n  isDocumentMemory: () => isDocumentMemory,\n  isDocumentMetadata: () => isDocumentMetadata,\n  isFragmentMemory: () => isFragmentMemory,\n  isFragmentMetadata: () => isFragmentMetadata,\n  isMessageMetadata: () => isMessageMetadata,\n  logger: () => logger2,\n  messageHandlerTemplate: () => messageHandlerTemplate2,\n  parseBooleanFromText: () => parseBooleanFromText3,\n  parseJSONObjectFromText: () => parseJSONObjectFromText2,\n  parseKeyValueXml: () => parseKeyValueXml2,\n  postCreationTemplate: () => postCreationTemplate2,\n  safeReplacer: () => safeReplacer2,\n  saltSettingValue: () => saltSettingValue2,\n  saltWorldSettings: () => saltWorldSettings2,\n  shouldRespondTemplate: () => shouldRespondTemplate2,\n  stringToUuid: () => stringToUuid2,\n  trimTokens: () => trimTokens2,\n  truncateToCompleteSentence: () => truncateToCompleteSentence2,\n  unsaltSettingValue: () => unsaltSettingValue2,\n  unsaltWorldSettings: () => unsaltWorldSettings2,\n  updateWorldSettings: () => updateWorldSettings2,\n  validateUuid: () => validateUuid2\n});\n\n// src/specs/v2/types.ts\nfunction asUUID(id) {\n  if (!id || !/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(id)) {\n    throw new Error(`Invalid UUID format: ${id}`);\n  }\n  return id;\n}\nvar ModelType = {\n  SMALL: \"TEXT_SMALL\",\n  // kept for backwards compatibility\n  MEDIUM: \"TEXT_LARGE\",\n  // kept for backwards compatibility\n  LARGE: \"TEXT_LARGE\",\n  // kept for backwards compatibility\n  TEXT_SMALL: \"TEXT_SMALL\",\n  TEXT_LARGE: \"TEXT_LARGE\",\n  TEXT_EMBEDDING: \"TEXT_EMBEDDING\",\n  TEXT_TOKENIZER_ENCODE: \"TEXT_TOKENIZER_ENCODE\",\n  TEXT_TOKENIZER_DECODE: \"TEXT_TOKENIZER_DECODE\",\n  TEXT_REASONING_SMALL: \"REASONING_SMALL\",\n  TEXT_REASONING_LARGE: \"REASONING_LARGE\",\n  TEXT_COMPLETION: \"TEXT_COMPLETION\",\n  IMAGE: \"IMAGE\",\n  IMAGE_DESCRIPTION: \"IMAGE_DESCRIPTION\",\n  TRANSCRIPTION: \"TRANSCRIPTION\",\n  TEXT_TO_SPEECH: \"TEXT_TO_SPEECH\",\n  AUDIO: \"AUDIO\",\n  VIDEO: \"VIDEO\",\n  OBJECT_SMALL: \"OBJECT_SMALL\",\n  OBJECT_LARGE: \"OBJECT_LARGE\"\n};\nvar ServiceType2 = {\n  TRANSCRIPTION: \"transcription\",\n  VIDEO: \"video\",\n  BROWSER: \"browser\",\n  PDF: \"pdf\",\n  REMOTE_FILES: \"aws_s3\",\n  WEB_SEARCH: \"web_search\",\n  EMAIL: \"email\",\n  TEE: \"tee\",\n  TASK: \"task\"\n};\nvar MemoryType = /* @__PURE__ */ ((MemoryType3) => {\n  MemoryType3[\"DOCUMENT\"] = \"document\";\n  MemoryType3[\"FRAGMENT\"] = \"fragment\";\n  MemoryType3[\"MESSAGE\"] = \"message\";\n  MemoryType3[\"DESCRIPTION\"] = \"description\";\n  MemoryType3[\"CUSTOM\"] = \"custom\";\n  return MemoryType3;\n})(MemoryType || {});\nvar ContentType = /* @__PURE__ */ ((ContentType3) => {\n  ContentType3[\"IMAGE\"] = \"image\";\n  ContentType3[\"VIDEO\"] = \"video\";\n  ContentType3[\"AUDIO\"] = \"audio\";\n  ContentType3[\"DOCUMENT\"] = \"document\";\n  ContentType3[\"LINK\"] = \"link\";\n  return ContentType3;\n})(ContentType || {});\nvar ChannelType = /* @__PURE__ */ ((ChannelType4) => {\n  ChannelType4[\"SELF\"] = \"SELF\";\n  ChannelType4[\"DM\"] = \"DM\";\n  ChannelType4[\"GROUP\"] = \"GROUP\";\n  ChannelType4[\"VOICE_DM\"] = \"VOICE_DM\";\n  ChannelType4[\"VOICE_GROUP\"] = \"VOICE_GROUP\";\n  ChannelType4[\"FEED\"] = \"FEED\";\n  ChannelType4[\"THREAD\"] = \"THREAD\";\n  ChannelType4[\"WORLD\"] = \"WORLD\";\n  ChannelType4[\"FORUM\"] = \"FORUM\";\n  ChannelType4[\"API\"] = \"API\";\n  return ChannelType4;\n})(ChannelType || {});\nvar AgentStatus = /* @__PURE__ */ ((AgentStatus3) => {\n  AgentStatus3[\"ACTIVE\"] = \"active\";\n  AgentStatus3[\"INACTIVE\"] = \"inactive\";\n  return AgentStatus3;\n})(AgentStatus || {});\nvar KnowledgeScope2 = /* @__PURE__ */ ((KnowledgeScope4) => {\n  KnowledgeScope4[\"SHARED\"] = \"shared\";\n  KnowledgeScope4[\"PRIVATE\"] = \"private\";\n  return KnowledgeScope4;\n})(KnowledgeScope2 || {});\nvar CacheKeyPrefix2 = /* @__PURE__ */ ((CacheKeyPrefix4) => {\n  CacheKeyPrefix4[\"KNOWLEDGE\"] = \"knowledge\";\n  return CacheKeyPrefix4;\n})(CacheKeyPrefix2 || {});\nvar TEEMode = /* @__PURE__ */ ((TEEMode3) => {\n  TEEMode3[\"OFF\"] = \"OFF\";\n  TEEMode3[\"LOCAL\"] = \"LOCAL\";\n  TEEMode3[\"DOCKER\"] = \"DOCKER\";\n  TEEMode3[\"PRODUCTION\"] = \"PRODUCTION\";\n  return TEEMode3;\n})(TEEMode || {});\nvar TeeType = /* @__PURE__ */ ((TeeType3) => {\n  TeeType3[\"TDX_DSTACK\"] = \"tdx_dstack\";\n  return TeeType3;\n})(TeeType || {});\nvar Role = /* @__PURE__ */ ((Role3) => {\n  Role3[\"OWNER\"] = \"OWNER\";\n  Role3[\"ADMIN\"] = \"ADMIN\";\n  Role3[\"NONE\"] = \"NONE\";\n  return Role3;\n})(Role || {});\nvar EventType = /* @__PURE__ */ ((EventType3) => {\n  EventType3[\"WORLD_JOINED\"] = \"WORLD_JOINED\";\n  EventType3[\"WORLD_CONNECTED\"] = \"WORLD_CONNECTED\";\n  EventType3[\"WORLD_LEFT\"] = \"WORLD_LEFT\";\n  EventType3[\"ENTITY_JOINED\"] = \"ENTITY_JOINED\";\n  EventType3[\"ENTITY_LEFT\"] = \"ENTITY_LEFT\";\n  EventType3[\"ENTITY_UPDATED\"] = \"ENTITY_UPDATED\";\n  EventType3[\"ROOM_JOINED\"] = \"ROOM_JOINED\";\n  EventType3[\"ROOM_LEFT\"] = \"ROOM_LEFT\";\n  EventType3[\"MESSAGE_RECEIVED\"] = \"MESSAGE_RECEIVED\";\n  EventType3[\"MESSAGE_SENT\"] = \"MESSAGE_SENT\";\n  EventType3[\"MESSAGE_DELETED\"] = \"MESSAGE_DELETED\";\n  EventType3[\"CHANNEL_CLEARED\"] = \"CHANNEL_CLEARED\";\n  EventType3[\"VOICE_MESSAGE_RECEIVED\"] = \"VOICE_MESSAGE_RECEIVED\";\n  EventType3[\"VOICE_MESSAGE_SENT\"] = \"VOICE_MESSAGE_SENT\";\n  EventType3[\"REACTION_RECEIVED\"] = \"REACTION_RECEIVED\";\n  EventType3[\"POST_GENERATED\"] = \"POST_GENERATED\";\n  EventType3[\"INTERACTION_RECEIVED\"] = \"INTERACTION_RECEIVED\";\n  EventType3[\"RUN_STARTED\"] = \"RUN_STARTED\";\n  EventType3[\"RUN_ENDED\"] = \"RUN_ENDED\";\n  EventType3[\"RUN_TIMEOUT\"] = \"RUN_TIMEOUT\";\n  EventType3[\"ACTION_STARTED\"] = \"ACTION_STARTED\";\n  EventType3[\"ACTION_COMPLETED\"] = \"ACTION_COMPLETED\";\n  EventType3[\"EVALUATOR_STARTED\"] = \"EVALUATOR_STARTED\";\n  EventType3[\"EVALUATOR_COMPLETED\"] = \"EVALUATOR_COMPLETED\";\n  EventType3[\"MODEL_USED\"] = \"MODEL_USED\";\n  return EventType3;\n})(EventType || {});\nvar PlatformPrefix = /* @__PURE__ */ ((PlatformPrefix3) => {\n  PlatformPrefix3[\"DISCORD\"] = \"DISCORD\";\n  PlatformPrefix3[\"TELEGRAM\"] = \"TELEGRAM\";\n  PlatformPrefix3[\"TWITTER\"] = \"TWITTER\";\n  return PlatformPrefix3;\n})(PlatformPrefix || {});\nvar SOCKET_MESSAGE_TYPE = /* @__PURE__ */ ((SOCKET_MESSAGE_TYPE3) => {\n  SOCKET_MESSAGE_TYPE3[SOCKET_MESSAGE_TYPE3[\"ROOM_JOINING\"] = 1] = \"ROOM_JOINING\";\n  SOCKET_MESSAGE_TYPE3[SOCKET_MESSAGE_TYPE3[\"SEND_MESSAGE\"] = 2] = \"SEND_MESSAGE\";\n  SOCKET_MESSAGE_TYPE3[SOCKET_MESSAGE_TYPE3[\"MESSAGE\"] = 3] = \"MESSAGE\";\n  SOCKET_MESSAGE_TYPE3[SOCKET_MESSAGE_TYPE3[\"ACK\"] = 4] = \"ACK\";\n  SOCKET_MESSAGE_TYPE3[SOCKET_MESSAGE_TYPE3[\"THINKING\"] = 5] = \"THINKING\";\n  SOCKET_MESSAGE_TYPE3[SOCKET_MESSAGE_TYPE3[\"CONTROL\"] = 6] = \"CONTROL\";\n  return SOCKET_MESSAGE_TYPE3;\n})(SOCKET_MESSAGE_TYPE || {});\nfunction createMessageMemory(params) {\n  return {\n    ...params,\n    createdAt: Date.now(),\n    metadata: {\n      type: \"message\" /* MESSAGE */,\n      timestamp: Date.now(),\n      scope: params.agentId ? \"private\" : \"shared\"\n    }\n  };\n}\nfunction getTypedService(runtime, serviceType) {\n  return runtime.getService(serviceType);\n}\nfunction isDocumentMetadata(metadata) {\n  return metadata.type === \"document\" /* DOCUMENT */;\n}\nfunction isFragmentMetadata(metadata) {\n  return metadata.type === \"fragment\" /* FRAGMENT */;\n}\nfunction isMessageMetadata(metadata) {\n  return metadata.type === \"message\" /* MESSAGE */;\n}\nfunction isDescriptionMetadata(metadata) {\n  return metadata.type === \"description\" /* DESCRIPTION */;\n}\nfunction isCustomMetadata(metadata) {\n  return metadata.type !== \"document\" /* DOCUMENT */ && metadata.type !== \"fragment\" /* FRAGMENT */ && metadata.type !== \"message\" /* MESSAGE */ && metadata.type !== \"description\" /* DESCRIPTION */;\n}\nfunction isDocumentMemory(memory) {\n  return memory.metadata?.type === \"document\" /* DOCUMENT */;\n}\nfunction isFragmentMemory(memory) {\n  return memory.metadata?.type === \"fragment\" /* FRAGMENT */;\n}\nfunction getMemoryText(memory, defaultValue = \"\") {\n  return memory.content.text ?? defaultValue;\n}\nfunction createServiceError(error, code = \"UNKNOWN_ERROR\") {\n  if (error instanceof Error) {\n    return {\n      code,\n      message: error.message,\n      cause: error\n    };\n  }\n  return {\n    code,\n    message: String(error)\n  };\n}\nvar VECTOR_DIMS = {\n  SMALL: 384,\n  MEDIUM: 512,\n  LARGE: 768,\n  XL: 1024,\n  XXL: 1536,\n  XXXL: 3072\n};\nvar Service2 = class {\n  constructor(runtime) {\n    if (runtime) {\n      this.runtime = runtime;\n    }\n  }\n  /** Start service connection */\n  static async start(_runtime) {\n    throw new Error(\"Not implemented\");\n  }\n  /** Stop service connection */\n  static async stop(_runtime) {\n    throw new Error(\"Not implemented\");\n  }\n};\n\n// src/specs/v2/actions.ts\nvar composeActionExamples = (actionsData, count) => {\n  const actionExamples = [];\n  const names3 = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Heidi\"];\n  const usedNames = /* @__PURE__ */ new Set();\n  const getRandomName = () => {\n    const availableNames = names3.filter((name2) => !usedNames.has(name2));\n    if (availableNames.length === 0) {\n      usedNames.clear();\n      return names3[Math.floor(Math.random() * names3.length)];\n    }\n    const name = availableNames[Math.floor(Math.random() * availableNames.length)];\n    usedNames.add(name);\n    return name;\n  };\n  const allExamples = [];\n  for (const action of actionsData) {\n    if (action.examples) {\n      for (const example of action.examples) {\n        allExamples.push({ action, example });\n      }\n    }\n  }\n  for (let i = 0; i < count && allExamples.length > 0; i++) {\n    const randomIndex = Math.floor(Math.random() * allExamples.length);\n    const { example } = allExamples[randomIndex];\n    const randomNames = Array.from({ length: 5 }, () => getRandomName());\n    const formattedExample = example.map((msg) => {\n      let text = msg.content.text || \"\";\n      for (let j = 0; j < randomNames.length; j++) {\n        text = text.replace(new RegExp(`{{name${j + 1}}}`, \"g\"), randomNames[j]);\n      }\n      return `${msg.name}: ${text}`;\n    }).join(\"\\n\");\n    actionExamples.push(formattedExample);\n  }\n  return actionExamples.join(\"\\n\\n\");\n};\nfunction formatActionNames(actions) {\n  return actions.map((action) => action.name).join(\", \");\n}\nfunction formatActions(actions) {\n  return actions.map((action) => `${action.name}: ${action.description}`).join(\",\\n\");\n}\n\n// src/specs/v2/database.ts\nvar DatabaseAdapter = class {\n  /**\n   * Creates a new DatabaseAdapter instance.\n   * @param db The database instance to use.\n   */\n  constructor(db) {\n    this.db = db;\n  }\n};\n\n// src/types/primitives.ts\nfunction asUUID2(id) {\n  if (!id || !/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(id)) {\n    throw new Error(`Invalid UUID format: ${id}`);\n  }\n  return id;\n}\nvar ContentType2 = /* @__PURE__ */ ((ContentType3) => {\n  ContentType3[\"IMAGE\"] = \"image\";\n  ContentType3[\"VIDEO\"] = \"video\";\n  ContentType3[\"AUDIO\"] = \"audio\";\n  ContentType3[\"DOCUMENT\"] = \"document\";\n  ContentType3[\"LINK\"] = \"link\";\n  return ContentType3;\n})(ContentType2 || {});\n\n// src/types/memory.ts\nvar MemoryType2 = /* @__PURE__ */ ((MemoryType3) => {\n  MemoryType3[\"DOCUMENT\"] = \"document\";\n  MemoryType3[\"FRAGMENT\"] = \"fragment\";\n  MemoryType3[\"MESSAGE\"] = \"message\";\n  MemoryType3[\"DESCRIPTION\"] = \"description\";\n  MemoryType3[\"CUSTOM\"] = \"custom\";\n  return MemoryType3;\n})(MemoryType2 || {});\nfunction createMessageMemory2(params) {\n  return {\n    ...params,\n    createdAt: Date.now(),\n    metadata: {\n      type: \"message\" /* MESSAGE */,\n      timestamp: Date.now(),\n      scope: params.agentId ? \"private\" : \"shared\"\n    }\n  };\n}\nfunction isDocumentMetadata2(metadata) {\n  return metadata.type === \"document\" /* DOCUMENT */;\n}\nfunction isFragmentMetadata2(metadata) {\n  return metadata.type === \"fragment\" /* FRAGMENT */;\n}\nfunction isMessageMetadata2(metadata) {\n  return metadata.type === \"message\" /* MESSAGE */;\n}\nfunction isDescriptionMetadata2(metadata) {\n  return metadata.type === \"description\" /* DESCRIPTION */;\n}\nfunction isCustomMetadata2(metadata) {\n  return metadata.type !== \"document\" /* DOCUMENT */ && metadata.type !== \"fragment\" /* FRAGMENT */ && metadata.type !== \"message\" /* MESSAGE */ && metadata.type !== \"description\" /* DESCRIPTION */;\n}\nfunction isDocumentMemory2(memory) {\n  return memory.metadata?.type === \"document\" /* DOCUMENT */;\n}\nfunction isFragmentMemory2(memory) {\n  return memory.metadata?.type === \"fragment\" /* FRAGMENT */;\n}\nfunction getMemoryText2(memory, defaultValue = \"\") {\n  return memory.content.text ?? defaultValue;\n}\n\n// src/types/knowledge.ts\nvar KnowledgeScope3 = /* @__PURE__ */ ((KnowledgeScope4) => {\n  KnowledgeScope4[\"SHARED\"] = \"shared\";\n  KnowledgeScope4[\"PRIVATE\"] = \"private\";\n  return KnowledgeScope4;\n})(KnowledgeScope3 || {});\nvar CacheKeyPrefix3 = /* @__PURE__ */ ((CacheKeyPrefix4) => {\n  CacheKeyPrefix4[\"KNOWLEDGE\"] = \"knowledge\";\n  return CacheKeyPrefix4;\n})(CacheKeyPrefix3 || {});\n\n// src/types/environment.ts\nvar Role2 = /* @__PURE__ */ ((Role3) => {\n  Role3[\"OWNER\"] = \"OWNER\";\n  Role3[\"ADMIN\"] = \"ADMIN\";\n  Role3[\"NONE\"] = \"NONE\";\n  return Role3;\n})(Role2 || {});\nvar ChannelType2 = /* @__PURE__ */ ((ChannelType4) => {\n  ChannelType4[\"SELF\"] = \"SELF\";\n  ChannelType4[\"DM\"] = \"DM\";\n  ChannelType4[\"GROUP\"] = \"GROUP\";\n  ChannelType4[\"VOICE_DM\"] = \"VOICE_DM\";\n  ChannelType4[\"VOICE_GROUP\"] = \"VOICE_GROUP\";\n  ChannelType4[\"FEED\"] = \"FEED\";\n  ChannelType4[\"THREAD\"] = \"THREAD\";\n  ChannelType4[\"WORLD\"] = \"WORLD\";\n  ChannelType4[\"FORUM\"] = \"FORUM\";\n  ChannelType4[\"API\"] = \"API\";\n  return ChannelType4;\n})(ChannelType2 || {});\n\n// src/types/agent.ts\nvar AgentStatus2 = /* @__PURE__ */ ((AgentStatus3) => {\n  AgentStatus3[\"ACTIVE\"] = \"active\";\n  AgentStatus3[\"INACTIVE\"] = \"inactive\";\n  return AgentStatus3;\n})(AgentStatus2 || {});\n\n// src/types/components.ts\nfunction createActionResult(partial = {}) {\n  return {\n    success: true,\n    // Default to success\n    ...partial\n  };\n}\n\n// src/types/service.ts\nvar ServiceType3 = {\n  TRANSCRIPTION: \"transcription\",\n  VIDEO: \"video\",\n  BROWSER: \"browser\",\n  PDF: \"pdf\",\n  REMOTE_FILES: \"aws_s3\",\n  WEB_SEARCH: \"web_search\",\n  EMAIL: \"email\",\n  TEE: \"tee\",\n  TASK: \"task\",\n  WALLET: \"wallet\",\n  LP_POOL: \"lp_pool\",\n  TOKEN_DATA: \"token_data\",\n  MESSAGE: \"message\",\n  POST: \"post\",\n  UNKNOWN: \"unknown\"\n};\nvar Service3 = class {\n  constructor(runtime) {\n    if (runtime) {\n      this.runtime = runtime;\n    }\n  }\n  /** Start service connection */\n  static async start(_runtime) {\n    throw new Error(\"Not implemented\");\n  }\n  /** Stop service connection */\n  static async stop(_runtime) {\n    throw new Error(\"Not implemented\");\n  }\n};\nfunction getTypedService2(runtime, serviceType) {\n  return runtime.getService(serviceType);\n}\nfunction createServiceError2(error, code = \"UNKNOWN_ERROR\") {\n  if (error instanceof Error) {\n    return {\n      code,\n      message: error.message,\n      cause: error\n    };\n  }\n  return {\n    code,\n    message: String(error)\n  };\n}\n\n// src/types/model.ts\nvar ModelType2 = {\n  SMALL: \"TEXT_SMALL\",\n  // kept for backwards compatibility\n  MEDIUM: \"TEXT_LARGE\",\n  // kept for backwards compatibility\n  LARGE: \"TEXT_LARGE\",\n  // kept for backwards compatibility\n  TEXT_SMALL: \"TEXT_SMALL\",\n  TEXT_LARGE: \"TEXT_LARGE\",\n  TEXT_EMBEDDING: \"TEXT_EMBEDDING\",\n  TEXT_TOKENIZER_ENCODE: \"TEXT_TOKENIZER_ENCODE\",\n  TEXT_TOKENIZER_DECODE: \"TEXT_TOKENIZER_DECODE\",\n  TEXT_REASONING_SMALL: \"REASONING_SMALL\",\n  TEXT_REASONING_LARGE: \"REASONING_LARGE\",\n  TEXT_COMPLETION: \"TEXT_COMPLETION\",\n  IMAGE: \"IMAGE\",\n  IMAGE_DESCRIPTION: \"IMAGE_DESCRIPTION\",\n  TRANSCRIPTION: \"TRANSCRIPTION\",\n  TEXT_TO_SPEECH: \"TEXT_TO_SPEECH\",\n  AUDIO: \"AUDIO\",\n  VIDEO: \"VIDEO\",\n  OBJECT_SMALL: \"OBJECT_SMALL\",\n  OBJECT_LARGE: \"OBJECT_LARGE\"\n};\n\n// src/types/database.ts\nvar VECTOR_DIMS2 = {\n  SMALL: 384,\n  MEDIUM: 512,\n  LARGE: 768,\n  XL: 1024,\n  XXL: 1536,\n  XXXL: 3072\n};\n\n// src/types/events.ts\nvar EventType2 = /* @__PURE__ */ ((EventType3) => {\n  EventType3[\"WORLD_JOINED\"] = \"WORLD_JOINED\";\n  EventType3[\"WORLD_CONNECTED\"] = \"WORLD_CONNECTED\";\n  EventType3[\"WORLD_LEFT\"] = \"WORLD_LEFT\";\n  EventType3[\"ENTITY_JOINED\"] = \"ENTITY_JOINED\";\n  EventType3[\"ENTITY_LEFT\"] = \"ENTITY_LEFT\";\n  EventType3[\"ENTITY_UPDATED\"] = \"ENTITY_UPDATED\";\n  EventType3[\"ROOM_JOINED\"] = \"ROOM_JOINED\";\n  EventType3[\"ROOM_LEFT\"] = \"ROOM_LEFT\";\n  EventType3[\"MESSAGE_RECEIVED\"] = \"MESSAGE_RECEIVED\";\n  EventType3[\"MESSAGE_SENT\"] = \"MESSAGE_SENT\";\n  EventType3[\"MESSAGE_DELETED\"] = \"MESSAGE_DELETED\";\n  EventType3[\"CHANNEL_CLEARED\"] = \"CHANNEL_CLEARED\";\n  EventType3[\"VOICE_MESSAGE_RECEIVED\"] = \"VOICE_MESSAGE_RECEIVED\";\n  EventType3[\"VOICE_MESSAGE_SENT\"] = \"VOICE_MESSAGE_SENT\";\n  EventType3[\"REACTION_RECEIVED\"] = \"REACTION_RECEIVED\";\n  EventType3[\"POST_GENERATED\"] = \"POST_GENERATED\";\n  EventType3[\"INTERACTION_RECEIVED\"] = \"INTERACTION_RECEIVED\";\n  EventType3[\"RUN_STARTED\"] = \"RUN_STARTED\";\n  EventType3[\"RUN_ENDED\"] = \"RUN_ENDED\";\n  EventType3[\"RUN_TIMEOUT\"] = \"RUN_TIMEOUT\";\n  EventType3[\"ACTION_STARTED\"] = \"ACTION_STARTED\";\n  EventType3[\"ACTION_COMPLETED\"] = \"ACTION_COMPLETED\";\n  EventType3[\"EVALUATOR_STARTED\"] = \"EVALUATOR_STARTED\";\n  EventType3[\"EVALUATOR_COMPLETED\"] = \"EVALUATOR_COMPLETED\";\n  EventType3[\"MODEL_USED\"] = \"MODEL_USED\";\n  return EventType3;\n})(EventType2 || {});\nvar PlatformPrefix2 = /* @__PURE__ */ ((PlatformPrefix3) => {\n  PlatformPrefix3[\"DISCORD\"] = \"DISCORD\";\n  PlatformPrefix3[\"TELEGRAM\"] = \"TELEGRAM\";\n  PlatformPrefix3[\"TWITTER\"] = \"TWITTER\";\n  return PlatformPrefix3;\n})(PlatformPrefix2 || {});\n\n// src/types/tee.ts\nvar TEEMode2 = /* @__PURE__ */ ((TEEMode3) => {\n  TEEMode3[\"OFF\"] = \"OFF\";\n  TEEMode3[\"LOCAL\"] = \"LOCAL\";\n  TEEMode3[\"DOCKER\"] = \"DOCKER\";\n  TEEMode3[\"PRODUCTION\"] = \"PRODUCTION\";\n  return TEEMode3;\n})(TEEMode2 || {});\nvar TeeType2 = /* @__PURE__ */ ((TeeType3) => {\n  TeeType3[\"TDX_DSTACK\"] = \"tdx_dstack\";\n  return TeeType3;\n})(TeeType2 || {});\n\n// src/types/token.ts\nvar ITokenDataService = class extends Service3 {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Provides standardized access to token market data.\";\n  }\n  static {\n    this.serviceType = ServiceType3.TOKEN_DATA;\n  }\n  // Future potential methods:\n  // getHistoricalPriceData(address: string, chain: string, timeFrame: string): Promise<any[]>;\n  // getTokenMarketChart(address: string, chain: string, days: number): Promise<any[]>;\n};\n\n// src/types/messaging.ts\nvar SOCKET_MESSAGE_TYPE2 = /* @__PURE__ */ ((SOCKET_MESSAGE_TYPE3) => {\n  SOCKET_MESSAGE_TYPE3[SOCKET_MESSAGE_TYPE3[\"ROOM_JOINING\"] = 1] = \"ROOM_JOINING\";\n  SOCKET_MESSAGE_TYPE3[SOCKET_MESSAGE_TYPE3[\"SEND_MESSAGE\"] = 2] = \"SEND_MESSAGE\";\n  SOCKET_MESSAGE_TYPE3[SOCKET_MESSAGE_TYPE3[\"MESSAGE\"] = 3] = \"MESSAGE\";\n  SOCKET_MESSAGE_TYPE3[SOCKET_MESSAGE_TYPE3[\"ACK\"] = 4] = \"ACK\";\n  SOCKET_MESSAGE_TYPE3[SOCKET_MESSAGE_TYPE3[\"THINKING\"] = 5] = \"THINKING\";\n  SOCKET_MESSAGE_TYPE3[SOCKET_MESSAGE_TYPE3[\"CONTROL\"] = 6] = \"CONTROL\";\n  return SOCKET_MESSAGE_TYPE3;\n})(SOCKET_MESSAGE_TYPE2 || {});\n\n// src/types/wallet.ts\nvar IWalletService = class extends Service3 {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Provides standardized access to wallet balances and portfolios.\";\n  }\n  static {\n    this.serviceType = ServiceType3.WALLET;\n  }\n};\n\n// src/types/lp.ts\nvar ILpService = class extends Service3 {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Provides standardized access to DEX liquidity pools.\";\n  }\n  static {\n    this.serviceType = \"lp\";\n  }\n};\n\n// src/types/pdf.ts\nvar IPdfService = class extends Service3 {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"PDF processing, extraction, and generation capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType3.PDF;\n  }\n};\n\n// src/types/video.ts\nvar IVideoService = class extends Service3 {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Video download, processing, and conversion capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType3.VIDEO;\n  }\n};\n\n// src/types/browser.ts\nvar IBrowserService = class extends Service3 {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Web browser automation and scraping capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType3.BROWSER;\n  }\n};\n\n// src/types/transcription.ts\nvar ITranscriptionService = class extends Service3 {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Audio transcription and speech processing capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType3.TRANSCRIPTION;\n  }\n};\n\n// src/types/web-search.ts\nvar IWebSearchService = class extends Service3 {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Web search and content discovery capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType3.WEB_SEARCH;\n  }\n};\n\n// src/types/email.ts\nvar IEmailService = class extends Service3 {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Email sending, receiving, and management capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType3.EMAIL;\n  }\n};\n\n// src/types/message.ts\nvar IMessageService = class extends Service3 {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Message sending, receiving, and management capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType3.MESSAGE;\n  }\n};\n\n// src/types/post.ts\nvar IPostService = class extends Service3 {\n  constructor() {\n    super(...arguments);\n    this.capabilityDescription = \"Social media posting and content management capabilities\";\n  }\n  static {\n    this.serviceType = ServiceType3.POST;\n  }\n};\n\n// src/utils.ts\n\n\n\n\n\n\n// src/logger.ts\n\n\n// src/sentry/instrument.ts\n\nvar dsn = process.env.SENTRY_DSN || \"https://c20e2d51b66c14a783b0689d536f7e5c@o4509349865259008.ingest.us.sentry.io/4509352524120064\";\nif (process.env.SENTRY_LOGGING !== \"false\") {\n  _sentry_browser__WEBPACK_IMPORTED_MODULE_10__.onLoad(() => {\n    _sentry_browser__WEBPACK_IMPORTED_MODULE_10__.init({\n      dsn,\n      environment: process.env.SENTRY_ENVIRONMENT || \"development\",\n      tracesSampleRate: parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE ?? \"\") || 1,\n      sendDefaultPii: process.env.SENTRY_SEND_DEFAULT_PII === \"true\"\n    });\n  });\n}\n\n// src/logger.ts\nfunction parseBooleanFromText(value) {\n  if (!value) return false;\n  const normalized = value.toLowerCase().trim();\n  return normalized === \"true\" || normalized === \"1\" || normalized === \"yes\" || normalized === \"on\";\n}\nvar InMemoryDestination = class {\n  /**\n   * Constructor for creating a new instance of the class.\n   * @param {DestinationStream|null} stream - The stream to assign to the instance. Can be null.\n   */\n  constructor(stream) {\n    this.logs = [];\n    this.maxLogs = 1e3;\n    this.stream = stream;\n  }\n  /**\n   * Writes a log entry to the memory buffer and forwards it to the pretty print stream if available.\n   *\n   * @param {string | LogEntry} data - The data to be written, which can be either a string or a LogEntry object.\n   * @returns {void}\n   */\n  write(data) {\n    let logEntry;\n    let stringData;\n    if (typeof data === \"string\") {\n      stringData = data;\n      try {\n        logEntry = JSON.parse(data);\n      } catch (e) {\n        if (this.stream) {\n          this.stream.write(data);\n        }\n        return;\n      }\n    } else {\n      logEntry = data;\n      stringData = JSON.stringify(data);\n    }\n    if (!logEntry.time) {\n      logEntry.time = Date.now();\n    }\n    const isDebugMode2 = (process?.env?.LOG_LEVEL || \"\").toLowerCase() === \"debug\";\n    const isLoggingDiagnostic = Boolean(process?.env?.LOG_DIAGNOSTIC);\n    if (isLoggingDiagnostic) {\n      logEntry.diagnostic = true;\n    }\n    if (!isDebugMode2) {\n      if (logEntry.agentName && logEntry.agentId) {\n        const msg = logEntry.msg || \"\";\n        if (typeof msg === \"string\" && (msg.includes(\"registered successfully\") || msg.includes(\"Registering\") || msg.includes(\"Success:\") || msg.includes(\"linked to\") || msg.includes(\"Started\"))) {\n          if (isLoggingDiagnostic) {\n            console.error(\"Filtered log:\", stringData);\n          }\n          return;\n        }\n      }\n    }\n    this.logs.push(logEntry);\n    if (this.logs.length > this.maxLogs) {\n      this.logs.shift();\n    }\n    if (this.stream) {\n      this.stream.write(stringData);\n    }\n  }\n  /**\n   * Retrieves the recent logs from the system.\n   *\n   * @returns {LogEntry[]} An array of LogEntry objects representing the recent logs.\n   */\n  recentLogs() {\n    return this.logs;\n  }\n  /**\n   * Clears all logs from memory.\n   *\n   * @returns {void}\n   */\n  clear() {\n    this.logs = [];\n  }\n};\nvar customLevels = {\n  fatal: 60,\n  error: 50,\n  warn: 40,\n  info: 30,\n  log: 29,\n  progress: 28,\n  success: 27,\n  debug: 20,\n  trace: 10\n};\nvar raw = parseBooleanFromText(process?.env?.LOG_JSON_FORMAT) || false;\nvar isDebugMode = (process?.env?.LOG_LEVEL || \"\").toLowerCase() === \"debug\";\nvar effectiveLogLevel = isDebugMode ? \"debug\" : process?.env?.DEFAULT_LOG_LEVEL || \"info\";\nvar showTimestamps = process?.env?.LOG_TIMESTAMPS !== void 0 ? parseBooleanFromText(process?.env?.LOG_TIMESTAMPS) : true;\nvar createPrettyConfig = () => ({\n  colorize: true,\n  translateTime: showTimestamps ? \"yyyy-mm-dd HH:MM:ss\" : false,\n  ignore: showTimestamps ? \"pid,hostname\" : \"pid,hostname,time\",\n  levelColors: {\n    60: \"red\",\n    // fatal\n    50: \"red\",\n    // error\n    40: \"yellow\",\n    // warn\n    30: \"blue\",\n    // info\n    29: \"green\",\n    // log\n    28: \"cyan\",\n    // progress\n    27: \"greenBright\",\n    // success\n    20: \"magenta\",\n    // debug\n    10: \"grey\",\n    // trace\n    \"*\": \"white\"\n    // default for any unspecified level\n  },\n  customPrettifiers: {\n    level: (inputData) => {\n      let level;\n      if (typeof inputData === \"object\" && inputData !== null) {\n        level = inputData.level || inputData.value;\n      } else {\n        level = inputData;\n      }\n      const levelNames = {\n        10: \"TRACE\",\n        20: \"DEBUG\",\n        27: \"SUCCESS\",\n        28: \"PROGRESS\",\n        29: \"LOG\",\n        30: \"INFO\",\n        40: \"WARN\",\n        50: \"ERROR\",\n        60: \"FATAL\"\n      };\n      if (typeof level === \"number\") {\n        return levelNames[level] || `LEVEL${level}`;\n      }\n      if (level === void 0 || level === null) {\n        return \"UNKNOWN\";\n      }\n      return String(level).toUpperCase();\n    },\n    // Add a custom prettifier for error messages\n    msg: (msg) => {\n      return msg.replace(/ERROR \\([^)]+\\):/g, \"ERROR:\");\n    }\n  },\n  messageFormat: \"{msg}\"\n});\nvar createStream = async () => {\n  if (raw) {\n    return void 0;\n  }\n  const pretty = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/pino-pretty\"), __webpack_require__.e(\"vendor-chunks/fast-copy\"), __webpack_require__.e(\"vendor-chunks/colorette\"), __webpack_require__.e(\"vendor-chunks/wrappy\"), __webpack_require__.e(\"vendor-chunks/split2\"), __webpack_require__.e(\"vendor-chunks/secure-json-parse\"), __webpack_require__.e(\"vendor-chunks/pump\"), __webpack_require__.e(\"vendor-chunks/pino-abstract-transport\"), __webpack_require__.e(\"vendor-chunks/once\"), __webpack_require__.e(\"vendor-chunks/fast-safe-stringify\"), __webpack_require__.e(\"vendor-chunks/end-of-stream\"), __webpack_require__.e(\"vendor-chunks/dateformat\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! pino-pretty */ \"(rsc)/./node_modules/pino-pretty/index.js\", 19));\n  return pretty.default(createPrettyConfig());\n};\nvar options = {\n  level: effectiveLogLevel,\n  // Use more restrictive level unless in debug mode\n  customLevels,\n  hooks: {\n    logMethod(inputArgs, method) {\n      const [arg1, ...rest] = inputArgs;\n      if (process.env.SENTRY_LOGGING !== \"false\") {\n        if (arg1 instanceof Error) {\n          _sentry_browser__WEBPACK_IMPORTED_MODULE_11__.captureException(arg1);\n        } else {\n          for (const item of rest) {\n            if (item instanceof Error) {\n              _sentry_browser__WEBPACK_IMPORTED_MODULE_11__.captureException(item);\n            }\n          }\n        }\n      }\n      const formatError = (err) => ({\n        message: `(${err.name}) ${err.message}`,\n        stack: err.stack?.split(\"\\n\").map((line) => line.trim())\n      });\n      if (typeof arg1 === \"object\") {\n        if (arg1 instanceof Error) {\n          method.apply(this, [\n            {\n              error: formatError(arg1)\n            }\n          ]);\n        } else {\n          const messageParts = rest.map(\n            (arg) => typeof arg === \"string\" ? arg : JSON.stringify(arg)\n          );\n          const message = messageParts.join(\" \");\n          method.apply(this, [arg1, message]);\n        }\n      } else {\n        const context = {};\n        const messageParts = [arg1, ...rest].map((arg) => {\n          if (arg instanceof Error) {\n            return formatError(arg);\n          }\n          return typeof arg === \"string\" ? arg : arg;\n        });\n        const message = messageParts.filter((part) => typeof part === \"string\").join(\" \");\n        const jsonParts = messageParts.filter((part) => typeof part === \"object\");\n        Object.assign(context, ...jsonParts);\n        method.apply(this, [context, message]);\n      }\n    }\n  }\n};\nvar createLogger = (bindings = false) => {\n  const opts = { ...options };\n  if (bindings) {\n    opts.base = bindings;\n    opts.transport = {\n      target: \"pino-pretty\",\n      // this is just a string, not a dynamic import\n      options: {\n        colorize: true,\n        translateTime: showTimestamps ? \"SYS:standard\" : false,\n        ignore: showTimestamps ? \"pid,hostname\" : \"pid,hostname,time\"\n      }\n    };\n  }\n  const logger3 = pino__WEBPACK_IMPORTED_MODULE_9__(opts);\n  return logger3;\n};\nvar logger = pino__WEBPACK_IMPORTED_MODULE_9__(options);\nif (typeof process !== \"undefined\") {\n  let stream = null;\n  if (!raw) {\n    try {\n      const pretty = (0,_chunk_R5U7XKVJ_js__WEBPACK_IMPORTED_MODULE_5__.__require)(\"pino-pretty\");\n      stream = pretty.default ? pretty.default(createPrettyConfig()) : null;\n    } catch (e) {\n      createStream().then((prettyStream) => {\n        const destination = new InMemoryDestination(prettyStream);\n        logger = pino__WEBPACK_IMPORTED_MODULE_9__(options, destination);\n        logger[Symbol.for(\"pino-destination\")] = destination;\n        logger.clear = () => {\n          const destination2 = logger[Symbol.for(\"pino-destination\")];\n          if (destination2 instanceof InMemoryDestination) {\n            destination2.clear();\n          }\n        };\n      });\n    }\n  }\n  if (stream !== null || raw) {\n    const destination = new InMemoryDestination(stream);\n    logger = pino__WEBPACK_IMPORTED_MODULE_9__(options, destination);\n    logger[Symbol.for(\"pino-destination\")] = destination;\n    logger.clear = () => {\n      const destination2 = logger[Symbol.for(\"pino-destination\")];\n      if (destination2 instanceof InMemoryDestination) {\n        destination2.clear();\n      }\n    };\n  }\n}\nvar elizaLogger = logger;\nvar logger_default = logger;\n\n// src/utils.ts\nfunction upgradeDoubleToTriple(tpl) {\n  return tpl.replace(\n    // ────────╮ negative-LB: not already \"{{{\"\n    //          │   {{     ─ opening braces\n    //          │    ╰──── negative-LA: not {, #, /, !, >\n    //          ▼\n    /(?<!{){{(?![{#\\/!>])([\\s\\S]*?)}}/g,\n    (_match, inner) => {\n      if (inner.trim() === \"else\") return `{{${inner}}}`;\n      return `{{{${inner}}}}`;\n    }\n  );\n}\nvar composePrompt = ({\n  state,\n  template\n}) => {\n  const templateStr = typeof template === \"function\" ? template({ state }) : template;\n  const templateFunction = handlebars__WEBPACK_IMPORTED_MODULE_6__.compile(upgradeDoubleToTriple(templateStr));\n  const output = composeRandomUser(templateFunction(state), 10);\n  return output;\n};\nvar composePromptFromState = ({\n  state,\n  template\n}) => {\n  const templateStr = typeof template === \"function\" ? template({ state }) : template;\n  const templateFunction = handlebars__WEBPACK_IMPORTED_MODULE_6__.compile(upgradeDoubleToTriple(templateStr));\n  const stateKeys = Object.keys(state);\n  const filteredKeys = stateKeys.filter((key) => ![\"text\", \"values\", \"data\"].includes(key));\n  const filteredState = filteredKeys.reduce((acc, key) => {\n    acc[key] = state[key];\n    return acc;\n  }, {});\n  const output = composeRandomUser(templateFunction({ ...filteredState, ...state.values }), 10);\n  return output;\n};\nvar addHeader = (header, body) => {\n  return body.length > 0 ? `${header ? `${header}\n` : header}${body}\n` : \"\";\n};\nvar composeRandomUser = (template, length) => {\n  const exampleNames = Array.from(\n    { length },\n    () => (0,unique_names_generator__WEBPACK_IMPORTED_MODULE_12__.uniqueNamesGenerator)({ dictionaries: [unique_names_generator__WEBPACK_IMPORTED_MODULE_12__.names] })\n  );\n  let result = template;\n  for (let i = 0; i < exampleNames.length; i++) {\n    result = result.replaceAll(`{{name${i + 1}}}`, exampleNames[i]);\n  }\n  return result;\n};\nvar formatPosts = ({\n  messages,\n  entities,\n  conversationHeader = true\n}) => {\n  const groupedMessages = {};\n  messages.forEach((message) => {\n    if (message.roomId) {\n      if (!groupedMessages[message.roomId]) {\n        groupedMessages[message.roomId] = [];\n      }\n      groupedMessages[message.roomId].push(message);\n    }\n  });\n  Object.values(groupedMessages).forEach((roomMessages) => {\n    roomMessages.sort((a, b) => a.createdAt - b.createdAt);\n  });\n  const sortedRooms = Object.entries(groupedMessages).sort(\n    ([, messagesA], [, messagesB]) => messagesB[messagesB.length - 1].createdAt - messagesA[messagesA.length - 1].createdAt\n  );\n  const formattedPosts = sortedRooms.map(([roomId, roomMessages]) => {\n    const messageStrings = roomMessages.filter((message) => message.entityId).map((message) => {\n      const entity = entities.find((entity2) => entity2.id === message.entityId);\n      if (!entity) {\n        logger_default.warn(\"core::prompts:formatPosts - no entity for\", message.entityId);\n      }\n      const userName = entity?.names[0] || \"Unknown User\";\n      const displayName = entity?.names[0] || \"unknown\";\n      return `Name: ${userName} (@${displayName} EntityID:${message.entityId})\nMessageID: ${message.id}${message.content.inReplyTo ? `\nIn reply to: ${message.content.inReplyTo}` : \"\"}\nSource: ${message.content.source}\nDate: ${formatTimestamp(message.createdAt)}\nText:\n${message.content.text}`;\n    });\n    const header = conversationHeader ? `Conversation: ${roomId.slice(-5)}\n` : \"\";\n    return `${header}${messageStrings.join(\"\\n\\n\")}`;\n  });\n  return formattedPosts.join(\"\\n\\n\");\n};\nvar formatMessages = ({\n  messages,\n  entities\n}) => {\n  const messageStrings = messages.reverse().filter((message) => message.entityId).map((message) => {\n    const messageText = message.content.text;\n    const messageActions = message.content.actions;\n    const messageThought = message.content.thought;\n    const formattedName = entities.find((entity) => entity.id === message.entityId)?.names[0] || \"Unknown User\";\n    const attachments = message.content.attachments;\n    const attachmentString = attachments && attachments.length > 0 ? ` (Attachments: ${attachments.map((media) => {\n      const lines = [`[${media.id} - ${media.title} (${media.url})]`];\n      if (media.text) lines.push(`Text: ${media.text}`);\n      if (media.description) lines.push(`Description: ${media.description}`);\n      return lines.join(\"\\n\");\n    }).join(\n      // Use comma separator only if all attachments are single-line (no text/description)\n      attachments.every((media) => !media.text && !media.description) ? \", \" : \"\\n\"\n    )})` : null;\n    const messageTime = new Date(message.createdAt);\n    const hours = messageTime.getHours().toString().padStart(2, \"0\");\n    const minutes = messageTime.getMinutes().toString().padStart(2, \"0\");\n    const timeString = `${hours}:${minutes}`;\n    const timestamp = formatTimestamp(message.createdAt);\n    const thoughtString = messageThought ? `(${formattedName}'s internal thought: ${messageThought})` : null;\n    const timestampString = `${timeString} (${timestamp}) [${message.entityId}]`;\n    const textString = messageText ? `${timestampString} ${formattedName}: ${messageText}` : null;\n    const actionString = messageActions && messageActions.length > 0 ? `${textString ? \"\" : timestampString} (${formattedName}'s actions: ${messageActions.join(\", \")})` : null;\n    const messageString = [textString, thoughtString, actionString, attachmentString].filter(Boolean).join(\"\\n\");\n    return messageString;\n  }).join(\"\\n\");\n  return messageStrings;\n};\nvar formatTimestamp = (messageDate) => {\n  const now = /* @__PURE__ */ new Date();\n  const diff = now.getTime() - messageDate;\n  const absDiff = Math.abs(diff);\n  const seconds = Math.floor(absDiff / 1e3);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  if (absDiff < 6e4) {\n    return \"just now\";\n  }\n  if (minutes < 60) {\n    return `${minutes} minute${minutes !== 1 ? \"s\" : \"\"} ago`;\n  }\n  if (hours < 24) {\n    return `${hours} hour${hours !== 1 ? \"s\" : \"\"} ago`;\n  }\n  return `${days} day${days !== 1 ? \"s\" : \"\"} ago`;\n};\nvar jsonBlockPattern = /```json\\n([\\s\\S]*?)\\n```/;\nfunction parseKeyValueXml(text) {\n  if (!text) return null;\n  let xmlBlockMatch = text.match(/<response>([\\s\\S]*?)<\\/response>/);\n  let xmlContent;\n  if (xmlBlockMatch) {\n    xmlContent = xmlBlockMatch[1];\n    logger_default.debug(\"Found response XML block\");\n  } else {\n    const fallbackMatch = text.match(/<(\\w+)>([\\s\\S]*?)<\\/\\1>/);\n    if (!fallbackMatch) {\n      logger_default.warn(\"Could not find XML block in text\");\n      logger_default.debug(\"Text content:\", text.substring(0, 200) + \"...\");\n      return null;\n    }\n    xmlContent = fallbackMatch[2];\n    logger_default.debug(`Found XML block with tag: ${fallbackMatch[1]}`);\n  }\n  const result = {};\n  const tagPattern = /<([\\w-]+)>([\\s\\S]*?)<\\/([\\w-]+)>/g;\n  let match;\n  while ((match = tagPattern.exec(xmlContent)) !== null) {\n    if (match[1] === match[3]) {\n      const key = match[1];\n      const value = match[2].replace(/&lt;/g, \"<\").replace(/&gt;/g, \">\").replace(/&amp;/g, \"&\").replace(/&quot;/g, '\"').replace(/&apos;/g, \"'\").trim();\n      if (key === \"actions\" || key === \"providers\" || key === \"evaluators\") {\n        result[key] = value ? value.split(\",\").map((s) => s.trim()) : [];\n      } else if (key === \"simple\") {\n        result[key] = value.toLowerCase() === \"true\";\n      } else {\n        result[key] = value;\n      }\n    } else {\n      logger_default.warn(`Mismatched XML tags found: <${match[1]}> and </${match[3]}>`);\n    }\n  }\n  if (Object.keys(result).length === 0) {\n    logger_default.warn(\"No key-value pairs extracted from XML content\");\n    logger_default.debug(\"XML content was:\", xmlContent.substring(0, 200) + \"...\");\n    return null;\n  }\n  return result;\n}\nfunction parseJSONObjectFromText(text) {\n  let jsonData = null;\n  const jsonBlockMatch = text.match(jsonBlockPattern);\n  try {\n    if (jsonBlockMatch) {\n      jsonData = JSON.parse(normalizeJsonString(jsonBlockMatch[1].trim()));\n    } else {\n      jsonData = JSON.parse(normalizeJsonString(text.trim()));\n    }\n  } catch (_e) {\n    return null;\n  }\n  if (jsonData && typeof jsonData === \"object\" && !Array.isArray(jsonData)) {\n    return jsonData;\n  }\n  return null;\n}\nvar normalizeJsonString = (str) => {\n  str = str.replace(/\\{\\s+/, \"{\").replace(/\\s+\\}/, \"}\").trim();\n  str = str.replace(/(\"[\\w\\d_-]+\")\\s*: \\s*(?!\"|\\[)([\\s\\S]+?)(?=(,\\s*\"|\\}$))/g, '$1: \"$2\"');\n  str = str.replace(/\"([^\"]+)\"\\s*:\\s*'([^']*)'/g, (_, key, value) => `\"${key}\": \"${value}\"`);\n  str = str.replace(/(\"[\\w\\d_-]+\")\\s*:\\s*([A-Za-z_]+)(?![\"\\w])/g, '$1: \"$2\"');\n  return str;\n};\nfunction truncateToCompleteSentence(text, maxLength) {\n  if (text.length <= maxLength) {\n    return text;\n  }\n  const lastPeriodIndex = text.lastIndexOf(\".\", maxLength - 1);\n  if (lastPeriodIndex !== -1) {\n    const truncatedAtPeriod = text.slice(0, lastPeriodIndex + 1).trim();\n    if (truncatedAtPeriod.length > 0) {\n      return truncatedAtPeriod;\n    }\n  }\n  const lastSpaceIndex = text.lastIndexOf(\" \", maxLength - 1);\n  if (lastSpaceIndex !== -1) {\n    const truncatedAtSpace = text.slice(0, lastSpaceIndex).trim();\n    if (truncatedAtSpace.length > 0) {\n      return `${truncatedAtSpace}...`;\n    }\n  }\n  const hardTruncated = text.slice(0, maxLength - 3).trim();\n  return `${hardTruncated}...`;\n}\nasync function splitChunks(content, chunkSize = 512, bleed = 20) {\n  logger_default.debug(\"[splitChunks] Starting text split\");\n  const characterstoTokens = 3.5;\n  const textSplitter = new langchain_text_splitter__WEBPACK_IMPORTED_MODULE_8__.RecursiveCharacterTextSplitter({\n    chunkSize: Number(Math.floor(chunkSize * characterstoTokens)),\n    chunkOverlap: Number(Math.floor(bleed * characterstoTokens))\n  });\n  const chunks = await textSplitter.splitText(content);\n  logger_default.debug(\"[splitChunks] Split complete:\", {\n    numberOfChunks: chunks.length,\n    averageChunkSize: chunks.reduce((acc, chunk) => acc + chunk.length, 0) / chunks.length\n  });\n  return chunks;\n}\nasync function trimTokens(prompt, maxTokens, runtime) {\n  if (!prompt) throw new Error(\"Trim tokens received a null prompt\");\n  if (prompt.length < maxTokens / 5) return prompt;\n  if (maxTokens <= 0) throw new Error(\"maxTokens must be positive\");\n  const tokens = await runtime.useModel(ModelType2.TEXT_TOKENIZER_ENCODE, {\n    prompt\n  });\n  if (tokens.length <= maxTokens) {\n    return prompt;\n  }\n  const truncatedTokens = tokens.slice(-maxTokens);\n  return await runtime.useModel(ModelType2.TEXT_TOKENIZER_DECODE, {\n    tokens: truncatedTokens\n  });\n}\nfunction safeReplacer() {\n  const seen = /* @__PURE__ */ new WeakSet();\n  return function(_key, value) {\n    if (typeof value === \"object\" && value !== null) {\n      if (seen.has(value)) {\n        return \"[Circular]\";\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n}\nfunction parseBooleanFromText2(value) {\n  if (!value) return false;\n  const affirmative = [\"YES\", \"Y\", \"TRUE\", \"T\", \"1\", \"ON\", \"ENABLE\"];\n  const negative = [\"NO\", \"N\", \"FALSE\", \"F\", \"0\", \"OFF\", \"DISABLE\"];\n  const normalizedText = value.trim().toUpperCase();\n  if (affirmative.includes(normalizedText)) {\n    return true;\n  }\n  if (negative.includes(normalizedText)) {\n    return false;\n  }\n  return false;\n}\nvar uuidSchema = zod__WEBPACK_IMPORTED_MODULE_13__.string().uuid();\nfunction validateUuid(value) {\n  const result = uuidSchema.safeParse(value);\n  return result.success ? result.data : null;\n}\nfunction stringToUuid(target) {\n  if (typeof target === \"number\") {\n    target = target.toString();\n  }\n  if (typeof target !== \"string\") {\n    throw TypeError(\"Value must be string\");\n  }\n  const _uint8ToHex = (ubyte) => {\n    const first = ubyte >> 4;\n    const second = ubyte - (first << 4);\n    const HEX_DIGITS = \"0123456789abcdef\".split(\"\");\n    return HEX_DIGITS[first] + HEX_DIGITS[second];\n  };\n  const _uint8ArrayToHex = (buf) => {\n    let out = \"\";\n    for (let i = 0; i < buf.length; i++) {\n      out += _uint8ToHex(buf[i]);\n    }\n    return out;\n  };\n  const escapedStr = encodeURIComponent(target);\n  const buffer = new Uint8Array(escapedStr.length);\n  for (let i = 0; i < escapedStr.length; i++) {\n    buffer[i] = escapedStr[i].charCodeAt(0);\n  }\n  const hash = (0,js_sha1__WEBPACK_IMPORTED_MODULE_7__.sha1)(buffer);\n  const hashBuffer = new Uint8Array(hash.length / 2);\n  for (let i = 0; i < hash.length; i += 2) {\n    hashBuffer[i / 2] = Number.parseInt(hash.slice(i, i + 2), 16);\n  }\n  return `${_uint8ArrayToHex(hashBuffer.slice(0, 4))}-${_uint8ArrayToHex(hashBuffer.slice(4, 6))}-${_uint8ToHex(hashBuffer[6] & 15)}${_uint8ToHex(hashBuffer[7])}-${_uint8ToHex(hashBuffer[8] & 63 | 128)}${_uint8ToHex(hashBuffer[9])}-${_uint8ArrayToHex(hashBuffer.slice(10, 16))}`;\n}\nvar getContentTypeFromMimeType = (mimeType) => {\n  if (mimeType.startsWith(\"image/\")) return \"image\" /* IMAGE */;\n  if (mimeType.startsWith(\"video/\")) return \"video\" /* VIDEO */;\n  if (mimeType.startsWith(\"audio/\")) return \"audio\" /* AUDIO */;\n  if (mimeType.includes(\"pdf\") || mimeType.includes(\"document\") || mimeType.startsWith(\"text/\")) {\n    return \"document\" /* DOCUMENT */;\n  }\n  return void 0;\n};\nfunction getLocalServerUrl(path) {\n  const port = process.env.SERVER_PORT || \"3000\";\n  return `http://localhost:${port}${path}`;\n}\n\n// src/schemas/character.ts\n\nvar uuidSchema2 = zod__WEBPACK_IMPORTED_MODULE_13__.string().regex(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i, \"Invalid UUID format\");\nvar contentSchema = zod__WEBPACK_IMPORTED_MODULE_13__.object({\n  text: zod__WEBPACK_IMPORTED_MODULE_13__.string().optional(),\n  thought: zod__WEBPACK_IMPORTED_MODULE_13__.string().optional(),\n  actions: zod__WEBPACK_IMPORTED_MODULE_13__.array(zod__WEBPACK_IMPORTED_MODULE_13__.string()).optional(),\n  providers: zod__WEBPACK_IMPORTED_MODULE_13__.array(zod__WEBPACK_IMPORTED_MODULE_13__.string()).optional(),\n  source: zod__WEBPACK_IMPORTED_MODULE_13__.string().optional(),\n  target: zod__WEBPACK_IMPORTED_MODULE_13__.string().optional(),\n  url: zod__WEBPACK_IMPORTED_MODULE_13__.string().optional(),\n  inReplyTo: uuidSchema2.optional(),\n  attachments: zod__WEBPACK_IMPORTED_MODULE_13__.array(zod__WEBPACK_IMPORTED_MODULE_13__.any()).optional(),\n  channelType: zod__WEBPACK_IMPORTED_MODULE_13__.string().optional()\n}).passthrough();\nvar messageExampleSchema = zod__WEBPACK_IMPORTED_MODULE_13__.object({\n  name: zod__WEBPACK_IMPORTED_MODULE_13__.string(),\n  content: contentSchema\n});\nvar directoryItemSchema = zod__WEBPACK_IMPORTED_MODULE_13__.object({\n  directory: zod__WEBPACK_IMPORTED_MODULE_13__.string(),\n  shared: zod__WEBPACK_IMPORTED_MODULE_13__.boolean().optional()\n});\nvar knowledgeItemSchema = zod__WEBPACK_IMPORTED_MODULE_13__.union([\n  zod__WEBPACK_IMPORTED_MODULE_13__.string(),\n  zod__WEBPACK_IMPORTED_MODULE_13__.object({\n    path: zod__WEBPACK_IMPORTED_MODULE_13__.string(),\n    shared: zod__WEBPACK_IMPORTED_MODULE_13__.boolean().optional()\n  }),\n  directoryItemSchema\n]);\nvar templateTypeSchema = zod__WEBPACK_IMPORTED_MODULE_13__.union([\n  zod__WEBPACK_IMPORTED_MODULE_13__.string(),\n  zod__WEBPACK_IMPORTED_MODULE_13__[\"function\"]().optional()\n  // Functions won't be in JSON but allowed in runtime\n]);\nvar styleSchema = zod__WEBPACK_IMPORTED_MODULE_13__.object({\n  all: zod__WEBPACK_IMPORTED_MODULE_13__.array(zod__WEBPACK_IMPORTED_MODULE_13__.string()).optional(),\n  chat: zod__WEBPACK_IMPORTED_MODULE_13__.array(zod__WEBPACK_IMPORTED_MODULE_13__.string()).optional(),\n  post: zod__WEBPACK_IMPORTED_MODULE_13__.array(zod__WEBPACK_IMPORTED_MODULE_13__.string()).optional()\n}).optional();\nvar settingsSchema = zod__WEBPACK_IMPORTED_MODULE_13__.record(zod__WEBPACK_IMPORTED_MODULE_13__.union([zod__WEBPACK_IMPORTED_MODULE_13__.string(), zod__WEBPACK_IMPORTED_MODULE_13__.boolean(), zod__WEBPACK_IMPORTED_MODULE_13__.number(), zod__WEBPACK_IMPORTED_MODULE_13__.any()])).optional();\nvar secretsSchema = zod__WEBPACK_IMPORTED_MODULE_13__.record(zod__WEBPACK_IMPORTED_MODULE_13__.union([zod__WEBPACK_IMPORTED_MODULE_13__.string(), zod__WEBPACK_IMPORTED_MODULE_13__.boolean(), zod__WEBPACK_IMPORTED_MODULE_13__.number()])).optional();\nvar characterSchema = zod__WEBPACK_IMPORTED_MODULE_13__.object({\n  id: uuidSchema2.optional(),\n  name: zod__WEBPACK_IMPORTED_MODULE_13__.string().min(1, \"Character name is required\"),\n  username: zod__WEBPACK_IMPORTED_MODULE_13__.string().optional(),\n  system: zod__WEBPACK_IMPORTED_MODULE_13__.string().optional(),\n  templates: zod__WEBPACK_IMPORTED_MODULE_13__.record(templateTypeSchema).optional(),\n  bio: zod__WEBPACK_IMPORTED_MODULE_13__.union([zod__WEBPACK_IMPORTED_MODULE_13__.string(), zod__WEBPACK_IMPORTED_MODULE_13__.array(zod__WEBPACK_IMPORTED_MODULE_13__.string())]),\n  messageExamples: zod__WEBPACK_IMPORTED_MODULE_13__.array(zod__WEBPACK_IMPORTED_MODULE_13__.array(messageExampleSchema)).optional(),\n  postExamples: zod__WEBPACK_IMPORTED_MODULE_13__.array(zod__WEBPACK_IMPORTED_MODULE_13__.string()).optional(),\n  topics: zod__WEBPACK_IMPORTED_MODULE_13__.array(zod__WEBPACK_IMPORTED_MODULE_13__.string()).optional(),\n  adjectives: zod__WEBPACK_IMPORTED_MODULE_13__.array(zod__WEBPACK_IMPORTED_MODULE_13__.string()).optional(),\n  knowledge: zod__WEBPACK_IMPORTED_MODULE_13__.array(knowledgeItemSchema).optional(),\n  plugins: zod__WEBPACK_IMPORTED_MODULE_13__.array(zod__WEBPACK_IMPORTED_MODULE_13__.string()).optional(),\n  settings: settingsSchema,\n  secrets: secretsSchema,\n  style: styleSchema\n}).strict();\nfunction validateCharacter(data) {\n  const result = characterSchema.safeParse(data);\n  if (result.success) {\n    return {\n      success: true,\n      data: result.data\n    };\n  }\n  return {\n    success: false,\n    error: {\n      message: `Character validation failed: ${result.error.message}`,\n      issues: result.error.issues\n    }\n  };\n}\nfunction parseAndValidateCharacter(jsonString) {\n  try {\n    const parsed = JSON.parse(jsonString);\n    return validateCharacter(parsed);\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        message: `Invalid JSON: ${error instanceof Error ? error.message : \"Unknown JSON parsing error\"}`\n      }\n    };\n  }\n}\nfunction isValidCharacter(data) {\n  return validateCharacter(data).success;\n}\n\n// src/actions.ts\n\nvar composeActionExamples2 = (actionsData, count) => {\n  if (!actionsData.length || count <= 0) {\n    return \"\";\n  }\n  const actionsWithExamples = actionsData.filter(\n    (action) => action.examples && Array.isArray(action.examples) && action.examples.length > 0\n  );\n  if (!actionsWithExamples.length) {\n    return \"\";\n  }\n  const examplesCopy = actionsWithExamples.map((action) => [\n    ...action.examples\n  ]);\n  const selectedExamples = [];\n  let availableActionIndices = examplesCopy.map((examples, index) => examples.length > 0 ? index : -1).filter((index) => index !== -1);\n  while (selectedExamples.length < count && availableActionIndices.length > 0) {\n    const randomIndex = Math.floor(Math.random() * availableActionIndices.length);\n    const actionIndex = availableActionIndices[randomIndex];\n    const examples = examplesCopy[actionIndex];\n    const exampleIndex = Math.floor(Math.random() * examples.length);\n    selectedExamples.push(examples.splice(exampleIndex, 1)[0]);\n    if (examples.length === 0) {\n      availableActionIndices.splice(randomIndex, 1);\n    }\n  }\n  return formatSelectedExamples(selectedExamples);\n};\nvar formatSelectedExamples = (examples) => {\n  const MAX_NAME_PLACEHOLDERS = 5;\n  return examples.map((example) => {\n    const randomNames = Array.from(\n      { length: MAX_NAME_PLACEHOLDERS },\n      () => (0,unique_names_generator__WEBPACK_IMPORTED_MODULE_12__.uniqueNamesGenerator)({ dictionaries: [unique_names_generator__WEBPACK_IMPORTED_MODULE_12__.names] })\n    );\n    const conversation = example.map((message) => {\n      let messageText = `${message.name}: ${message.content.text}`;\n      for (let i = 0; i < randomNames.length; i++) {\n        messageText = messageText.replaceAll(`{{name${i + 1}}}`, randomNames[i]);\n      }\n      return messageText;\n    }).join(\"\\n\");\n    return `\n${conversation}`;\n  }).join(\"\\n\");\n};\nfunction formatActionNames2(actions) {\n  if (!actions?.length) return \"\";\n  return [...actions].sort(() => Math.random() - 0.5).map((action) => action.name).join(\", \");\n}\nfunction formatActions2(actions) {\n  if (!actions?.length) return \"\";\n  return [...actions].sort(() => Math.random() - 0.5).map((action) => `- **${action.name}**: ${action.description || \"No description available\"}`).join(\"\\n\");\n}\n\n// src/database.ts\nvar DatabaseAdapter2 = class {\n};\n\n// src/prompts.ts\nvar shouldRespondTemplate = `<task>Decide on behalf of {{agentName}} whether they should respond to the message, ignore it or stop the conversation.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>Decide if {{agentName}} should respond to or interact with the conversation.\nIf the message is directed at or relevant to {{agentName}}, respond with RESPOND action.\nIf a user asks {{agentName}} to be quiet, respond with STOP action.\nIf {{agentName}} should ignore the message, respond with IGNORE action.</instructions>\n\n<output>\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nRespond using XML format like this:\n<response>\n  <name>{{agentName}}</name>\n  <reasoning>Your reasoning here</reasoning>\n  <action>RESPOND | IGNORE | STOP</action>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.\n</output>`;\nvar messageHandlerTemplate = `<task>Generate dialog and actions for the character {{agentName}}.</task>\n\n<providers>\n{{providers}}\n</providers>\n\nThese are the available valid actions:\n<actionNames>\n{{actionNames}}\n</actionNames>\n\n<instructions>\nWrite a thought and plan for {{agentName}} and decide what actions to take. Also include the providers that {{agentName}} will use to have the right context for responding and acting, if any.\n\nIMPORTANT ACTION ORDERING RULES:\n- Actions are executed in the ORDER you list them - the order MATTERS!\n- REPLY should come FIRST to acknowledge the user's request before executing other actions\n- Common patterns:\n  - For requests requiring tool use: REPLY,CALL_MCP_TOOL (acknowledge first, then gather info)\n  - For task execution: REPLY,SEND_MESSAGE or REPLY,EVM_SWAP_TOKENS (acknowledge first, then do the task)\n  - For multi-step operations: REPLY,ACTION1,ACTION2 (acknowledge first, then complete all steps)\n- REPLY is used to acknowledge and inform the user about what you're going to do\n- Follow-up actions execute the actual tasks after acknowledgment\n- Use IGNORE only when you should not respond at all\n- If you use IGNORE, do not include any other actions. IGNORE should be used alone when you should not respond or take any actions.\n\nIMPORTANT PROVIDER SELECTION RULES:\n- Only include providers if they are needed to respond accurately.\n- If the message mentions images, photos, pictures, attachments, or visual content, OR if you see \"(Attachments:\" in the conversation, you MUST include \"ATTACHMENTS\" in your providers list\n- If the message asks about or references specific people, include \"ENTITIES\" in your providers list  \n- If the message asks about relationships or connections between people, include \"RELATIONSHIPS\" in your providers list\n- If the message asks about facts or specific information, include \"FACTS\" in your providers list\n- If the message asks about the environment or world context, include \"WORLD\" in your providers list\n- If no additional context is needed, you may leave the providers list empty.\n\nIMPORTANT CODE BLOCK FORMATTING RULES:\n- If {{agentName}} includes code examples, snippets, or multi-line code in the response, ALWAYS wrap the code with \\`\\`\\` fenced code blocks (specify the language if known, e.g., \\`\\`\\`python).\n- ONLY use fenced code blocks for actual code. Do NOT wrap non-code text, instructions, or single words in fenced code blocks.\n- If including inline code (short single words or function names), use single backticks (\\`) as appropriate.\n- This ensures the user sees clearly formatted and copyable code when relevant.\n\nFirst, think about what you want to do next and plan your actions. Then, write the next message and include the actions you plan to take.\n</instructions>\n\n<keys>\n\"thought\" should be a short description of what the agent is thinking about and planning.\n\"actions\" should be a comma-separated list of the actions {{agentName}} plans to take based on the thought, IN THE ORDER THEY SHOULD BE EXECUTED (if none, use IGNORE, if simply responding with text, use REPLY)\n\"providers\" should be a comma-separated list of the providers that {{agentName}} will use to have the right context for responding and acting (NEVER use \"IGNORE\" as a provider - use specific provider names like ATTACHMENTS, ENTITIES, FACTS, KNOWLEDGE, etc.)\n\"text\" should be the text of the next message for {{agentName}} which they will send to the conversation.\n</keys>\n\n<output>\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nRespond using XML format like this:\n<response>\n    <thought>Your thought here</thought>\n    <actions>ACTION1,ACTION2</actions>\n    <providers>PROVIDER1,PROVIDER2</providers>\n    <text>Your response text here</text>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.\n</output>`;\nvar postCreationTemplate = `# Task: Create a post in the voice and style and perspective of {{agentName}} @{{twitterUserName}}.\n\nExample task outputs:\n1. A post about the importance of AI in our lives\n<response>\n  <thought>I am thinking about writing a post about the importance of AI in our lives</thought>\n  <post>AI is changing the world and it is important to understand how it works</post>\n  <imagePrompt>A futuristic cityscape with flying cars and people using AI to do things</imagePrompt>\n</response>\n\n2. A post about dogs\n<response>\n  <thought>I am thinking about writing a post about dogs</thought>\n  <post>Dogs are man's best friend and they are loyal and loving</post>\n  <imagePrompt>A dog playing with a ball in a park</imagePrompt>\n</response>\n\n3. A post about finding a new job\n<response>\n  <thought>Getting a job is hard, I bet there's a good tweet in that</thought>\n  <post>Just keep going!</post>\n  <imagePrompt>A person looking at a computer screen with a job search website</imagePrompt>\n</response>\n\n{{providers}}\n\nWrite a post that is {{adjective}} about {{topic}} (without mentioning {{topic}} directly), from the perspective of {{agentName}}. Do not add commentary or acknowledge this request, just write the post.\nYour response should be 1, 2, or 3 sentences (choose the length at random).\nYour response should not contain any questions. Brief, concise statements only. The total character count MUST be less than 280. No emojis. Use \\\\n\\\\n (double spaces) between statements if there are multiple statements in your response.\n\nYour output should be formatted in XML like this:\n<response>\n  <thought>Your thought here</thought>\n  <post>Your post text here</post>\n  <imagePrompt>Optional image prompt here</imagePrompt>\n</response>\n\nThe \"post\" field should be the post you want to send. Do not including any thinking or internal reflection in the \"post\" field.\nThe \"imagePrompt\" field is optional and should be a prompt for an image that is relevant to the post. It should be a single sentence that captures the essence of the post. ONLY USE THIS FIELD if it makes sense that the post would benefit from an image.\nThe \"thought\" field should be a short description of what the agent is thinking about before responding, including a brief justification for the response. Includate an explanation how the post is relevant to the topic but unique and different than other posts.\n\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.`;\nvar booleanFooter = \"Respond with only a YES or a NO.\";\nvar imageDescriptionTemplate = `<task>Analyze the provided image and generate a comprehensive description with multiple levels of detail.</task>\n\n<instructions>\nCarefully examine the image and provide:\n1. A concise, descriptive title that captures the main subject or scene\n2. A brief summary description (1-2 sentences) highlighting the key elements\n3. An extensive, detailed description that covers all visible elements, composition, lighting, colors, mood, and any other relevant details\n\nBe objective and descriptive. Focus on what you can actually see in the image rather than making assumptions about context or meaning.\n</instructions>\n\n<output>\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nRespond using XML format like this:\n<response>\n  <title>A concise, descriptive title for the image</title>\n  <description>A brief 1-2 sentence summary of the key elements in the image</description>\n  <text>An extensive, detailed description covering all visible elements, composition, lighting, colors, mood, setting, objects, people, activities, and any other relevant details you can observe in the image</text>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.\n</output>`;\n\n// src/roles.ts\nasync function getUserServerRole(runtime, entityId, serverId) {\n  const worldId = createUniqueUuid(runtime, serverId);\n  const world = await runtime.getWorld(worldId);\n  if (!world || !world.metadata?.roles) {\n    return \"NONE\" /* NONE */;\n  }\n  if (world.metadata.roles[entityId]) {\n    return world.metadata.roles[entityId];\n  }\n  if (world.metadata.roles[entityId]) {\n    return world.metadata.roles[entityId];\n  }\n  return \"NONE\" /* NONE */;\n}\nasync function findWorldsForOwner(runtime, entityId) {\n  if (!entityId) {\n    logger.error(\"User ID is required to find server\");\n    return null;\n  }\n  const worlds = await runtime.getAllWorlds();\n  if (!worlds || worlds.length === 0) {\n    logger.info(\"No worlds found for this agent\");\n    return null;\n  }\n  const ownerWorlds = [];\n  for (const world of worlds) {\n    if (world.metadata?.ownership?.ownerId === entityId) {\n      ownerWorlds.push(world);\n    }\n  }\n  return ownerWorlds.length ? ownerWorlds : null;\n}\n\n// src/runtime.ts\n\n\n// src/search.ts\nvar isV = (char) => {\n  switch (char) {\n    case 97:\n    case 101:\n    case 105:\n    case 111:\n    case 117:\n    case 121:\n      return true;\n    default:\n      return false;\n  }\n};\nvar isWxy = (char) => {\n  switch (char) {\n    case 97:\n    case 101:\n    case 105:\n    case 111:\n    case 117:\n    case 121:\n    case 119:\n    case 120:\n    case 89:\n      return true;\n    default:\n      return false;\n  }\n};\nvar isValidLi = (char) => {\n  switch (char) {\n    case 99:\n    case 100:\n    case 101:\n    case 103:\n    case 104:\n    case 107:\n    case 109:\n    case 110:\n    case 114:\n    case 116:\n      return true;\n    default:\n      return false;\n  }\n};\nvar isDouble = (char) => {\n  switch (char) {\n    case 98:\n    case 100:\n    case 102:\n    case 103:\n    case 109:\n    case 110:\n    case 112:\n    case 114:\n    case 116:\n      return true;\n    default:\n      return false;\n  }\n};\nvar isShortV = (w, len) => {\n  return len >= 2 && isV(w[len - 2]) && (len === 2 && !isV(w[len - 1]) || len >= 3 && !isV(w[len - 3]) && !isWxy(w[len - 1]));\n};\nvar stem = (word) => {\n  if (word.length < 3) return word;\n  if (word.length <= 6) {\n    switch (word) {\n      case \"ski\":\n        return \"ski\";\n      case \"skies\":\n        return \"sky\";\n      case \"dying\":\n        return \"die\";\n      case \"lying\":\n        return \"lie\";\n      case \"tying\":\n        return \"tie\";\n      // special -LY cases\n      case \"idly\":\n        return \"idl\";\n      case \"gently\":\n        return \"gentl\";\n      case \"ugly\":\n        return \"ugli\";\n      case \"early\":\n        return \"earli\";\n      case \"only\":\n        return \"onli\";\n      case \"singly\":\n        return \"singl\";\n      // invariant forms\n      case \"sky\":\n      case \"news\":\n      case \"howe\":\n      // not plural forms\n      case \"atlas\":\n      case \"cosmos\":\n      case \"bias\":\n      case \"andes\":\n        return word;\n    }\n  }\n  const initialOffset = word.charCodeAt(0) === 39 ? 1 : 0;\n  let l = word.length - initialOffset;\n  const w = new Array(l);\n  let yFound = false;\n  for (let i = 0; i < l; ++i) {\n    const ch = word.charCodeAt(i + initialOffset);\n    if (ch === 121 && (i === 0 || isV(w[i - 1]))) {\n      yFound = true;\n      w[i] = 89;\n      continue;\n    }\n    w[i] = ch;\n  }\n  if (w[l - 1] === 39) --l;\n  if (l >= 2 && w[l - 2] === 39 && w[l - 1] === 115) l -= 2;\n  let rv = 0;\n  while (rv < l && !isV(w[rv])) ++rv;\n  if (rv < l) ++rv;\n  let r1 = rv;\n  if (l >= 5 && (w[0] === 103 && w[1] === 101 && w[2] === 110 && w[3] === 101 && w[4] === 114 || // gener\n  w[0] === 97 && w[1] === 114 && w[2] === 115 && w[3] === 101 && w[4] === 110))\n    r1 = 5;\n  else if (l >= 6 && w[0] === 99 && // c\n  w[1] === 111 && // o\n  w[2] === 109 && // m\n  w[3] === 109 && // m\n  w[4] === 117 && // u\n  w[5] === 110)\n    r1 = 6;\n  else {\n    while (r1 < l && isV(w[r1])) ++r1;\n    if (r1 < l) ++r1;\n  }\n  let r2 = r1;\n  while (r2 < l && !isV(w[r2])) ++r2;\n  while (r2 < l && isV(w[r2])) ++r2;\n  if (r2 < l) ++r2;\n  if (l >= 3) {\n    if (w[l - 1] === 115) {\n      if (l >= 4 && w[l - 2] === 101 && w[l - 3] === 115 && w[l - 4] === 115)\n        l -= 2;\n      else if (w[l - 2] === 101 && w[l - 3] === 105)\n        l -= l >= 5 ? 2 : 1;\n      else if (w[l - 2] !== 117 && w[l - 2] !== 115 && rv < l - 1)\n        l -= 1;\n    } else if (w[l - 1] === 100 && w[l - 2] === 101 && w[l - 3] === 105) l -= l >= 5 ? 2 : 1;\n  }\n  if (l === 6 && (w[0] === 105 && // i\n  w[1] === 110 && // n\n  w[2] === 110 && // n\n  w[3] === 105 && // i\n  w[4] === 110 && // n\n  w[5] === 103 || // g (inning)\n  w[0] === 111 && // o\n  w[1] === 117 && // u\n  w[2] === 116 && // t\n  w[3] === 105 && // i\n  w[4] === 110 && // n\n  w[5] === 103 || // g (outing)\n  w[0] === 101 && // e\n  w[1] === 120 && // x\n  w[2] === 99 && // c\n  w[3] === 101 && // e\n  w[4] === 101 && // e\n  w[5] === 100) || // d (exceed)\n  l === 7 && (w[0] === 99 && // c\n  w[1] === 97 && // a\n  w[2] === 110 && // n\n  w[3] === 110 && // n\n  w[4] === 105 && // i\n  w[5] === 110 && // n\n  w[6] === 103 || // g (canning)\n  w[0] === 104 && // h\n  w[1] === 101 && // e\n  w[2] === 114 && // r\n  w[3] === 114 && // r\n  w[4] === 105 && // i\n  w[5] === 110 && // n\n  w[6] === 103 || // g (herring)\n  w[0] === 101 && // e\n  w[1] === 97 && // a\n  w[2] === 114 && // r\n  w[3] === 114 && // r\n  w[4] === 105 && // i\n  w[5] === 110 && // n\n  w[6] === 103 || // g (earring)\n  w[0] === 112 && // p\n  w[1] === 114 && // r\n  w[2] === 111 && // o\n  w[3] === 99 && // c\n  w[4] === 101 && // e\n  w[5] === 101 && // e\n  w[6] === 100 || // d (proceed)\n  w[0] === 115 && // s\n  w[1] === 117 && // u\n  w[2] === 99 && // c\n  w[3] === 99 && // c\n  w[4] === 101 && // e\n  w[5] === 101 && // e\n  w[6] === 100)) {\n    let exp2Out = \"\";\n    for (let i = 0; i < l; ++i) exp2Out += String.fromCharCode(w[i]);\n    return exp2Out;\n  }\n  let ll = (\n    // l (length) without the -ly ending\n    l >= 2 && w[l - 1] === 121 && w[l - 2] === 108 ? l - 2 : l\n  );\n  if (ll >= 3) {\n    if (w[ll - 3] === 101 && w[ll - 2] === 101 && w[ll - 1] === 100) {\n      if (ll >= r1 + 3) l = ll - 1;\n    } else {\n      if (w[ll - 2] === 101 && w[ll - 1] === 100)\n        ll -= 2;\n      else if (w[ll - 3] === 105 && w[ll - 2] === 110 && w[ll - 1] === 103)\n        ll -= 3;\n      else ll = -1;\n      if (ll >= 0 && rv <= ll) {\n        l = ll;\n        if (l >= 2) {\n          if (w[l - 1] === 116 && w[l - 2] === 97 || // at\n          w[l - 1] === 108 && w[l - 2] === 98 || // bl\n          w[l - 1] === 122 && w[l - 2] === 105) {\n            w[l] = 101;\n            ++l;\n          } else if (w[l - 2] === w[l - 1] && isDouble(w[l - 1])) {\n            --l;\n          } else if (r1 >= l && isShortV(w, l)) {\n            w[l] = 101;\n            ++l;\n          }\n        }\n      }\n    }\n  }\n  if (l >= 3 && (w[l - 1] === 89 || w[l - 1] === 121) && !isV(w[l - 2])) w[l - 1] = 105;\n  if (l >= r1 + 2) {\n    switch (w[l - 1]) {\n      case 108:\n        if (l >= r1 + 6 && w[l - 2] === 97 && // a\n        w[l - 3] === 110 && // n\n        w[l - 4] === 111 && // o\n        w[l - 5] === 105 && // i\n        w[l - 6] === 116) {\n          if (l >= 7 && w[l - 7] === 97) {\n            if (l >= r1 + 7) {\n              l -= 4;\n              w[l - 1] = 101;\n            }\n          } else {\n            l -= 2;\n          }\n        }\n        break;\n      case 110:\n        if (l >= r1 + 5 && w[l - 2] === 111 && // o\n        w[l - 3] === 105 && // i\n        w[l - 4] === 116 && // t\n        w[l - 5] === 97) {\n          if (l >= 7 && w[l - 6] === 122 && w[l - 7] === 105) {\n            if (l >= r1 + 7) {\n              l -= 4;\n              w[l - 1] = 101;\n            }\n          } else {\n            l -= 2;\n            w[l - 1] = 101;\n          }\n        }\n        break;\n      case 114:\n        if (l >= r1 + 4) {\n          if (w[l - 2] === 101) {\n            if (w[l - 3] === 122 && w[l - 4] === 105) --l;\n          } else if (w[l - 2] === 111) {\n            if (w[l - 3] === 116 && w[l - 4] === 97) {\n              --l;\n              w[l - 1] = 101;\n            }\n          }\n        }\n        break;\n      case 115:\n        if (l >= r1 + 7 && w[l - 2] === 115 && // s\n        w[l - 3] === 101 && // e\n        w[l - 4] === 110 && // n (ness)\n        (w[l - 5] === 108 && w[l - 6] === 117 && w[l - 7] === 102 || // fulness\n        w[l - 5] === 115 && w[l - 6] === 117 && w[l - 7] === 111 || // ousness\n        w[l - 5] === 101 && w[l - 6] === 118 && w[l - 7] === 105)) {\n          l -= 4;\n        }\n        break;\n      case 109:\n        if (l >= r1 + 5 && w[l - 2] === 115 && // s\n        w[l - 3] === 105 && // i\n        w[l - 4] === 108 && // l\n        w[l - 5] === 97)\n          l -= 3;\n        break;\n      case 105:\n        if (w[l - 2] === 99) {\n          if (l >= r1 + 4 && (w[l - 4] === 101 || w[l - 4] === 97) && w[l - 3] === 110) {\n            w[l - 1] = 101;\n          }\n        } else if (w[l - 2] === 103) {\n          if (l >= r1 + 3 && l >= 4 && w[l - 2] === 103 && w[l - 3] === 111 && w[l - 4] === 108)\n            --l;\n        } else if (w[l - 2] === 116) {\n          if (l >= r1 + 5 && w[l - 3] === 105) {\n            if (w[l - 4] === 108) {\n              if (l >= 6 && w[l - 5] === 105 && w[l - 6] === 98) {\n                if (l >= r1 + 6) {\n                  l -= 3;\n                  w[l - 2] = 108;\n                  w[l - 1] = 101;\n                }\n              } else if (w[l - 4] === 108 && w[l - 5] === 97) {\n                l -= 3;\n              }\n            } else if (w[l - 4] === 118 && w[l - 5] === 105) {\n              l -= 2;\n              w[l - 1] = 101;\n            }\n          }\n        } else if (w[l - 2] === 108 && l >= 3) {\n          if (w[l - 3] === 98) {\n            if (l >= 4 && w[l - 4] === 97) {\n              if (l >= r1 + 4) w[l - 1] = 101;\n            } else if (l >= r1 + 3) {\n              w[l - 1] = 101;\n            }\n          } else {\n            if (w[l - 3] === 108) {\n              if (l >= 5 && w[l - 4] === 117 && w[l - 5] === 102) {\n                if (l >= r1 + 5) l -= 2;\n              } else if (l >= r1 + 4 && w[l - 4] === 97) {\n                l -= 2;\n              }\n            } else if (w[l - 3] === 115) {\n              if (l >= 6 && w[l - 4] === 115 && w[l - 5] === 101 && w[l - 6] === 108) {\n                if (l >= r1 + 6) l -= 2;\n              } else if (l >= r1 + 5 && w[l - 4] === 117 && w[l - 5] === 111) {\n                l -= 2;\n              }\n            } else if (l >= 5 && w[l - 3] === 116 && w[l - 4] === 110 && w[l - 5] === 101) {\n              if (l >= r1 + 5) l -= 2;\n            } else if (isValidLi(w[l - 3])) {\n              l -= 2;\n            }\n          }\n        }\n    }\n  }\n  if (l >= r1 + 3) {\n    switch (w[l - 1]) {\n      case 108:\n        if (w[l - 3] === 99) {\n          if (l >= r1 + 4 && w[l - 4] === 105 && w[l - 2] === 97) l -= 2;\n        } else if (w[l - 3] === 102) {\n          if (w[l - 2] === 117) l -= 3;\n        } else if (w[l - 3] === 110) {\n          if (l >= r1 + 6 && w[l - 2] === 97 && // a\n          w[l - 4] === 111 && // o\n          w[l - 5] === 105 && // i\n          w[l - 6] === 116) {\n            if (l >= 7 && w[l - 7] === 97) {\n              if (l >= r1 + 7) {\n                l -= 4;\n                w[l - 1] = 101;\n              }\n            } else {\n              l -= 2;\n            }\n          }\n        }\n        break;\n      case 101:\n        if (w[l - 2] === 122) {\n          if (l >= r1 + 5 && w[l - 3] === 105 && w[l - 4] === 108 && w[l - 5] === 97) l -= 3;\n        } else if (w[l - 2] === 116) {\n          if (l >= r1 + 5 && w[l - 3] === 97 && w[l - 4] === 99 && w[l - 5] === 105) l -= 3;\n        } else if (w[l - 2] === 118) {\n          if (l >= r2 + 5 && w[l - 3] === 105 && w[l - 4] === 116 && w[l - 5] === 97) l -= 5;\n        }\n        break;\n      case 105:\n        if (l >= r1 + 5 && w[l - 2] === 116 && // t\n        w[l - 3] === 105 && // i\n        w[l - 4] === 99 && // c\n        w[l - 5] === 105)\n          l -= 3;\n        break;\n      case 115:\n        if (l >= r1 + 4 && w[l - 2] === 115 && w[l - 3] === 101 && w[l - 4] === 110) l -= 4;\n    }\n  }\n  if (l >= r2 + 2) {\n    switch (w[l - 1]) {\n      case 110:\n        if (l >= r2 + 3 && w[l - 2] === 111 && // o\n        w[l - 3] === 105 && // i (ion)\n        (w[l - 4] === 115 || w[l - 4] === 116))\n          l -= 3;\n        break;\n      case 108:\n        if (w[l - 2] === 97) l -= 2;\n        break;\n      case 114:\n        if (w[l - 2] === 101) l -= 2;\n        break;\n      case 99:\n        if (w[l - 2] === 105) l -= 2;\n        break;\n      case 109:\n        if (l >= r2 + 3 && w[l - 2] === 115 && w[l - 3] === 105) l -= 3;\n        break;\n      case 105:\n        if (l >= r2 + 3 && w[l - 2] === 116 && w[l - 3] === 105) l -= 3;\n        break;\n      case 115:\n        if (l >= r2 + 3 && w[l - 2] === 117 && w[l - 3] === 111) l -= 3;\n        break;\n      case 116:\n        if (l >= r2 + 3 && w[l - 2] === 110) {\n          if (w[l - 3] === 97) {\n            l -= 3;\n          } else if (w[l - 3] === 101) {\n            if (l >= 4 && w[l - 4] === 109) {\n              if (l >= 5 && w[l - 5] === 101) {\n                if (l >= r2 + 5) l -= 5;\n              } else if (l >= r2 + 4) {\n                l -= 4;\n              }\n            } else {\n              l -= 3;\n            }\n          }\n        }\n        break;\n      case 101:\n        if (w[l - 2] === 99) {\n          if (l >= r2 + 4 && w[l - 3] === 110 && (w[l - 4] === 97 || w[l - 4] === 101)) l -= 4;\n        } else if (w[l - 2] === 108) {\n          if (l >= r2 + 4 && w[l - 3] === 98 && (w[l - 4] === 97 || w[l - 4] === 105)) l -= 4;\n        } else if (w[l - 2] === 116) {\n          if (l >= r2 + 3 && w[l - 3] === 97) l -= 3;\n        } else if (l >= r2 + 3 && (w[l - 2] === 118 || w[l - 2] === 122) && w[l - 3] === 105) {\n          l -= 3;\n        }\n    }\n  }\n  if (l >= r1 + 1 && // r1 is >= 1\n  (l >= r2 + 1 && w[l - 1] === 108 && w[l - 2] === 108 || // ll\n  w[l - 1] === 101 && (l >= r2 + 1 || !isShortV(w, l - 1))))\n    --l;\n  let out = \"\";\n  if (yFound) {\n    for (let i = 0; i < l; ++i) {\n      out += String.fromCharCode(w[i] === 89 ? 121 : w[i]);\n    }\n  } else {\n    for (let i = 0; i < l; ++i) out += String.fromCharCode(w[i]);\n  }\n  return out;\n};\nvar DEFAULT_OPTIONS = {\n  k1: 1.2,\n  b: 0.75,\n  minLength: 2,\n  stopWords: /* @__PURE__ */ new Set([\n    \"a\",\n    \"an\",\n    \"and\",\n    \"are\",\n    \"as\",\n    \"at\",\n    \"be\",\n    \"by\",\n    \"for\",\n    \"from\",\n    \"has\",\n    \"he\",\n    \"in\",\n    \"is\",\n    \"it\",\n    \"its\",\n    \"of\",\n    \"on\",\n    \"that\",\n    \"the\",\n    \"to\",\n    \"was\",\n    \"were\",\n    \"will\",\n    \"with\"\n  ]),\n  stemming: false,\n  stemWords: (word) => word\n};\nvar Tokenizer = class _Tokenizer {\n  static {\n    /** Default options for the Tokenizer. */\n    this.DEFAULT_OPTIONS = {\n      stopWords: /* @__PURE__ */ new Set(),\n      minLength: 2,\n      stemming: false,\n      stemmingRules: []\n    };\n  }\n  /**\n   * Creates a new tokenizer instance.\n   * @param options - Tokenization options including stop words, min length, stemming, and custom rules.\n   */\n  constructor(options2 = {}) {\n    const mergedOptions = { ..._Tokenizer.DEFAULT_OPTIONS, ...options2 };\n    this.stopWords = mergedOptions.stopWords;\n    this.minLength = mergedOptions.minLength;\n    this.stemming = mergedOptions.stemming;\n    this.stemmingRules = mergedOptions.stemmingRules.map((rule) => ({\n      ...rule,\n      pattern: typeof rule.pattern === \"string\" ? new RegExp(rule.pattern) : rule.pattern\n    }));\n  }\n  /**\n   * Tokenizes input text into an array of processed terms.\n   * Steps:\n   * 1. Cleans the text (lowercase, normalize, remove punctuation/symbols).\n   * 2. Splits the text into potential tokens.\n   * 3. Filters tokens based on `minLength` and `stopWords`.\n   * 4. Applies stemming if `stemming` is true (custom rules first, then Porter2).\n   * 5. Optionally calculates statistics.\n   *\n   * @param text - The input text string to tokenize.\n   * @param includeStats - If true, returns tokenization statistics along with tokens. Defaults to false.\n   * @returns A `TokenizationResult` object containing the array of tokens and optional stats.\n   * @throws {Error} If the input text is null, undefined, or empty.\n   */\n  tokenize(text, includeStats = false) {\n    if (!text) {\n      throw new Error(\"Input text cannot be null or empty\");\n    }\n    const startTime = Date.now();\n    const originalWords = text.split(/\\s+/).filter((word) => word.length > 0);\n    const cleaned = this.cleanText(text);\n    const tokens = cleaned.split(/\\s+/).filter((token) => this.isValidToken(token)).map((token) => this.stemming ? this.stemWord(token) : token);\n    const stats = includeStats ? {\n      originalWordCount: originalWords.length,\n      stopWordsRemoved: originalWords.length - tokens.length,\n      // This might be incorrect if stemming changes token count\n      stemmedWords: this.stemming ? tokens.length : 0,\n      processingTimeMs: Date.now() - startTime\n    } : {\n      originalWordCount: 0,\n      stopWordsRemoved: 0,\n      stemmedWords: 0,\n      processingTimeMs: 0\n    };\n    return { tokens, stats };\n  }\n  /**\n   * Cleans and normalizes text for tokenization.\n   * - Converts to lowercase.\n   * - Normalizes Unicode characters (NFKD).\n   * - Removes control characters and zero-width spaces.\n   * - Removes diacritical marks (accents).\n   * - Removes emojis and pictographs.\n   * - Removes common symbols (™, ®, ©, ℠, ‼).\n   * - Replaces Unicode punctuation with spaces.\n   * - Removes characters not matching basic Latin, CJK, Hangul, or whitespace.\n   * - Collapses multiple spaces into single spaces.\n   * - Trims leading/trailing whitespace.\n   *\n   * @param text - Input text to clean.\n   * @returns Cleaned and normalized text, ready for splitting into tokens.\n   *\n   * @example\n   * cleanText(\"Hello, World™!\") // \"hello world\"\n   * cleanText(\"héllo 👋\") // \"hello\"\n   * cleanText(\"Hello 世界!\") // \"hello 世界\"\n   * cleanText(\"I'm don't\") // \"i'm don't\" (apostrophes kept by replacing punctuation with space)\n   * cleanText(\"test©2023\") // \"test 2023\"\n   */\n  cleanText(text) {\n    return text.toLowerCase().normalize(\"NFKD\").replace(/[\\u0000-\\u001F\\u007F-\\u009F\\u200B-\\u200D\\uFEFF]/g, \"\").replace(/[\\u0300-\\u036f]/g, \"\").replace(/[\\p{Emoji_Presentation}\\p{Extended_Pictographic}]/gu, \"\").replace(/[™®©℠‼]/g, \"\").replace(/[\\p{P}]/gu, \" \").replace(/[^a-z0-9\\u3040-\\u30FF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uAC00-\\uD7AF\\s]/gu, \" \").replace(/\\s+/g, \" \").trim();\n  }\n  /**\n   * Checks if a token is valid (meets `minLength` criteria and is not a stop word).\n   * Numeric tokens are always considered valid regardless of length.\n   * @param token - The token string to validate.\n   * @returns `true` if the token is valid, `false` otherwise.\n   */\n  isValidToken(token) {\n    const isNumeric = /^\\d+$/.test(token);\n    return (token.length >= this.minLength || isNumeric) && !this.stopWords.has(token);\n  }\n  /**\n   * Applies stemming to a single word.\n   * First, tries to apply custom stemming rules defined in `stemmingRules`.\n   * If no custom rule matches, applies the default Porter2 stemming algorithm.\n   * Words shorter than 3 characters are not stemmed.\n   * @param word - The word to stem.\n   * @returns The stemmed word.\n   */\n  stemWord(word) {\n    if (word.length < 3) return word;\n    let customRuleApplied = false;\n    let stemmed = word;\n    for (const rule of this.stemmingRules) {\n      const match = stemmed.match(rule.pattern);\n      if (match) {\n        if (!rule.minMeasure || this.measure(stemmed.substring(0, match.index)) >= rule.minMeasure) {\n          if (typeof rule.replacement === \"string\") {\n            stemmed = stemmed.replace(rule.pattern, rule.replacement);\n          } else {\n            stemmed = stemmed.replace(\n              rule.pattern,\n              (...args) => rule.replacement(...args)\n            );\n          }\n          customRuleApplied = true;\n        }\n      }\n    }\n    if (customRuleApplied && stemmed !== word) return stemmed;\n    return stem(stemmed);\n  }\n  /**\n   * Checks if the character at a given index in a word is a consonant.\n   * Treats 'y' as a consonant if it's the first letter or follows a consonant.\n   * @param word - The word string.\n   * @param i - The index of the character to check.\n   * @returns `true` if the character is a consonant, `false` otherwise.\n   */\n  isConsonant(word, i) {\n    const char = word[i];\n    if (\"aeiou\".includes(char)) return false;\n    return char !== \"y\" || (i === 0 ? true : !this.isConsonant(word, i - 1));\n  }\n  /**\n   * Calculates the \"measure\" of a word stem (approximates syllable count).\n   * The measure (m) is the number of times a sequence of vowels is followed by a\n   * sequence of consonants (VC). Used in some stemming rules.\n   * Example: measure(\"tree\") = 0, measure(\"trouble\") = 1, measure(\"private\") = 2\n   * @param word - The word (or stem) to measure.\n   * @returns The measure (m) of the word.\n   */\n  measure(word) {\n    let m = 0;\n    let vowelSeen = false;\n    for (let i = 0; i < word.length; i++) {\n      if (this.isConsonant(word, i)) {\n        if (vowelSeen) {\n          m++;\n          vowelSeen = false;\n        }\n      } else {\n        vowelSeen = true;\n      }\n    }\n    return m;\n  }\n};\nvar BM25 = class {\n  // Consider using a generic <T>\n  /**\n   * Creates a new BM25 search instance.\n   * @param docs - Optional array of initial documents (objects with string fields) to index.\n   * @param options - Configuration options for BM25 parameters (k1, b), tokenizer (stopWords, stemming, minLength), and field boosts.\n   */\n  constructor(docs, options2 = {}) {\n    const opts = { ...DEFAULT_OPTIONS, ...options2 };\n    this.termFrequencySaturation = opts.k1;\n    this.lengthNormalizationFactor = opts.b;\n    this.tokenizer = new Tokenizer(opts);\n    this.fieldBoosts = opts.fieldBoosts || {};\n    this.documents = [];\n    this.documentLengths = new Uint32Array(0);\n    this.termToIndex = /* @__PURE__ */ new Map();\n    this.documentFrequency = new Uint32Array(0);\n    this.averageDocLength = 0;\n    this.termFrequencies = /* @__PURE__ */ new Map();\n    if (docs && docs.length > 0) {\n      this.documents = [...docs];\n      const { documentLengths, termToIndex, documentFrequency, averageDocLength, termFrequencies } = this.processDocuments(docs);\n      this.documentLengths = documentLengths;\n      this.termToIndex = termToIndex;\n      this.documentFrequency = documentFrequency;\n      this.averageDocLength = averageDocLength;\n      this.termFrequencies = termFrequencies;\n    }\n  }\n  /**\n   * Processes an array of documents to build the initial index structures.\n   * Calculates document lengths, term frequencies, document frequencies, and average document length.\n   * @param docs - Array of documents to process.\n   * @returns An object containing the calculated index data.\n   * @internal\n   */\n  processDocuments(docs) {\n    const numDocs = docs.length;\n    const documentLengths = new Uint32Array(numDocs);\n    const termToIndex = /* @__PURE__ */ new Map();\n    const termDocs = /* @__PURE__ */ new Map();\n    const termFrequencies = /* @__PURE__ */ new Map();\n    let totalDocLength = 0;\n    let nextTermIndex = 0;\n    docs.forEach((doc, docIndex) => {\n      let currentDocLength = 0;\n      const docTermFrequencies = /* @__PURE__ */ new Map();\n      Object.entries(doc).forEach(([field, content]) => {\n        if (typeof content !== \"string\") return;\n        const fieldBoost = this.fieldBoosts[field] || 1;\n        const { tokens } = this.tokenizer.tokenize(content);\n        const fieldLength = tokens.length * fieldBoost;\n        currentDocLength += fieldLength;\n        tokens.forEach((term) => {\n          if (!termToIndex.has(term)) {\n            termToIndex.set(term, nextTermIndex++);\n          }\n          const termIndexVal = termToIndex.get(term);\n          if (!termDocs.has(term)) {\n            termDocs.set(term, /* @__PURE__ */ new Set());\n          }\n          termDocs.get(term).add(docIndex);\n          const currentFreq = docTermFrequencies.get(termIndexVal) || 0;\n          docTermFrequencies.set(termIndexVal, currentFreq + fieldBoost);\n        });\n      });\n      documentLengths[docIndex] = currentDocLength;\n      totalDocLength += currentDocLength;\n      docTermFrequencies.forEach((freq, termIndexVal) => {\n        if (!termFrequencies.has(termIndexVal)) {\n          termFrequencies.set(termIndexVal, /* @__PURE__ */ new Map());\n        }\n        termFrequencies.get(termIndexVal).set(docIndex, freq);\n      });\n    });\n    const documentFrequency = new Uint32Array(termToIndex.size);\n    termDocs.forEach((docsSet, term) => {\n      const termIndexVal = termToIndex.get(term);\n      documentFrequency[termIndexVal] = docsSet.size;\n    });\n    return {\n      documentLengths,\n      termToIndex,\n      documentFrequency,\n      averageDocLength: numDocs > 0 ? totalDocLength / numDocs : 0,\n      termFrequencies\n    };\n  }\n  /**\n   * Recalculates the average document length based on the current `documentLengths`.\n   * @internal\n   */\n  recalculateAverageLength() {\n    if (this.documentLengths.length === 0) {\n      this.averageDocLength = 0;\n      return;\n    }\n    const totalLength = Array.prototype.reduce.call(\n      this.documentLengths,\n      (sum, len) => sum + len,\n      0\n    );\n    this.averageDocLength = totalLength / this.documentLengths.length;\n  }\n  /**\n   * Searches the indexed documents for a given query string using the BM25 ranking formula.\n   *\n   * @param query - The search query text.\n   * @param topK - The maximum number of top-scoring results to return. Defaults to 10.\n   * @returns An array of `SearchResult` objects, sorted by descending BM25 score.\n   */\n  search(query, topK = 10) {\n    const { tokens: queryTokens } = this.tokenizer.tokenize(query);\n    const scores = new Float32Array(this.documentLengths.length).fill(0);\n    queryTokens.forEach((term) => {\n      const termIndex = this.termToIndex.get(term);\n      if (termIndex === void 0) return;\n      const idf = this.calculateIdf(termIndex);\n      if (idf <= 0) return;\n      const termFreqsInDocs = this.termFrequencies.get(termIndex);\n      if (!termFreqsInDocs) return;\n      termFreqsInDocs.forEach((tf, docIndex) => {\n        const docLength = this.documentLengths[docIndex];\n        const numerator = tf * (this.termFrequencySaturation + 1);\n        const denominator = tf + this.termFrequencySaturation * (1 - this.lengthNormalizationFactor + this.lengthNormalizationFactor * docLength / this.averageDocLength);\n        scores[docIndex] += idf * (numerator / denominator);\n      });\n    });\n    return Array.from({ length: scores.length }, (_, i) => ({\n      index: i,\n      score: scores[i]\n      // Optionally add: doc: this.getDocument(i) // If you want the full doc in results\n    })).filter((result) => result.score > 0).sort((a, b) => b.score - a.score).slice(0, topK);\n  }\n  /**\n   * Searches for an exact phrase within the indexed documents.\n   * Ranks documents containing the exact sequence of tokens higher.\n   * Note: This is a basic implementation. More sophisticated phrase search might consider proximity.\n   *\n   * @param phrase - The exact phrase to search for.\n   * @param topK - The maximum number of results to return. Defaults to 10.\n   * @returns An array of `SearchResult` objects, sorted by score, for documents containing the phrase.\n   */\n  searchPhrase(phrase, topK = 10) {\n    const { tokens: phraseTokens } = this.tokenizer.tokenize(phrase);\n    if (phraseTokens.length === 0) return [];\n    let candidateDocs = null;\n    for (const term of phraseTokens) {\n      const termIndex = this.termToIndex.get(term);\n      if (termIndex === void 0) return [];\n      const docsContainingTermIter = this.termFrequencies.get(termIndex)?.keys();\n      if (!docsContainingTermIter) return [];\n      const currentTermDocs = new Set(docsContainingTermIter);\n      if (candidateDocs === null) {\n        candidateDocs = currentTermDocs;\n      } else {\n        candidateDocs = new Set([...candidateDocs].filter((docIdx) => currentTermDocs.has(docIdx)));\n      }\n      if (candidateDocs.size === 0) return [];\n    }\n    if (candidateDocs === null || candidateDocs.size === 0) return [];\n    const scores = /* @__PURE__ */ new Map();\n    candidateDocs.forEach((docIndex) => {\n      const doc = this.getDocument(docIndex);\n      let phraseFoundInDoc = false;\n      Object.entries(doc).forEach(([field, content]) => {\n        if (typeof content !== \"string\" || phraseFoundInDoc) return;\n        const fieldBoost = this.fieldBoosts[field] || 1;\n        const { tokens: docTokens } = this.tokenizer.tokenize(content);\n        for (let i = 0; i <= docTokens.length - phraseTokens.length; i++) {\n          let match = true;\n          for (let j = 0; j < phraseTokens.length; j++) {\n            if (docTokens[i + j] !== phraseTokens[j]) {\n              match = false;\n              break;\n            }\n          }\n          if (match) {\n            const phraseScoreVal = this.calculatePhraseScore(phraseTokens, docIndex) * fieldBoost;\n            scores.set(docIndex, (scores.get(docIndex) || 0) + phraseScoreVal);\n            phraseFoundInDoc = true;\n            break;\n          }\n        }\n      });\n    });\n    return Array.from(scores.entries()).map(([index, score]) => ({ index, score })).sort((a, b) => b.score - a.score).slice(0, topK);\n  }\n  /**\n   * Calculates a BM25-like score for a sequence of phrase tokens within a specific document.\n   * Sums the individual BM25 scores of the terms in the phrase for that document.\n   * @param phraseTokens - The tokenized phrase.\n   * @param docIndex - The index of the document to score against.\n   * @returns The calculated phrase score for the document.\n   * @internal\n   */\n  calculatePhraseScore(phraseTokens, docIndex) {\n    return phraseTokens.reduce((currentScore, term) => {\n      const termIndex = this.termToIndex.get(term);\n      if (termIndex === void 0) return currentScore;\n      const idf = this.calculateIdf(termIndex);\n      const tf = this.termFrequencies.get(termIndex)?.get(docIndex) || 0;\n      const docLength = this.documentLengths[docIndex];\n      const numerator = tf * (this.termFrequencySaturation + 1);\n      const denominator = tf + this.termFrequencySaturation * (1 - this.lengthNormalizationFactor + this.lengthNormalizationFactor * docLength / this.averageDocLength);\n      return currentScore + idf * (numerator / denominator);\n    }, 0);\n  }\n  /**\n   * Adds a single new document to the index.\n   * Updates all internal index structures incrementally.\n   * Note: For adding many documents, `addDocumentsParallel` is generally more efficient.\n   *\n   * @param doc - The document object (with string fields) to add.\n   * @throws {Error} If the document is null or undefined.\n   */\n  async addDocument(doc) {\n    if (!doc) throw new Error(\"Document cannot be null\");\n    const docIndex = this.documentLengths.length;\n    this.documents.push(doc);\n    const newDocLengths = new Uint32Array(docIndex + 1);\n    newDocLengths.set(this.documentLengths, 0);\n    this.documentLengths = newDocLengths;\n    let currentDocLength = 0;\n    const docTermFrequencies = /* @__PURE__ */ new Map();\n    Object.entries(doc).forEach(([field, content]) => {\n      if (typeof content !== \"string\") return;\n      const fieldBoost = this.fieldBoosts[field] || 1;\n      const { tokens } = this.tokenizer.tokenize(content);\n      currentDocLength += tokens.length * fieldBoost;\n      tokens.forEach((term) => {\n        let termIndexVal;\n        if (!this.termToIndex.has(term)) {\n          termIndexVal = this.termToIndex.size;\n          this.termToIndex.set(term, termIndexVal);\n          if (this.documentFrequency.length <= termIndexVal) {\n            const oldDf = this.documentFrequency;\n            const newSize = Math.max(termIndexVal + 1, oldDf.length * 2 || 1);\n            this.documentFrequency = new Uint32Array(newSize);\n            this.documentFrequency.set(oldDf, 0);\n          }\n          this.documentFrequency[termIndexVal] = 0;\n        } else {\n          termIndexVal = this.termToIndex.get(term);\n        }\n        const currentFreq = docTermFrequencies.get(termIndexVal) || 0;\n        docTermFrequencies.set(termIndexVal, currentFreq + fieldBoost);\n      });\n    });\n    this.documentLengths[docIndex] = currentDocLength;\n    docTermFrequencies.forEach((freq, termIndexVal) => {\n      if (!this.termFrequencies.has(termIndexVal)) {\n        this.termFrequencies.set(termIndexVal, /* @__PURE__ */ new Map());\n      }\n      this.termFrequencies.get(termIndexVal).set(docIndex, freq);\n      if (termIndexVal < this.documentFrequency.length) {\n        this.documentFrequency[termIndexVal]++;\n      } else {\n        console.error(\n          `Error: termIndexVal ${termIndexVal} is out of bounds for documentFrequency (length ${this.documentFrequency.length}). This indicates an issue with array resizing or term indexing.`\n        );\n      }\n    });\n    this.recalculateAverageLength();\n  }\n  /**\n   * Calculates the Inverse Document Frequency (IDF) for a given term index.\n   * Uses the BM25 IDF formula: log(1 + (N - n + 0.5) / (n + 0.5))\n   * where N is the total number of documents and n is the number of documents\n   * containing the term. The +1 smooths the logarithm.\n   *\n   * @param termIndex - The integer index of the term.\n   * @returns The IDF score for the term. Returns 0 if the term is not found or has 0 DF.\n   */\n  calculateIdf(termIndex) {\n    if (termIndex < 0 || termIndex >= this.documentFrequency.length) {\n      return 0;\n    }\n    const docFreq = this.documentFrequency[termIndex];\n    if (docFreq <= 0 || docFreq > this.documentLengths.length) {\n      return 0;\n    }\n    const N = this.documentLengths.length;\n    const numerator = N - docFreq + 0.5;\n    const denominator = docFreq + 0.5;\n    return Math.log(1 + numerator / denominator);\n  }\n  /**\n   * Retrieves the term frequency (TF) for a specific term in a specific document.\n   * @param termIndex - The integer index of the term.\n   * @param docIndex - The index of the document.\n   * @returns The term frequency, or 0 if the term is not in the document or indices are invalid.\n   */\n  getTermFrequency(termIndex, docIndex) {\n    return this.termFrequencies.get(termIndex)?.get(docIndex) || 0;\n  }\n  /**\n   * Retrieves the original document object stored at a given index.\n   * @param index - The index of the document to retrieve.\n   * @returns The document object.\n   * @throws {Error} If the index is out of bounds.\n   */\n  getDocument(index) {\n    if (index < 0 || index >= this.documents.length) {\n      throw new Error(`Document index ${index} out of bounds (0-${this.documents.length - 1})`);\n    }\n    return this.documents[index];\n  }\n  /**\n   * Clears all indexed documents and resets the BM25 instance to its initial state.\n   */\n  clearDocuments() {\n    this.documents = [];\n    this.documentLengths = new Uint32Array(0);\n    this.termToIndex.clear();\n    this.documentFrequency = new Uint32Array(0);\n    this.averageDocLength = 0;\n    this.termFrequencies.clear();\n  }\n  /**\n   * Gets the total number of documents currently indexed.\n   * @returns The document count.\n   */\n  getDocumentCount() {\n    return this.documents.length;\n  }\n  /**\n   * Adds multiple documents sequentially by calling `addDocument` for each.\n   * This method processes documents sequentially in the main thread.\n   * @param docs - An array of documents to add.\n   */\n  async addDocuments(docs) {\n    return Promise.all(docs.map((doc) => this.addDocument(doc)));\n  }\n};\n\n// src/runtime.ts\nvar environmentSettings = {};\nvar Semaphore = class {\n  constructor(count) {\n    this.waiting = [];\n    this.permits = count;\n  }\n  async acquire() {\n    if (this.permits > 0) {\n      this.permits -= 1;\n      return Promise.resolve();\n    }\n    return new Promise((resolve) => {\n      this.waiting.push(resolve);\n    });\n  }\n  release() {\n    this.permits += 1;\n    const nextResolve = this.waiting.shift();\n    if (nextResolve && this.permits > 0) {\n      this.permits -= 1;\n      nextResolve();\n    }\n  }\n};\nvar AgentRuntime = class {\n  // Default value, can be overridden\n  constructor(opts) {\n    this.#conversationLength = 32;\n    this.actions = [];\n    this.evaluators = [];\n    this.providers = [];\n    this.plugins = [];\n    this.isInitialized = false;\n    this.events = /* @__PURE__ */ new Map();\n    this.stateCache = /* @__PURE__ */ new Map();\n    this.fetch = fetch;\n    this.services = /* @__PURE__ */ new Map();\n    this.serviceTypes = /* @__PURE__ */ new Map();\n    this.models = /* @__PURE__ */ new Map();\n    this.routes = [];\n    this.taskWorkers = /* @__PURE__ */ new Map();\n    this.sendHandlers = /* @__PURE__ */ new Map();\n    this.eventHandlers = /* @__PURE__ */ new Map();\n    // A map of all plugins available to the runtime, keyed by name, for dependency resolution.\n    this.allAvailablePlugins = /* @__PURE__ */ new Map();\n    // The initial list of plugins specified by the character configuration.\n    this.characterPlugins = [];\n    this.servicesInitQueue = /* @__PURE__ */ new Set();\n    this.maxWorkingMemoryEntries = 50;\n    this.agentId = opts.character?.id ?? opts?.agentId ?? stringToUuid(opts.character?.name ?? (0,uuid__WEBPACK_IMPORTED_MODULE_14__[\"default\"])() + opts.character?.username);\n    this.character = opts.character;\n    const logLevel = process.env.LOG_LEVEL || \"info\";\n    this.logger = createLogger({\n      agentName: this.character?.name,\n      logLevel\n    });\n    this.#conversationLength = opts.conversationLength ?? this.#conversationLength;\n    if (opts.adapter) {\n      this.registerDatabaseAdapter(opts.adapter);\n    }\n    this.fetch = opts.fetch ?? this.fetch;\n    this.settings = opts.settings ?? environmentSettings;\n    this.plugins = [];\n    this.characterPlugins = opts?.plugins ?? [];\n    if (opts.allAvailablePlugins) {\n      for (const plugin of opts.allAvailablePlugins) {\n        if (plugin?.name) {\n          this.allAvailablePlugins.set(plugin.name, plugin);\n        }\n      }\n    }\n    this.logger.debug(`Success: Agent ID: ${this.agentId}`);\n    this.currentRunId = void 0;\n    if (opts.settings?.MAX_WORKING_MEMORY_ENTRIES) {\n      this.maxWorkingMemoryEntries = parseInt(opts.settings.MAX_WORKING_MEMORY_ENTRIES, 10) || 50;\n    } else if (process.env.MAX_WORKING_MEMORY_ENTRIES) {\n      this.maxWorkingMemoryEntries = parseInt(process.env.MAX_WORKING_MEMORY_ENTRIES, 10) || 50;\n    }\n  }\n  #conversationLength;\n  /**\n   * Create a new run ID for tracking a sequence of model calls\n   */\n  createRunId() {\n    return (0,uuid__WEBPACK_IMPORTED_MODULE_14__[\"default\"])();\n  }\n  /**\n   * Start a new run for tracking prompts\n   */\n  startRun() {\n    this.currentRunId = this.createRunId();\n    return this.currentRunId;\n  }\n  /**\n   * End the current run\n   */\n  endRun() {\n    this.currentRunId = void 0;\n  }\n  /**\n   * Get the current run ID (creates one if it doesn't exist)\n   */\n  getCurrentRunId() {\n    if (!this.currentRunId) {\n      this.currentRunId = this.createRunId();\n    }\n    return this.currentRunId;\n  }\n  async registerPlugin(plugin) {\n    if (!plugin?.name) {\n      const errorMsg = \"Plugin or plugin name is undefined\";\n      this.logger.error(`*** registerPlugin: ${errorMsg}`);\n      throw new Error(`*** registerPlugin: ${errorMsg}`);\n    }\n    const existingPlugin = this.plugins.find((p) => p.name === plugin.name);\n    if (existingPlugin) {\n      this.logger.warn(\n        `${this.character.name}(${this.agentId}) - Plugin ${plugin.name} is already registered. Skipping re-registration.`\n      );\n      return;\n    }\n    this.plugins.push(plugin);\n    this.logger.debug(\n      `Success: Plugin ${plugin.name} added to active plugins for ${this.character.name}(${this.agentId}).`\n    );\n    if (plugin.init) {\n      try {\n        await plugin.init(plugin.config || {}, this);\n        this.logger.debug(`Success: Plugin ${plugin.name} initialized successfully`);\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        if (errorMessage.includes(\"API key\") || errorMessage.includes(\"environment variables\") || errorMessage.includes(\"Invalid plugin configuration\")) {\n          console.warn(`Plugin ${plugin.name} requires configuration. ${errorMessage}`);\n          console.warn(\n            \"Please check your environment variables and ensure all required API keys are set.\"\n          );\n          console.warn(\"You can set these in your .env file.\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    if (plugin.adapter) {\n      this.logger.debug(`Registering database adapter for plugin ${plugin.name}`);\n      this.registerDatabaseAdapter(plugin.adapter);\n    }\n    if (plugin.actions) {\n      for (const action of plugin.actions) {\n        this.registerAction(action);\n      }\n    }\n    if (plugin.evaluators) {\n      for (const evaluator of plugin.evaluators) {\n        this.registerEvaluator(evaluator);\n      }\n    }\n    if (plugin.providers) {\n      for (const provider of plugin.providers) {\n        this.registerProvider(provider);\n      }\n    }\n    if (plugin.models) {\n      for (const [modelType, handler] of Object.entries(plugin.models)) {\n        this.registerModel(\n          modelType,\n          handler,\n          plugin.name,\n          plugin?.priority\n        );\n      }\n    }\n    if (plugin.routes) {\n      for (const route of plugin.routes) {\n        this.routes.push(route);\n      }\n    }\n    if (plugin.events) {\n      for (const [eventName, eventHandlers] of Object.entries(plugin.events)) {\n        for (const eventHandler of eventHandlers) {\n          this.registerEvent(eventName, eventHandler);\n        }\n      }\n    }\n    if (plugin.services) {\n      for (const service of plugin.services) {\n        if (this.isInitialized) {\n          await this.registerService(service);\n        } else {\n          this.servicesInitQueue.add(service);\n        }\n      }\n    }\n  }\n  getAllServices() {\n    return this.services;\n  }\n  async stop() {\n    this.logger.debug(`runtime::stop - character ${this.character.name}`);\n    for (const [serviceName, services] of this.services) {\n      this.logger.debug(`runtime::stop - requesting service stop for ${serviceName}`);\n      for (const service of services) {\n        await service.stop();\n      }\n    }\n  }\n  async initialize() {\n    if (this.isInitialized) {\n      this.logger.warn(\"Agent already initialized\");\n      return;\n    }\n    const pluginRegistrationPromises = [];\n    const pluginsToLoad = this.characterPlugins;\n    for (const plugin of pluginsToLoad) {\n      if (plugin) {\n        pluginRegistrationPromises.push(this.registerPlugin(plugin));\n      }\n    }\n    await Promise.all(pluginRegistrationPromises);\n    if (!this.adapter) {\n      this.logger.error(\n        \"Database adapter not initialized. Make sure @elizaos/plugin-sql is included in your plugins.\"\n      );\n      throw new Error(\n        \"Database adapter not initialized. The SQL plugin (@elizaos/plugin-sql) is required for agent initialization. Please ensure it is included in your character configuration.\"\n      );\n    }\n    try {\n      await this.adapter.init();\n      this.logger.info(\"Running plugin migrations...\");\n      await this.runPluginMigrations();\n      this.logger.info(\"Plugin migrations completed.\");\n      const existingAgent = await this.ensureAgentExists(this.character);\n      if (!existingAgent) {\n        const errorMsg = `Agent ${this.character.name} does not exist in database after ensureAgentExists call`;\n        throw new Error(errorMsg);\n      }\n      let agentEntity = await this.getEntityById(this.agentId);\n      if (!agentEntity) {\n        const created = await this.createEntity({\n          id: this.agentId,\n          names: [this.character.name],\n          metadata: {},\n          agentId: existingAgent.id\n        });\n        if (!created) {\n          const errorMsg = `Failed to create entity for agent ${this.agentId}`;\n          throw new Error(errorMsg);\n        }\n        agentEntity = await this.getEntityById(this.agentId);\n        if (!agentEntity) throw new Error(`Agent entity not found for ${this.agentId}`);\n        this.logger.debug(`Success: Agent entity created successfully for ${this.character.name}`);\n      }\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : String(error);\n      this.logger.error(`Failed to create agent entity: ${errorMsg}`);\n      throw error;\n    }\n    try {\n      const room = await this.getRoom(this.agentId);\n      if (!room) {\n        await this.createRoom({\n          id: this.agentId,\n          name: this.character.name,\n          source: \"elizaos\",\n          type: \"SELF\" /* SELF */,\n          channelId: this.agentId,\n          serverId: this.agentId,\n          worldId: this.agentId\n        });\n      }\n      const participants = await this.adapter.getParticipantsForRoom(this.agentId);\n      if (!participants.includes(this.agentId)) {\n        const added = await this.addParticipant(this.agentId, this.agentId);\n        if (!added) {\n          const errorMsg = `Failed to add agent ${this.agentId} as participant to its own room`;\n          throw new Error(errorMsg);\n        }\n        this.logger.debug(`Agent ${this.character.name} linked to its own room successfully`);\n      }\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : String(error);\n      this.logger.error(`Failed to add agent as participant: ${errorMsg}`);\n      throw error;\n    }\n    const embeddingModel = this.getModel(ModelType2.TEXT_EMBEDDING);\n    if (!embeddingModel) {\n      this.logger.warn(\n        `[AgentRuntime][${this.character.name}] No TEXT_EMBEDDING model registered. Skipping embedding dimension setup.`\n      );\n    } else {\n      await this.ensureEmbeddingDimension();\n    }\n    for (const service of this.servicesInitQueue) {\n      await this.registerService(service);\n    }\n    this.isInitialized = true;\n  }\n  async runPluginMigrations() {\n    const drizzle = this.adapter?.db;\n    if (!drizzle) {\n      this.logger.warn(\"Drizzle instance not found on adapter, skipping plugin migrations.\");\n      return;\n    }\n    const pluginsWithSchemas = this.plugins.filter((p) => p.schema);\n    this.logger.info(`Found ${pluginsWithSchemas.length} plugins with schemas to migrate.`);\n    for (const p of pluginsWithSchemas) {\n      if (p.schema) {\n        this.logger.info(`Running migrations for plugin: ${p.name}`);\n        try {\n          if (this.adapter && \"runMigrations\" in this.adapter) {\n            await this.adapter.runMigrations(p.schema, p.name);\n            this.logger.info(`Successfully migrated plugin: ${p.name}`);\n          }\n        } catch (error) {\n          this.logger.error(`Failed to migrate plugin ${p.name}:`, error);\n        }\n      }\n    }\n  }\n  async getConnection() {\n    if (!this.adapter) {\n      throw new Error(\"Database adapter not registered\");\n    }\n    return this.adapter.getConnection();\n  }\n  setSetting(key, value, secret = false) {\n    if (secret) {\n      if (!this.character.secrets) {\n        this.character.secrets = {};\n      }\n      this.character.secrets[key] = value;\n    } else {\n      if (!this.character.settings) {\n        this.character.settings = {};\n      }\n      this.character.settings[key] = value;\n    }\n  }\n  getSetting(key) {\n    const value = this.character.secrets?.[key] || this.character.settings?.[key] || this.character.settings?.secrets?.[key] || this.settings[key];\n    const decryptedValue = decryptStringValue(value, getSalt());\n    if (decryptedValue === \"true\") return true;\n    if (decryptedValue === \"false\") return false;\n    return decryptedValue || null;\n  }\n  getConversationLength() {\n    return this.#conversationLength;\n  }\n  registerDatabaseAdapter(adapter) {\n    if (this.adapter) {\n      this.logger.warn(\n        \"Database adapter already registered. Additional adapters will be ignored. This may lead to unexpected behavior.\"\n      );\n    } else {\n      this.adapter = adapter;\n      this.logger.debug(\"Success: Database adapter registered successfully.\");\n    }\n  }\n  registerProvider(provider) {\n    this.providers.push(provider);\n    this.logger.debug(`Success: Provider ${provider.name} registered successfully.`);\n  }\n  registerAction(action) {\n    this.logger.debug(\n      `${this.character.name}(${this.agentId}) - Registering action: ${action.name}`\n    );\n    if (this.actions.find((a) => a.name === action.name)) {\n      this.logger.warn(\n        `${this.character.name}(${this.agentId}) - Action ${action.name} already exists. Skipping registration.`\n      );\n    } else {\n      this.actions.push(action);\n      this.logger.debug(\n        `${this.character.name}(${this.agentId}) - Action ${action.name} registered successfully.`\n      );\n    }\n  }\n  registerEvaluator(evaluator) {\n    this.evaluators.push(evaluator);\n  }\n  // Helper functions for immutable action plan updates\n  updateActionPlan(plan, updates) {\n    return { ...plan, ...updates };\n  }\n  updateActionStep(plan, index, stepUpdates) {\n    if (!plan.steps || index < 0 || index >= plan.steps.length) {\n      this.logger.warn(\n        `Invalid step index: ${index} for plan with ${plan.steps?.length || 0} steps`\n      );\n      return plan;\n    }\n    return {\n      ...plan,\n      steps: plan.steps.map(\n        (step, i) => i === index ? { ...step, ...stepUpdates } : step\n      )\n    };\n  }\n  async processActions(message, responses, state, callback) {\n    const allActions = [];\n    for (const response of responses) {\n      if (response.content?.actions && response.content.actions.length > 0) {\n        allActions.push(...response.content.actions);\n      }\n    }\n    const hasMultipleActions = allActions.length > 1;\n    const runId = this.createRunId();\n    let actionPlan = null;\n    if (hasMultipleActions) {\n      const thought = responses[0]?.content?.thought || `Executing ${allActions.length} actions: ${allActions.join(\", \")}`;\n      actionPlan = {\n        runId,\n        totalSteps: allActions.length,\n        currentStep: 0,\n        steps: allActions.map((action) => ({\n          action,\n          status: \"pending\"\n        })),\n        thought,\n        startTime: Date.now()\n      };\n    }\n    let actionIndex = 0;\n    for (const response of responses) {\n      let normalizeAction = function(actionString) {\n        return actionString.toLowerCase().replace(/_/g, \"\");\n      };\n      if (!response.content?.actions || response.content.actions.length === 0) {\n        this.logger.warn(\"No action found in the response content.\");\n        continue;\n      }\n      const actions = response.content.actions;\n      const actionResults = [];\n      let accumulatedState = state;\n      this.logger.debug(`Found actions: ${this.actions.map((a) => normalizeAction(a.name))}`);\n      for (const responseAction of actions) {\n        if (actionPlan) {\n          actionPlan = this.updateActionPlan(actionPlan, { currentStep: actionIndex + 1 });\n        }\n        accumulatedState = await this.composeState(message, [\n          \"RECENT_MESSAGES\",\n          \"ACTION_STATE\"\n          // This will include the action plan\n        ]);\n        if (actionPlan && accumulatedState.data) {\n          accumulatedState.data.actionPlan = actionPlan;\n          accumulatedState.data.actionResults = actionResults;\n        }\n        this.logger.debug(`Success: Calling action: ${responseAction}`);\n        const normalizedResponseAction = normalizeAction(responseAction);\n        let action = this.actions.find(\n          (a) => normalizeAction(a.name) === normalizedResponseAction\n        );\n        if (!action) {\n          action = this.actions.find(\n            (a) => normalizeAction(a.name).includes(normalizedResponseAction) || normalizedResponseAction.includes(normalizeAction(a.name))\n          );\n        }\n        if (action) {\n          this.logger.debug(`Success: Found action: ${action?.name}`);\n        } else {\n          this.logger.debug(\"Attempting to find action in similes.\");\n          for (const _action of this.actions) {\n            const exactSimileMatch = _action.similes?.find(\n              (simile) => normalizeAction(simile) === normalizedResponseAction\n            );\n            if (exactSimileMatch) {\n              action = _action;\n              this.logger.debug(`Success: Action found in similes (exact match): ${action.name}`);\n              break;\n            }\n            const fuzzySimileMatch = _action.similes?.find(\n              (simile) => normalizeAction(simile).includes(normalizedResponseAction) || normalizedResponseAction.includes(normalizeAction(simile))\n            );\n            if (fuzzySimileMatch) {\n              action = _action;\n              this.logger.debug(`Success: Action found in similes (fuzzy match): ${action.name}`);\n              break;\n            }\n          }\n        }\n        if (!action) {\n          const errorMsg = `No action found for: ${responseAction}`;\n          this.logger.error(errorMsg);\n          if (actionPlan && actionPlan.steps[actionIndex]) {\n            actionPlan = this.updateActionStep(actionPlan, actionIndex, {\n              status: \"failed\",\n              error: errorMsg\n            });\n          }\n          const actionMemory = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(),\n            entityId: message.entityId,\n            roomId: message.roomId,\n            worldId: message.worldId,\n            content: {\n              thought: errorMsg,\n              source: \"auto\",\n              type: \"action_result\",\n              actionName: responseAction,\n              actionStatus: \"failed\",\n              runId\n            }\n          };\n          await this.createMemory(actionMemory, \"messages\");\n          actionIndex++;\n          continue;\n        }\n        if (!action.handler) {\n          this.logger.error(`Action ${action.name} has no handler.`);\n          if (actionPlan && actionPlan.steps[actionIndex]) {\n            actionPlan = this.updateActionStep(actionPlan, actionIndex, {\n              status: \"failed\",\n              error: \"No handler\"\n            });\n          }\n          actionIndex++;\n          continue;\n        }\n        try {\n          this.logger.debug(`Executing handler for action: ${action.name}`);\n          const actionId = (0,uuid__WEBPACK_IMPORTED_MODULE_14__[\"default\"])();\n          this.currentActionContext = {\n            actionName: action.name,\n            actionId,\n            prompts: []\n          };\n          const actionContext = {\n            previousResults: actionResults,\n            getPreviousResult: (actionName) => {\n              return actionResults.find((r) => r.data?.actionName === actionName);\n            }\n          };\n          const options2 = {\n            context: actionContext\n          };\n          if (actionPlan) {\n            options2.actionPlan = {\n              totalSteps: actionPlan.totalSteps,\n              currentStep: actionPlan.currentStep,\n              steps: actionPlan.steps,\n              thought: actionPlan.thought\n            };\n          }\n          const result = await action.handler(\n            this,\n            message,\n            accumulatedState,\n            options2,\n            callback,\n            responses\n          );\n          const isLegacyReturn = result === void 0 || result === null || typeof result === \"boolean\";\n          let actionResult = null;\n          if (!isLegacyReturn) {\n            if (typeof result === \"object\" && result !== null && (\"values\" in result || \"data\" in result || \"text\" in result)) {\n              actionResult = {\n                success: true,\n                // Default to true if not specified\n                ...result\n              };\n            } else {\n              actionResult = {\n                success: true,\n                // Default success for legacy results\n                data: {\n                  actionName: action.name,\n                  legacyResult: result\n                }\n              };\n            }\n            actionResults.push(actionResult);\n            if (actionResult.values) {\n              accumulatedState = {\n                ...accumulatedState,\n                values: { ...accumulatedState.values, ...actionResult.values },\n                data: {\n                  ...accumulatedState.data || {},\n                  actionResults: [...accumulatedState.data?.actionResults || [], actionResult],\n                  actionPlan\n                }\n              };\n            }\n            if (actionResult && accumulatedState.data) {\n              if (!accumulatedState.data.workingMemory) accumulatedState.data.workingMemory = {};\n              const memoryKey = `action_${responseAction}_${(0,uuid__WEBPACK_IMPORTED_MODULE_14__[\"default\"])()}`;\n              const memoryEntry = {\n                actionName: action.name,\n                result: actionResult,\n                timestamp: Date.now()\n              };\n              accumulatedState.data.workingMemory[memoryKey] = memoryEntry;\n              const entries = Object.entries(accumulatedState.data.workingMemory);\n              if (entries.length > this.maxWorkingMemoryEntries) {\n                const sorted = entries.sort((a, b) => {\n                  const entryA = a[1];\n                  const entryB = b[1];\n                  const timestampA = entryA?.timestamp ?? 0;\n                  const timestampB = entryB?.timestamp ?? 0;\n                  return timestampB - timestampA;\n                });\n                accumulatedState.data.workingMemory = Object.fromEntries(\n                  sorted.slice(0, this.maxWorkingMemoryEntries)\n                );\n              }\n            }\n            if (actionPlan && actionPlan.steps[actionIndex]) {\n              actionPlan = this.updateActionStep(actionPlan, actionIndex, {\n                status: \"completed\",\n                result: actionResult\n              });\n            }\n          }\n          const actionMemory = {\n            id: actionId,\n            entityId: this.agentId,\n            roomId: message.roomId,\n            worldId: message.worldId,\n            content: {\n              text: actionResult?.text || `Executed action: ${action.name}`,\n              source: \"action\",\n              type: \"action_result\",\n              actionName: action.name,\n              actionStatus: actionResult?.success ? \"completed\" : \"failed\",\n              actionResult: isLegacyReturn ? { legacy: result } : actionResult,\n              runId,\n              ...actionPlan && {\n                planStep: `${actionPlan.currentStep}/${actionPlan.totalSteps}`,\n                planThought: actionPlan.thought\n              }\n            },\n            metadata: {\n              type: \"action_result\",\n              actionName: action.name,\n              runId,\n              actionId,\n              ...actionPlan && {\n                totalSteps: actionPlan.totalSteps,\n                currentStep: actionPlan.currentStep\n              }\n            }\n          };\n          await this.createMemory(actionMemory, \"messages\");\n          this.logger.debug(`Action ${action.name} completed`, {\n            isLegacyReturn,\n            result: isLegacyReturn ? result : void 0,\n            hasValues: actionResult ? !!actionResult.values : false,\n            hasData: actionResult ? !!actionResult.data : false,\n            hasText: actionResult ? !!actionResult.text : false\n          });\n          await this.adapter.log({\n            entityId: message.entityId,\n            roomId: message.roomId,\n            type: \"action\",\n            body: {\n              action: action.name,\n              actionId,\n              message: message.content.text,\n              messageId: message.id,\n              state: accumulatedState,\n              responses,\n              result: isLegacyReturn ? { legacy: result } : actionResult,\n              isLegacyReturn,\n              prompts: this.currentActionContext?.prompts || [],\n              promptCount: this.currentActionContext?.prompts.length || 0,\n              runId,\n              ...actionPlan && {\n                planStep: `${actionPlan.currentStep}/${actionPlan.totalSteps}`,\n                planThought: actionPlan.thought\n              }\n            }\n          });\n          this.currentActionContext = void 0;\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          this.logger.error(error);\n          if (actionPlan && actionPlan.steps[actionIndex]) {\n            actionPlan = this.updateActionStep(actionPlan, actionIndex, {\n              status: \"failed\",\n              error: errorMessage\n            });\n          }\n          this.currentActionContext = void 0;\n          const errorResult = {\n            success: false,\n            // Required field\n            data: {\n              actionName: action.name,\n              error: errorMessage,\n              errorObject: error\n            }\n          };\n          actionResults.push(errorResult);\n          const actionMemory = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(),\n            content: {\n              thought: errorMessage,\n              source: \"auto\",\n              type: \"action_result\",\n              actionName: action.name,\n              actionStatus: \"failed\",\n              error: errorMessage,\n              runId,\n              ...actionPlan && {\n                planStep: `${actionPlan.currentStep}/${actionPlan.totalSteps}`,\n                planThought: actionPlan.thought\n              }\n            },\n            entityId: this.agentId,\n            roomId: message.roomId,\n            worldId: message.worldId,\n            metadata: {\n              type: \"action_result\",\n              actionName: action.name,\n              runId,\n              error: true,\n              ...actionPlan && {\n                totalSteps: actionPlan.totalSteps,\n                currentStep: actionPlan.currentStep\n              }\n            }\n          };\n          await this.createMemory(actionMemory, \"messages\");\n          if (error?.critical || error?.code === \"CRITICAL_ERROR\") {\n            throw error;\n          }\n        }\n        actionIndex++;\n      }\n      if (message.id) {\n        this.stateCache.set(`${message.id}_action_results`, {\n          values: { actionResults },\n          data: { actionResults, actionPlan },\n          text: JSON.stringify(actionResults)\n        });\n      }\n    }\n  }\n  async evaluate(message, state, didRespond, callback, responses) {\n    const evaluatorPromises = this.evaluators.map(async (evaluator) => {\n      if (!evaluator.handler) {\n        return null;\n      }\n      if (!didRespond && !evaluator.alwaysRun) {\n        return null;\n      }\n      const result = await evaluator.validate(this, message, state);\n      if (result) {\n        return evaluator;\n      }\n      return null;\n    });\n    const evaluators = (await Promise.all(evaluatorPromises)).filter(Boolean);\n    if (evaluators.length === 0) {\n      return [];\n    }\n    state = await this.composeState(message, [\"RECENT_MESSAGES\", \"EVALUATORS\"]);\n    await Promise.all(\n      evaluators.map(async (evaluator) => {\n        if (evaluator.handler) {\n          await evaluator.handler(this, message, state, {}, callback, responses);\n          this.adapter.log({\n            entityId: message.entityId,\n            roomId: message.roomId,\n            type: \"evaluator\",\n            body: {\n              evaluator: evaluator.name,\n              messageId: message.id,\n              message: message.content.text,\n              state\n            }\n          });\n        }\n      })\n    );\n    return evaluators;\n  }\n  // highly SQL optimized queries\n  async ensureConnections(entities, rooms, source, world) {\n    if (!entities) {\n      console.trace();\n      this.logger.error(\"ensureConnections - no entities\");\n      return;\n    }\n    if (!rooms || rooms.length === 0) {\n      console.trace();\n      this.logger.error(\"ensureConnections - no rooms\");\n      return;\n    }\n    await this.ensureWorldExists({ ...world, agentId: this.agentId });\n    const firstRoom = rooms[0];\n    const chunkArray = (arr, size) => arr.reduce((chunks, item, i) => {\n      if (i % size === 0) chunks.push([]);\n      chunks[chunks.length - 1].push(item);\n      return chunks;\n    }, []);\n    const roomIds = rooms.map((r2) => r2.id);\n    const roomExistsCheck = await this.getRoomsByIds(roomIds);\n    const roomsIdExists = roomExistsCheck.map((r2) => r2.id);\n    const roomsToCreate = roomIds.filter((id) => !roomsIdExists.includes(id));\n    const rf = {\n      worldId: world.id,\n      serverId: world.serverId,\n      source,\n      agentId: this.agentId\n    };\n    if (roomsToCreate.length) {\n      this.logger.debug(\n        \"runtime/ensureConnections - create\",\n        roomsToCreate.length.toLocaleString(),\n        \"rooms\"\n      );\n      const roomObjsToCreate = rooms.filter((r2) => roomsToCreate.includes(r2.id)).map((r2) => ({ ...r2, ...rf }));\n      await this.createRooms(roomObjsToCreate);\n    }\n    const entityIds = entities.map((e) => e.id);\n    const entityExistsCheck = await this.adapter.getEntitiesByIds(entityIds);\n    const entitiesToUpdate = entityExistsCheck.map((e) => e.id);\n    const entitiesToCreate = entities.filter((e) => !entitiesToUpdate.includes(e.id));\n    const r = {\n      roomId: firstRoom.id,\n      channelId: firstRoom.channelId,\n      type: firstRoom.type\n    };\n    const wf = {\n      worldId: world.id,\n      serverId: world.serverId\n    };\n    if (entitiesToCreate.length) {\n      this.logger.debug(\n        \"runtime/ensureConnections - creating\",\n        entitiesToCreate.length.toLocaleString(),\n        \"entities...\"\n      );\n      const ef = {\n        ...r,\n        ...wf,\n        source,\n        agentId: this.agentId\n      };\n      const entitiesToCreateWFields = entitiesToCreate.map((e) => ({ ...e, ...ef }));\n      const batches = chunkArray(entitiesToCreateWFields, 5e3);\n      for (const batch of batches) {\n        await this.createEntities(batch);\n      }\n    }\n    await this.ensureParticipantInRoom(this.agentId, firstRoom.id);\n    const entityIdsInFirstRoom = await this.getParticipantsForRoom(firstRoom.id);\n    const entityIdsInFirstRoomFiltered = entityIdsInFirstRoom.filter(Boolean);\n    const missingIdsInRoom = entityIds.filter((id) => !entityIdsInFirstRoomFiltered.includes(id));\n    if (missingIdsInRoom.length) {\n      this.logger.debug(\n        \"runtime/ensureConnections - Missing\",\n        missingIdsInRoom.length.toLocaleString(),\n        \"connections in\",\n        firstRoom.id\n      );\n      await this.addParticipantsRoom(missingIdsInRoom, firstRoom.id);\n    }\n    this.logger.success(`Success: Successfully connected world`);\n  }\n  async ensureConnection({\n    entityId,\n    roomId,\n    worldId,\n    worldName,\n    userName,\n    name,\n    source,\n    type,\n    channelId,\n    serverId,\n    userId,\n    metadata\n  }) {\n    if (!worldId && serverId) {\n      worldId = createUniqueUuid(this.agentId + serverId, serverId);\n    }\n    const names3 = [name, userName].filter(Boolean);\n    const entityMetadata = {\n      [source]: {\n        id: userId,\n        name,\n        userName\n      }\n    };\n    try {\n      const entity = await this.getEntityById(entityId);\n      if (!entity) {\n        try {\n          const success = await this.createEntity({\n            id: entityId,\n            names: names3,\n            metadata: entityMetadata,\n            agentId: this.agentId\n          });\n          if (success) {\n            this.logger.debug(\n              `Created new entity ${entityId} for user ${name || userName || \"unknown\"}`\n            );\n          } else {\n            throw new Error(`Failed to create entity ${entityId}`);\n          }\n        } catch (error) {\n          if (error.message?.includes(\"duplicate key\") || error.code === \"23505\") {\n            this.logger.debug(\n              `Entity ${entityId} exists in database but not for this agent. This is normal in multi-agent setups.`\n            );\n          } else {\n            throw error;\n          }\n        }\n      } else {\n        await this.adapter.updateEntity({\n          id: entityId,\n          names: [.../* @__PURE__ */ new Set([...entity.names || [], ...names3])].filter(Boolean),\n          metadata: {\n            ...entity.metadata,\n            [source]: {\n              ...entity.metadata?.[source],\n              id: userId,\n              name,\n              userName\n            }\n          },\n          agentId: this.agentId\n        });\n      }\n      await this.ensureWorldExists({\n        id: worldId,\n        name: worldName || serverId ? `World for server ${serverId}` : `World for room ${roomId}`,\n        agentId: this.agentId,\n        serverId: serverId || \"default\",\n        metadata\n      });\n      await this.ensureRoomExists({\n        id: roomId,\n        name,\n        source,\n        type,\n        channelId,\n        serverId,\n        worldId\n      });\n      try {\n        await this.ensureParticipantInRoom(entityId, roomId);\n      } catch (error) {\n        if (error.message?.includes(\"not found\")) {\n          const added = await this.addParticipant(entityId, roomId);\n          if (!added) {\n            throw new Error(`Failed to add participant ${entityId} to room ${roomId}`);\n          }\n          this.logger.debug(`Added participant ${entityId} to room ${roomId} directly`);\n        } else {\n          throw error;\n        }\n      }\n      await this.ensureParticipantInRoom(this.agentId, roomId);\n      this.logger.debug(`Success: Successfully connected entity ${entityId} in room ${roomId}`);\n    } catch (error) {\n      this.logger.error(\n        `Failed to ensure connection: ${error instanceof Error ? error.message : String(error)}`\n      );\n      throw error;\n    }\n  }\n  async ensureParticipantInRoom(entityId, roomId) {\n    const entity = await this.getEntityById(entityId);\n    if (!entity && entityId !== this.agentId) {\n      this.logger.warn(\n        `Entity ${entityId} not directly accessible to agent ${this.agentId}. Will attempt to add as participant anyway.`\n      );\n    } else if (!entity && entityId === this.agentId) {\n      throw new Error(`Agent entity ${entityId} not found, cannot add as participant.`);\n    } else if (!entity) {\n      throw new Error(`User entity ${entityId} not found, cannot add as participant.`);\n    }\n    const participants = await this.adapter.getParticipantsForRoom(roomId);\n    if (!participants.includes(entityId)) {\n      const added = await this.addParticipant(entityId, roomId);\n      if (!added) {\n        throw new Error(`Failed to add participant ${entityId} to room ${roomId}`);\n      }\n      if (entityId === this.agentId) {\n        this.logger.debug(`Agent ${this.character.name} linked to room ${roomId} successfully.`);\n      } else {\n        this.logger.debug(`User ${entityId} linked to room ${roomId} successfully.`);\n      }\n    }\n  }\n  async removeParticipant(entityId, roomId) {\n    return await this.adapter.removeParticipant(entityId, roomId);\n  }\n  async getParticipantsForEntity(entityId) {\n    return await this.adapter.getParticipantsForEntity(entityId);\n  }\n  async getParticipantsForRoom(roomId) {\n    return await this.adapter.getParticipantsForRoom(roomId);\n  }\n  async addParticipant(entityId, roomId) {\n    return await this.adapter.addParticipantsRoom([entityId], roomId);\n  }\n  async addParticipantsRoom(entityIds, roomId) {\n    return await this.adapter.addParticipantsRoom(entityIds, roomId);\n  }\n  /**\n   * Ensure the existence of a world.\n   */\n  async ensureWorldExists({ id, name, serverId, metadata }) {\n    const world = await this.getWorld(id);\n    if (!world) {\n      this.logger.debug(\"Creating world:\", {\n        id,\n        name,\n        serverId,\n        agentId: this.agentId\n      });\n      await this.adapter.createWorld({\n        id,\n        name,\n        agentId: this.agentId,\n        serverId: serverId || \"default\",\n        metadata\n      });\n      this.logger.debug(`World ${id} created successfully.`);\n    }\n  }\n  async ensureRoomExists({ id, name, source, type, channelId, serverId, worldId, metadata }) {\n    if (!worldId) throw new Error(\"worldId is required\");\n    const room = await this.getRoom(id);\n    if (!room) {\n      await this.createRoom({\n        id,\n        name,\n        agentId: this.agentId,\n        source,\n        type,\n        channelId,\n        serverId,\n        worldId,\n        metadata\n      });\n      this.logger.debug(`Room ${id} created successfully.`);\n    }\n  }\n  async composeState(message, includeList = null, onlyInclude = false, skipCache = false) {\n    const filterList = onlyInclude ? includeList : null;\n    const emptyObj = {\n      values: {},\n      data: {},\n      text: \"\"\n    };\n    const cachedState = skipCache ? emptyObj : await this.stateCache.get(message.id) || emptyObj;\n    const providerNames = /* @__PURE__ */ new Set();\n    if (filterList && filterList.length > 0) {\n      filterList.forEach((name) => providerNames.add(name));\n    } else {\n      this.providers.filter((p) => !p.private && !p.dynamic).forEach((p) => providerNames.add(p.name));\n    }\n    if (!filterList && includeList && includeList.length > 0) {\n      includeList.forEach((name) => providerNames.add(name));\n    }\n    const providersToGet = Array.from(\n      new Set(this.providers.filter((p) => providerNames.has(p.name)))\n    ).sort((a, b) => (a.position || 0) - (b.position || 0));\n    const providerData = await Promise.all(\n      providersToGet.map(async (provider) => {\n        const start = Date.now();\n        try {\n          const result = await provider.get(this, message, cachedState);\n          const duration = Date.now() - start;\n          this.logger.debug(`${provider.name} Provider took ${duration}ms to respond`);\n          return {\n            ...result,\n            providerName: provider.name\n          };\n        } catch (error) {\n          console.error(\"provider error\", provider.name, error);\n          return { values: {}, text: \"\", data: {}, providerName: provider.name };\n        }\n      })\n    );\n    const currentProviderResults = { ...cachedState.data?.providers || {} };\n    for (const freshResult of providerData) {\n      currentProviderResults[freshResult.providerName] = freshResult;\n    }\n    const orderedTexts = [];\n    for (const provider of providersToGet) {\n      const result = currentProviderResults[provider.name];\n      if (result && result.text && result.text.trim() !== \"\") {\n        orderedTexts.push(result.text);\n      }\n    }\n    const providersText = orderedTexts.join(\"\\n\");\n    const aggregatedStateValues = { ...cachedState.values || {} };\n    for (const provider of providersToGet) {\n      const providerResult = currentProviderResults[provider.name];\n      if (providerResult && providerResult.values && typeof providerResult.values === \"object\") {\n        Object.assign(aggregatedStateValues, providerResult.values);\n      }\n    }\n    for (const providerName in currentProviderResults) {\n      if (!providersToGet.some((p) => p.name === providerName)) {\n        const providerResult = currentProviderResults[providerName];\n        if (providerResult && providerResult.values && typeof providerResult.values === \"object\") {\n          Object.assign(aggregatedStateValues, providerResult.values);\n        }\n      }\n    }\n    const newState = {\n      values: {\n        ...aggregatedStateValues,\n        providers: providersText\n      },\n      data: {\n        ...cachedState.data || {},\n        providers: currentProviderResults\n      },\n      text: providersText\n    };\n    this.stateCache.set(message.id, newState);\n    return newState;\n  }\n  getService(serviceName) {\n    const serviceInstances = this.services.get(serviceName);\n    if (!serviceInstances || serviceInstances.length === 0) {\n      this.logger.debug(`Service ${serviceName} not found`);\n      return null;\n    }\n    return serviceInstances[0];\n  }\n  /**\n   * Type-safe service getter that ensures the correct service type is returned\n   * @template T - The expected service class type\n   * @param serviceName - The service type name\n   * @returns The service instance with proper typing, or null if not found\n   */\n  getTypedService(serviceName) {\n    return this.getService(serviceName);\n  }\n  /**\n   * Get all services of a specific type\n   * @template T - The expected service class type\n   * @param serviceName - The service type name\n   * @returns Array of service instances with proper typing\n   */\n  getServicesByType(serviceName) {\n    const serviceInstances = this.services.get(serviceName);\n    if (!serviceInstances || serviceInstances.length === 0) {\n      this.logger.debug(`No services found for type ${serviceName}`);\n      return [];\n    }\n    return serviceInstances;\n  }\n  /**\n   * Get all registered service types\n   * @returns Array of registered service type names\n   */\n  getRegisteredServiceTypes() {\n    return Array.from(this.services.keys());\n  }\n  /**\n   * Check if a service type is registered\n   * @param serviceType - The service type to check\n   * @returns true if the service is registered\n   */\n  hasService(serviceType) {\n    const serviceInstances = this.services.get(serviceType);\n    return serviceInstances !== void 0 && serviceInstances.length > 0;\n  }\n  async registerService(serviceDef) {\n    const serviceType = serviceDef.serviceType;\n    if (!serviceType) {\n      this.logger.warn(\n        `Service ${serviceDef.name} is missing serviceType. Please define a static serviceType property.`\n      );\n      return;\n    }\n    this.logger.debug(\n      `${this.character.name}(${this.agentId}) - Registering service:`,\n      serviceType\n    );\n    try {\n      const serviceInstance = await serviceDef.start(this);\n      if (!this.services.has(serviceType)) {\n        this.services.set(serviceType, []);\n      }\n      if (!this.serviceTypes.has(serviceType)) {\n        this.serviceTypes.set(serviceType, []);\n      }\n      this.services.get(serviceType).push(serviceInstance);\n      this.serviceTypes.get(serviceType).push(serviceDef);\n      if (typeof serviceDef.registerSendHandlers === \"function\") {\n        serviceDef.registerSendHandlers(this, serviceInstance);\n      }\n      this.logger.debug(\n        `${this.character.name}(${this.agentId}) - Service ${serviceType} registered successfully`\n      );\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger.error(\n        `${this.character.name}(${this.agentId}) - Failed to register service ${serviceType}: ${errorMessage}`\n      );\n      throw error;\n    }\n  }\n  registerModel(modelType, handler, provider, priority) {\n    const modelKey = typeof modelType === \"string\" ? modelType : ModelType2[modelType];\n    if (!this.models.has(modelKey)) {\n      this.models.set(modelKey, []);\n    }\n    const registrationOrder = Date.now();\n    this.models.get(modelKey)?.push({\n      handler,\n      provider,\n      priority: priority || 0,\n      registrationOrder\n    });\n    this.models.get(modelKey)?.sort((a, b) => {\n      if ((b.priority || 0) !== (a.priority || 0)) {\n        return (b.priority || 0) - (a.priority || 0);\n      }\n      return a.registrationOrder - b.registrationOrder;\n    });\n  }\n  getModel(modelType, provider) {\n    const modelKey = typeof modelType === \"string\" ? modelType : ModelType2[modelType];\n    const models = this.models.get(modelKey);\n    if (!models?.length) {\n      return void 0;\n    }\n    if (provider) {\n      const modelWithProvider = models.find((m) => m.provider === provider);\n      if (modelWithProvider) {\n        this.logger.debug(\n          `[AgentRuntime][${this.character.name}] Using model ${modelKey} from provider ${provider}`\n        );\n        return modelWithProvider.handler;\n      } else {\n        this.logger.warn(\n          `[AgentRuntime][${this.character.name}] No model found for provider ${provider}`\n        );\n      }\n    }\n    this.logger.debug(\n      `[AgentRuntime][${this.character.name}] Using model ${modelKey} from provider ${models[0].provider}`\n    );\n    return models[0].handler;\n  }\n  async useModel(modelType, params, provider) {\n    const modelKey = typeof modelType === \"string\" ? modelType : ModelType2[modelType];\n    const promptContent = params?.prompt || params?.input || (Array.isArray(params?.messages) ? JSON.stringify(params.messages) : null);\n    const model = this.getModel(modelKey, provider);\n    if (!model) {\n      const errorMsg = `No handler found for delegate type: ${modelKey}`;\n      throw new Error(errorMsg);\n    }\n    this.logger.debug(\n      `[useModel] ${modelKey} input: ` + JSON.stringify(params, safeReplacer(), 2).replace(/\\\\n/g, \"\\n\")\n    );\n    let paramsWithRuntime;\n    if (params === null || params === void 0 || typeof params !== \"object\" || Array.isArray(params) || typeof Buffer !== \"undefined\" && Buffer.isBuffer(params)) {\n      paramsWithRuntime = params;\n    } else {\n      paramsWithRuntime = {\n        ...params,\n        runtime: this\n      };\n    }\n    const startTime = performance.now();\n    try {\n      const response = await model(this, paramsWithRuntime);\n      const elapsedTime = performance.now() - startTime;\n      this.logger.debug(\n        `[useModel] ${modelKey} output (took ${Number(elapsedTime.toFixed(2)).toLocaleString()}ms):`,\n        Array.isArray(response) ? `${JSON.stringify(response.slice(0, 5))}...${JSON.stringify(response.slice(-5))} (${response.length} items)` : JSON.stringify(response, safeReplacer(), 2).replace(/\\\\n/g, \"\\n\")\n      );\n      if (modelKey !== ModelType2.TEXT_EMBEDDING && promptContent) {\n        if (this.currentActionContext) {\n          this.currentActionContext.prompts.push({\n            modelType: modelKey,\n            prompt: promptContent,\n            timestamp: Date.now()\n          });\n        }\n      }\n      this.adapter.log({\n        entityId: this.agentId,\n        roomId: this.agentId,\n        body: {\n          modelType,\n          modelKey,\n          params: {\n            ...typeof params === \"object\" && !Array.isArray(params) && params ? params : {},\n            prompt: promptContent\n          },\n          prompt: promptContent,\n          runId: this.getCurrentRunId(),\n          timestamp: Date.now(),\n          executionTime: elapsedTime,\n          provider: provider || this.models.get(modelKey)?.[0]?.provider || \"unknown\",\n          actionContext: this.currentActionContext ? {\n            actionName: this.currentActionContext.actionName,\n            actionId: this.currentActionContext.actionId\n          } : void 0,\n          response: Array.isArray(response) && response.every((x) => typeof x === \"number\") ? \"[array]\" : response\n        },\n        type: `useModel:${modelKey}`\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n  registerEvent(event, handler) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)?.push(handler);\n  }\n  getEvent(event) {\n    return this.events.get(event);\n  }\n  async emitEvent(event, params) {\n    const events = Array.isArray(event) ? event : [event];\n    for (const eventName of events) {\n      const eventHandlers = this.events.get(eventName);\n      if (!eventHandlers) {\n        continue;\n      }\n      try {\n        await Promise.all(eventHandlers.map((handler) => handler(params)));\n      } catch (error) {\n        this.logger.error(`Error during emitEvent for ${eventName} (handler execution):`, error);\n      }\n    }\n  }\n  async ensureEmbeddingDimension() {\n    this.logger.debug(`[AgentRuntime][${this.character.name}] Starting ensureEmbeddingDimension`);\n    if (!this.adapter) {\n      throw new Error(\n        `[AgentRuntime][${this.character.name}] Database adapter not initialized before ensureEmbeddingDimension`\n      );\n    }\n    try {\n      const model = this.getModel(ModelType2.TEXT_EMBEDDING);\n      if (!model) {\n        throw new Error(\n          `[AgentRuntime][${this.character.name}] No TEXT_EMBEDDING model registered`\n        );\n      }\n      this.logger.debug(`[AgentRuntime][${this.character.name}] Getting embedding dimensions`);\n      const embedding = await this.useModel(ModelType2.TEXT_EMBEDDING, null);\n      if (!embedding || !embedding.length) {\n        throw new Error(`[AgentRuntime][${this.character.name}] Invalid embedding received`);\n      }\n      this.logger.debug(\n        `[AgentRuntime][${this.character.name}] Setting embedding dimension: ${embedding.length}`\n      );\n      await this.adapter.ensureEmbeddingDimension(embedding.length);\n      this.logger.debug(\n        `[AgentRuntime][${this.character.name}] Successfully set embedding dimension`\n      );\n    } catch (error) {\n      this.logger.debug(\n        `[AgentRuntime][${this.character.name}] Error in ensureEmbeddingDimension:`,\n        error\n      );\n      throw error;\n    }\n  }\n  registerTaskWorker(taskHandler) {\n    if (this.taskWorkers.has(taskHandler.name)) {\n      this.logger.warn(\n        `Task definition ${taskHandler.name} already registered. Will be overwritten.`\n      );\n    }\n    this.taskWorkers.set(taskHandler.name, taskHandler);\n  }\n  getTaskWorker(name) {\n    return this.taskWorkers.get(name);\n  }\n  get db() {\n    return this.adapter.db;\n  }\n  async init() {\n    await this.adapter.init();\n  }\n  async close() {\n    await this.adapter.close();\n  }\n  async getAgent(agentId) {\n    return await this.adapter.getAgent(agentId);\n  }\n  async getAgents() {\n    return await this.adapter.getAgents();\n  }\n  async createAgent(agent) {\n    return await this.adapter.createAgent(agent);\n  }\n  async updateAgent(agentId, agent) {\n    return await this.adapter.updateAgent(agentId, agent);\n  }\n  async deleteAgent(agentId) {\n    return await this.adapter.deleteAgent(agentId);\n  }\n  async ensureAgentExists(agent) {\n    if (!agent.name) {\n      throw new Error(\"Agent name is required\");\n    }\n    const agents = await this.adapter.getAgents();\n    const existingAgentId = agents.find((a) => a.name === agent.name)?.id;\n    if (existingAgentId) {\n      const updatedAgent = {\n        ...agent,\n        id: existingAgentId,\n        updatedAt: Date.now()\n      };\n      await this.adapter.updateAgent(existingAgentId, updatedAgent);\n      const existingAgent = await this.adapter.getAgent(existingAgentId);\n      if (!existingAgent) {\n        throw new Error(`Failed to retrieve agent after update: ${existingAgentId}`);\n      }\n      this.logger.debug(`Updated existing agent ${agent.name} on restart`);\n      return existingAgent;\n    }\n    const newAgent = {\n      ...agent,\n      id: stringToUuid(agent.name)\n    };\n    const created = await this.adapter.createAgent(newAgent);\n    if (!created) {\n      throw new Error(`Failed to create agent: ${agent.name}`);\n    }\n    this.logger.debug(`Created new agent ${agent.name}`);\n    return newAgent;\n  }\n  async getEntityById(entityId) {\n    const entities = await this.adapter.getEntitiesByIds([entityId]);\n    if (!entities?.length) return null;\n    return entities[0];\n  }\n  async getEntitiesByIds(entityIds) {\n    return await this.adapter.getEntitiesByIds(entityIds);\n  }\n  async getEntitiesForRoom(roomId, includeComponents) {\n    return await this.adapter.getEntitiesForRoom(roomId, includeComponents);\n  }\n  async createEntity(entity) {\n    if (!entity.agentId) {\n      entity.agentId = this.agentId;\n    }\n    return await this.createEntities([entity]);\n  }\n  async createEntities(entities) {\n    entities.forEach((e) => {\n      e.agentId = this.agentId;\n    });\n    return await this.adapter.createEntities(entities);\n  }\n  async updateEntity(entity) {\n    await this.adapter.updateEntity(entity);\n  }\n  async getComponent(entityId, type, worldId, sourceEntityId) {\n    return await this.adapter.getComponent(entityId, type, worldId, sourceEntityId);\n  }\n  async getComponents(entityId, worldId, sourceEntityId) {\n    return await this.adapter.getComponents(entityId, worldId, sourceEntityId);\n  }\n  async createComponent(component) {\n    return await this.adapter.createComponent(component);\n  }\n  async updateComponent(component) {\n    await this.adapter.updateComponent(component);\n  }\n  async deleteComponent(componentId) {\n    await this.adapter.deleteComponent(componentId);\n  }\n  async addEmbeddingToMemory(memory) {\n    if (memory.embedding) {\n      return memory;\n    }\n    const memoryText = memory.content.text;\n    if (!memoryText) {\n      throw new Error(\"Cannot generate embedding: Memory content is empty\");\n    }\n    try {\n      memory.embedding = await this.useModel(ModelType2.TEXT_EMBEDDING, {\n        text: memoryText\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to generate embedding:\", error);\n      memory.embedding = await this.useModel(ModelType2.TEXT_EMBEDDING, null);\n    }\n    return memory;\n  }\n  async getMemories(params) {\n    return await this.adapter.getMemories(params);\n  }\n  async getAllMemories() {\n    const tables = [\"memories\", \"messages\", \"facts\", \"documents\"];\n    const allMemories = [];\n    for (const tableName of tables) {\n      try {\n        const memories = await this.adapter.getMemories({\n          agentId: this.agentId,\n          tableName,\n          count: 1e4\n          // Get a large number to fetch all\n        });\n        allMemories.push(...memories);\n      } catch (error) {\n        this.logger.debug(`Failed to get memories from table ${tableName}:`, error);\n      }\n    }\n    return allMemories;\n  }\n  async getMemoryById(id) {\n    return await this.adapter.getMemoryById(id);\n  }\n  async getMemoriesByIds(ids, tableName) {\n    return await this.adapter.getMemoriesByIds(ids, tableName);\n  }\n  async getMemoriesByRoomIds(params) {\n    return await this.adapter.getMemoriesByRoomIds(params);\n  }\n  async getCachedEmbeddings(params) {\n    return await this.adapter.getCachedEmbeddings(params);\n  }\n  async log(params) {\n    await this.adapter.log(params);\n  }\n  async searchMemories(params) {\n    const memories = await this.adapter.searchMemories(params);\n    if (params.query) {\n      const rerankedMemories = await this.rerankMemories(params.query, memories);\n      return rerankedMemories;\n    }\n    return memories;\n  }\n  async rerankMemories(query, memories) {\n    const docs = memories.map((memory) => ({\n      title: memory.id,\n      content: memory.content.text\n    }));\n    const bm25 = new BM25(docs);\n    const results = bm25.search(query, memories.length);\n    return results.map((result) => memories[result.index]);\n  }\n  async createMemory(memory, tableName, unique) {\n    return await this.adapter.createMemory(memory, tableName, unique);\n  }\n  async updateMemory(memory) {\n    return await this.adapter.updateMemory(memory);\n  }\n  async deleteMemory(memoryId) {\n    await this.adapter.deleteMemory(memoryId);\n  }\n  async deleteManyMemories(memoryIds) {\n    await this.adapter.deleteManyMemories(memoryIds);\n  }\n  async clearAllAgentMemories() {\n    this.logger.info(`Clearing all memories for agent ${this.character.name} (${this.agentId})`);\n    const allMemories = await this.getAllMemories();\n    const memoryIds = allMemories.map((memory) => memory.id);\n    if (memoryIds.length === 0) {\n      this.logger.info(\"No memories found to delete\");\n      return;\n    }\n    this.logger.info(`Found ${memoryIds.length} memories to delete`);\n    await this.adapter.deleteManyMemories(memoryIds);\n    this.logger.info(`Successfully cleared all ${memoryIds.length} memories for agent`);\n  }\n  async deleteAllMemories(roomId, tableName) {\n    await this.adapter.deleteAllMemories(roomId, tableName);\n  }\n  async countMemories(roomId, unique, tableName) {\n    return await this.adapter.countMemories(roomId, unique, tableName);\n  }\n  async getLogs(params) {\n    return await this.adapter.getLogs(params);\n  }\n  async deleteLog(logId) {\n    await this.adapter.deleteLog(logId);\n  }\n  async createWorld(world) {\n    return await this.adapter.createWorld(world);\n  }\n  async getWorld(id) {\n    return await this.adapter.getWorld(id);\n  }\n  async removeWorld(worldId) {\n    await this.adapter.removeWorld(worldId);\n  }\n  async getAllWorlds() {\n    return await this.adapter.getAllWorlds();\n  }\n  async updateWorld(world) {\n    await this.adapter.updateWorld(world);\n  }\n  async getRoom(roomId) {\n    const rooms = await this.adapter.getRoomsByIds([roomId]);\n    if (!rooms?.length) return null;\n    return rooms[0];\n  }\n  async getRoomsByIds(roomIds) {\n    return await this.adapter.getRoomsByIds(roomIds);\n  }\n  async createRoom({ id, name, source, type, channelId, serverId, worldId }) {\n    if (!worldId) throw new Error(\"worldId is required\");\n    const res = await this.adapter.createRooms([\n      {\n        id,\n        name,\n        source,\n        type,\n        channelId,\n        serverId,\n        worldId\n      }\n    ]);\n    if (!res.length) return null;\n    return res[0];\n  }\n  async createRooms(rooms) {\n    return await this.adapter.createRooms(rooms);\n  }\n  async deleteRoom(roomId) {\n    await this.adapter.deleteRoom(roomId);\n  }\n  async deleteRoomsByWorldId(worldId) {\n    await this.adapter.deleteRoomsByWorldId(worldId);\n  }\n  async updateRoom(room) {\n    await this.adapter.updateRoom(room);\n  }\n  async getRoomsForParticipant(entityId) {\n    return await this.adapter.getRoomsForParticipant(entityId);\n  }\n  async getRoomsForParticipants(userIds) {\n    return await this.adapter.getRoomsForParticipants(userIds);\n  }\n  // deprecate this one\n  async getRooms(worldId) {\n    return await this.adapter.getRoomsByWorld(worldId);\n  }\n  async getRoomsByWorld(worldId) {\n    return await this.adapter.getRoomsByWorld(worldId);\n  }\n  async getParticipantUserState(roomId, entityId) {\n    return await this.adapter.getParticipantUserState(roomId, entityId);\n  }\n  async setParticipantUserState(roomId, entityId, state) {\n    await this.adapter.setParticipantUserState(roomId, entityId, state);\n  }\n  async createRelationship(params) {\n    return await this.adapter.createRelationship(params);\n  }\n  async updateRelationship(relationship) {\n    await this.adapter.updateRelationship(relationship);\n  }\n  async getRelationship(params) {\n    return await this.adapter.getRelationship(params);\n  }\n  async getRelationships(params) {\n    return await this.adapter.getRelationships(params);\n  }\n  async getCache(key) {\n    return await this.adapter.getCache(key);\n  }\n  async setCache(key, value) {\n    return await this.adapter.setCache(key, value);\n  }\n  async deleteCache(key) {\n    return await this.adapter.deleteCache(key);\n  }\n  async createTask(task) {\n    return await this.adapter.createTask(task);\n  }\n  async getTasks(params) {\n    return await this.adapter.getTasks(params);\n  }\n  async getTask(id) {\n    return await this.adapter.getTask(id);\n  }\n  async getTasksByName(name) {\n    return await this.adapter.getTasksByName(name);\n  }\n  async updateTask(id, task) {\n    await this.adapter.updateTask(id, task);\n  }\n  async deleteTask(id) {\n    await this.adapter.deleteTask(id);\n  }\n  on(event, callback) {\n    if (!this.eventHandlers.has(event)) {\n      this.eventHandlers.set(event, []);\n    }\n    this.eventHandlers.get(event)?.push(callback);\n  }\n  off(event, callback) {\n    if (!this.eventHandlers.has(event)) {\n      return;\n    }\n    const handlers = this.eventHandlers.get(event);\n    const index = handlers.indexOf(callback);\n    if (index !== -1) {\n      handlers.splice(index, 1);\n    }\n  }\n  emit(event, data) {\n    if (!this.eventHandlers.has(event)) {\n      return;\n    }\n    for (const handler of this.eventHandlers.get(event)) {\n      handler(data);\n    }\n  }\n  async sendControlMessage(params) {\n    try {\n      const { roomId, action, target } = params;\n      const controlMessage = {\n        type: \"control\",\n        payload: {\n          action,\n          target\n        },\n        roomId\n      };\n      await this.emitEvent(\"CONTROL_MESSAGE\", {\n        runtime: this,\n        message: controlMessage,\n        source: \"agent\"\n      });\n      this.logger.debug(`Sent control message: ${action} to room ${roomId}`);\n    } catch (error) {\n      this.logger.error(`Error sending control message: ${error}`);\n    }\n  }\n  registerSendHandler(source, handler) {\n    if (this.sendHandlers.has(source)) {\n      this.logger.warn(`Send handler for source '${source}' already registered. Overwriting.`);\n    }\n    this.sendHandlers.set(source, handler);\n    this.logger.info(`Registered send handler for source: ${source}`);\n  }\n  async sendMessageToTarget(target, content) {\n    const handler = this.sendHandlers.get(target.source);\n    if (!handler) {\n      const errorMsg = `No send handler registered for source: ${target.source}`;\n      this.logger.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n    try {\n      await handler(this, target, content);\n    } catch (error) {\n      this.logger.error(`Error executing send handler for source ${target.source}:`, error);\n      throw error;\n    }\n  }\n  async getMemoriesByWorldId(params) {\n    return await this.adapter.getMemoriesByWorldId(params);\n  }\n  async runMigrations(migrationsPaths) {\n    if (this.adapter && \"runMigrations\" in this.adapter) {\n      await this.adapter.runMigrations(migrationsPaths);\n    } else {\n      this.logger.warn(\"Database adapter does not support migrations.\");\n    }\n  }\n  async isReady() {\n    if (!this.adapter) {\n      throw new Error(\"Database adapter not registered\");\n    }\n    return await this.adapter.isReady();\n  }\n};\n\n// src/settings.ts\n\nfunction createSettingFromConfig(configSetting) {\n  return {\n    name: configSetting.name,\n    description: configSetting.description,\n    usageDescription: configSetting.usageDescription || \"\",\n    value: null,\n    required: configSetting.required,\n    validation: configSetting.validation || null,\n    public: configSetting.public || false,\n    secret: configSetting.secret || false,\n    dependsOn: configSetting.dependsOn || [],\n    onSetAction: configSetting.onSetAction || null,\n    visibleIf: configSetting.visibleIf || null\n  };\n}\nfunction getSalt() {\n  const secretSalt = (typeof process !== \"undefined\" ? process.env.SECRET_SALT : /* unsupported import.meta.env.SECRET_SALT */ undefined.SECRET_SALT) || \"secretsalt\";\n  if (!secretSalt) {\n    logger.error(\"SECRET_SALT is not set\");\n  }\n  const salt = secretSalt;\n  logger.debug(`Generated salt with length: ${salt.length} (truncated for security)`);\n  return salt;\n}\nfunction encryptStringValue(value, salt) {\n  if (value === void 0 || value === null) {\n    logger.debug(\"Attempted to encrypt undefined or null value\");\n    return value;\n  }\n  if (typeof value === \"boolean\" || typeof value === \"number\") {\n    logger.debug(\"Value is a boolean or number, returning as is\");\n    return value;\n  }\n  if (typeof value !== \"string\") {\n    logger.debug(`Value is not a string (type: ${typeof value}), returning as is`);\n    return value;\n  }\n  const parts = value.split(\":\");\n  if (parts.length === 2) {\n    try {\n      const possibleIv = Buffer.from(parts[0], \"hex\");\n      if (possibleIv.length === 16) {\n        logger.debug(\"Value appears to be already encrypted, skipping re-encryption\");\n        return value;\n      }\n    } catch (e) {\n    }\n  }\n  const key = crypto_browserify__WEBPACK_IMPORTED_MODULE_15__.createHash(\"sha256\").update(salt).digest().slice(0, 32);\n  const iv = crypto_browserify__WEBPACK_IMPORTED_MODULE_15__.randomBytes(16);\n  const cipher = crypto_browserify__WEBPACK_IMPORTED_MODULE_15__.createCipheriv(\"aes-256-cbc\", key, iv);\n  let encrypted = cipher.update(value, \"utf8\", \"hex\");\n  encrypted += cipher.final(\"hex\");\n  return `${iv.toString(\"hex\")}:${encrypted}`;\n}\nfunction decryptStringValue(value, salt) {\n  try {\n    if (value === void 0 || value === null) {\n      return value;\n    }\n    if (typeof value === \"boolean\" || typeof value === \"number\") {\n      return value;\n    }\n    if (typeof value !== \"string\") {\n      logger.debug(`Value is not a string (type: ${typeof value}), returning as is`);\n      return value;\n    }\n    const parts = value.split(\":\");\n    if (parts.length !== 2) {\n      return value;\n    }\n    const iv = Buffer.from(parts[0], \"hex\");\n    const encrypted = parts[1];\n    if (iv.length !== 16) {\n      if (iv.length) {\n        logger.debug(`Invalid IV length (${iv.length}) - expected 16 bytes`);\n      }\n      return value;\n    }\n    const key = crypto_browserify__WEBPACK_IMPORTED_MODULE_15__.createHash(\"sha256\").update(salt).digest().slice(0, 32);\n    const decipher = crypto_browserify__WEBPACK_IMPORTED_MODULE_15__.createDecipheriv(\"aes-256-cbc\", key, iv);\n    let decrypted = decipher.update(encrypted, \"hex\", \"utf8\");\n    decrypted += decipher.final(\"utf8\");\n    return decrypted;\n  } catch (error) {\n    logger.error(`Error decrypting value: ${error}`);\n    return value;\n  }\n}\nfunction saltSettingValue(setting, salt) {\n  const settingCopy = { ...setting };\n  if (setting.secret === true && typeof setting.value === \"string\" && setting.value) {\n    settingCopy.value = encryptStringValue(setting.value, salt);\n  }\n  return settingCopy;\n}\nfunction unsaltSettingValue(setting, salt) {\n  const settingCopy = { ...setting };\n  if (setting.secret === true && typeof setting.value === \"string\" && setting.value) {\n    settingCopy.value = decryptStringValue(setting.value, salt);\n  }\n  return settingCopy;\n}\nfunction saltWorldSettings(worldSettings, salt) {\n  const saltedSettings = {};\n  for (const [key, setting] of Object.entries(worldSettings)) {\n    saltedSettings[key] = saltSettingValue(setting, salt);\n  }\n  return saltedSettings;\n}\nfunction unsaltWorldSettings(worldSettings, salt) {\n  const unsaltedSettings = {};\n  for (const [key, setting] of Object.entries(worldSettings)) {\n    unsaltedSettings[key] = unsaltSettingValue(setting, salt);\n  }\n  return unsaltedSettings;\n}\nasync function updateWorldSettings(runtime, serverId, worldSettings) {\n  const worldId = createUniqueUuid(runtime, serverId);\n  const world = await runtime.getWorld(worldId);\n  if (!world) {\n    logger.error(`No world found for server ${serverId}`);\n    return false;\n  }\n  if (!world.metadata) {\n    world.metadata = {};\n  }\n  const salt = getSalt();\n  const saltedSettings = saltWorldSettings(worldSettings, salt);\n  world.metadata.settings = saltedSettings;\n  await runtime.updateWorld(world);\n  return true;\n}\nasync function getWorldSettings(runtime, serverId) {\n  const worldId = createUniqueUuid(runtime, serverId);\n  const world = await runtime.getWorld(worldId);\n  if (!world || !world.metadata?.settings) {\n    return null;\n  }\n  const saltedSettings = world.metadata.settings;\n  const salt = getSalt();\n  return unsaltWorldSettings(saltedSettings, salt);\n}\nasync function initializeOnboarding(runtime, world, config) {\n  if (world.metadata?.settings) {\n    logger.info(`Onboarding state already exists for server ${world.serverId}`);\n    const saltedSettings = world.metadata.settings;\n    const salt = getSalt();\n    return unsaltWorldSettings(saltedSettings, salt);\n  }\n  const worldSettings = {};\n  if (config.settings) {\n    for (const [key, configSetting] of Object.entries(config.settings)) {\n      worldSettings[key] = createSettingFromConfig(configSetting);\n    }\n  }\n  if (!world.metadata) {\n    world.metadata = {};\n  }\n  world.metadata.settings = worldSettings;\n  await runtime.updateWorld(world);\n  logger.info(`Initialized settings config for server ${world.serverId}`);\n  return worldSettings;\n}\nfunction encryptedCharacter(character) {\n  const encryptedChar = JSON.parse(JSON.stringify(character));\n  const salt = getSalt();\n  if (encryptedChar.settings?.secrets) {\n    encryptedChar.settings.secrets = encryptObjectValues(encryptedChar.settings.secrets, salt);\n  }\n  if (encryptedChar.secrets) {\n    encryptedChar.secrets = encryptObjectValues(encryptedChar.secrets, salt);\n  }\n  return encryptedChar;\n}\nfunction decryptedCharacter(character, _runtime) {\n  const decryptedChar = JSON.parse(JSON.stringify(character));\n  const salt = getSalt();\n  if (decryptedChar.settings?.secrets) {\n    decryptedChar.settings.secrets = decryptObjectValues(decryptedChar.settings.secrets, salt);\n  }\n  if (decryptedChar.secrets) {\n    decryptedChar.secrets = decryptObjectValues(decryptedChar.secrets, salt);\n  }\n  return decryptedChar;\n}\nfunction encryptObjectValues(obj, salt) {\n  const result = {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === \"string\" && value) {\n      result[key] = encryptStringValue(value, salt);\n    } else {\n      result[key] = value;\n    }\n  }\n  return result;\n}\nfunction decryptObjectValues(obj, salt) {\n  const result = {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === \"string\" && value) {\n      result[key] = decryptStringValue(value, salt);\n    } else {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\n// src/services.ts\nvar ServiceBuilder = class {\n  constructor(serviceType) {\n    this.serviceType = serviceType;\n    this.description = \"\";\n  }\n  /**\n   * Set the service description\n   */\n  withDescription(description) {\n    this.description = description;\n    return this;\n  }\n  /**\n   * Set the start function for the service\n   */\n  withStart(startFn) {\n    this.startFn = startFn;\n    return this;\n  }\n  /**\n   * Set the stop function for the service\n   */\n  withStop(stopFn) {\n    this.stopFn = stopFn;\n    return this;\n  }\n  /**\n   * Build the service class with all configured properties\n   */\n  build() {\n    const serviceType = this.serviceType;\n    const description = this.description;\n    const startFn = this.startFn;\n    const stopFn = this.stopFn;\n    return class extends Service3 {\n      constructor() {\n        super(...arguments);\n        this.capabilityDescription = description;\n      }\n      static {\n        this.serviceType = serviceType;\n      }\n      static async start(runtime) {\n        if (!startFn) {\n          throw new Error(`Start function not defined for service ${serviceType}`);\n        }\n        return startFn(runtime);\n      }\n      async stop() {\n        if (stopFn) {\n          await stopFn();\n        }\n      }\n    };\n  }\n};\nfunction createService(serviceType) {\n  return new ServiceBuilder(serviceType);\n}\nfunction defineService(definition) {\n  return createService(definition.serviceType).withDescription(definition.description).withStart(definition.start).withStop(definition.stop || (() => Promise.resolve())).build();\n}\n\n// src/specs/v1/index.ts\nvar v1_exports = {};\n(0,_chunk_R5U7XKVJ_js__WEBPACK_IMPORTED_MODULE_5__.__export)(v1_exports, {\n  ActionTimelineType: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.ActionTimelineType,\n  AgentRuntime: () => AgentRuntime3,\n  CacheKeyPrefix: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.CacheKeyPrefix,\n  CacheStore: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.CacheStore,\n  GoalStatus: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.GoalStatus,\n  IrysDataType: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.IrysDataType,\n  IrysMessageType: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.IrysMessageType,\n  KnowledgeScope: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.KnowledgeScope,\n  LoggingLevel: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.LoggingLevel,\n  ModelClass: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.ModelClass,\n  ModelProviderName: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.ModelProviderName,\n  Service: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.Service,\n  ServiceType: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.ServiceType,\n  TokenizerType: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.TokenizerType,\n  TranscriptionProvider: () => _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_1__.TranscriptionProvider,\n  asUUID: () => asUUID3,\n  convertContentToV1: () => _chunk_U2ADTLZY_js__WEBPACK_IMPORTED_MODULE_2__.convertContentToV1,\n  convertContentToV2: () => _chunk_U2ADTLZY_js__WEBPACK_IMPORTED_MODULE_2__.convertContentToV2,\n  createTemplateFunction: () => _chunk_2HSL25IJ_js__WEBPACK_IMPORTED_MODULE_0__.createTemplateFunction,\n  formatActors: () => formatActors,\n  formatMessages: () => formatMessages3,\n  formatPosts: () => formatPosts3,\n  formatTimestamp: () => formatTimestamp3,\n  fromV2ActionExample: () => _chunk_U2ADTLZY_js__WEBPACK_IMPORTED_MODULE_2__.fromV2ActionExample,\n  fromV2Provider: () => _chunk_JX2SRFHQ_js__WEBPACK_IMPORTED_MODULE_3__.fromV2Provider,\n  fromV2State: () => _chunk_YIBXLDIR_js__WEBPACK_IMPORTED_MODULE_4__.fromV2State,\n  generateUuidFromString: () => generateUuidFromString,\n  getActorDetails: () => getActorDetails,\n  getTemplateValues: () => _chunk_2HSL25IJ_js__WEBPACK_IMPORTED_MODULE_0__.getTemplateValues,\n  processTemplate: () => _chunk_2HSL25IJ_js__WEBPACK_IMPORTED_MODULE_0__.processTemplate,\n  toV2ActionExample: () => _chunk_U2ADTLZY_js__WEBPACK_IMPORTED_MODULE_2__.toV2ActionExample,\n  toV2Provider: () => _chunk_JX2SRFHQ_js__WEBPACK_IMPORTED_MODULE_3__.toV2Provider,\n  toV2State: () => _chunk_YIBXLDIR_js__WEBPACK_IMPORTED_MODULE_4__.toV2State\n});\n\n// src/specs/v1/messages.ts\nasync function getActorDetails({\n  runtime,\n  roomId\n}) {\n  throw new Error(\"getActorDetails is not implemented.\");\n}\nfunction formatActors({ actors }) {\n  if (!actors || actors.length === 0) {\n    return \"No actors available.\";\n  }\n  return actors.map((actor) => actor.name).join(\", \");\n}\nvar formatMessages3 = ({ messages, actors }) => {\n  return formatMessages2(messages);\n};\nvar formatTimestamp3 = (messageDate) => {\n  return formatTimestamp2(messageDate);\n};\n\n// src/specs/v1/posts.ts\nvar formatPosts3 = ({\n  messages,\n  actors,\n  conversationHeader = true\n}) => {\n  const entities = actors.map((actor) => ({\n    id: actor.id,\n    names: [actor.name, actor.username].filter(Boolean),\n    metadata: actor.details,\n    agentId: void 0\n    // agentId is not available on v1 Actor and not used by coreFormatPosts\n  }));\n  return formatPosts2({\n    messages,\n    entities,\n    conversationHeader\n  });\n};\n\n// src/specs/v1/runtime.ts\nvar DEFAULT_SERVER_ID = \"00000000-0000-0000-0000-000000000000\";\nvar AgentRuntime3 = class {\n  get agentId() {\n    return this._runtime.agentId;\n  }\n  get serverUrl() {\n    return this._runtime.serverUrl;\n  }\n  get databaseAdapter() {\n    return this._runtime.databaseAdapter;\n  }\n  get token() {\n    return this._runtime.token;\n  }\n  get character() {\n    return this._runtime.character;\n  }\n  get actions() {\n    return this._runtime.actions;\n  }\n  get evaluators() {\n    return this._runtime.evaluators;\n  }\n  get providers() {\n    return this._runtime.providers;\n  }\n  get plugins() {\n    return this._runtime.plugins;\n  }\n  get modelProvider() {\n    return this._runtime.modelProvider;\n  }\n  get imageModelProvider() {\n    return this._runtime.imageModelProvider;\n  }\n  get imageVisionModelProvider() {\n    return this._runtime.imageVisionModelProvider;\n  }\n  get messageManager() {\n    return this._runtime.messageManager;\n  }\n  get routes() {\n    return this._runtime.routes;\n  }\n  get services() {\n    return this._runtime.services;\n  }\n  get events() {\n    return this._runtime.events;\n  }\n  get descriptionManager() {\n    return this._runtime.descriptionManager;\n  }\n  get documentsManager() {\n    return this._runtime.documentsManager;\n  }\n  get knowledgeManager() {\n    return this._runtime.knowledgeManager;\n  }\n  get ragKnowledgeManager() {\n    return this._runtime.ragKnowledgeManager;\n  }\n  get loreManager() {\n    return this._runtime.loreManager;\n  }\n  get cacheManager() {\n    return this._runtime.cacheManager;\n  }\n  get clients() {\n    return this._runtime.clients;\n  }\n  registerMemoryManager(_manager) {\n  }\n  getMemoryManager(_tableName) {\n  }\n  getService(service) {\n    return this._runtime.getService(service);\n  }\n  async registerService(service) {\n    return this._runtime.registerService(service);\n  }\n  /**\n   * Creates an instance of AgentRuntime.\n   * @param opts - The options for configuring the AgentRuntime.\n   * @param opts.conversationLength - The number of messages to hold in the recent message cache.\n   * @param opts.token - The JWT token, can be a JWT token if outside worker, or an OpenAI token if inside worker.\n   * @param opts.serverUrl - The URL of the worker.\n   * @param opts.actions - Optional custom actions.\n   * @param opts.evaluators - Optional custom evaluators.\n   * @param opts.services - Optional custom services.\n   * @param opts.memoryManagers - Optional custom memory managers.\n   * @param opts.providers - Optional context providers.\n   * @param opts.model - The model to use for generateText.\n   * @param opts.embeddingModel - The model to use for embedding.\n   * @param opts.agentId - Optional ID of the agent.\n   * @param opts.databaseAdapter - The database adapter used for interacting with the database.\n   * @param opts.fetch - Custom fetch function to use for making requests.\n   */\n  constructor(opts) {\n    this._runtime = new AgentRuntime2(opts);\n  }\n  //private async initializeDatabase() {}\n  async initialize() {\n    return this._runtime.initialize();\n  }\n  async stop() {\n    return this._runtime.stop();\n  }\n  getSetting(key) {\n    return this._runtime.getSetting(key);\n  }\n  /**\n   * Get the number of messages that are kept in the conversation buffer.\n   * @returns The number of recent messages to be kept in memory.\n   */\n  getConversationLength() {\n    return this._runtime.getConversationLength();\n  }\n  /**\n   * Register an action for the agent to perform.\n   * @param action The action to register.\n   */\n  registerAction(action) {\n    return this._runtime.registerAction(action);\n  }\n  /**\n   * Register an evaluator to assess and guide the agent's responses.\n   * @param evaluator The evaluator to register.\n   */\n  registerEvaluator(evaluator) {\n    return this._runtime.registerEvaluator(evaluator);\n  }\n  /**\n   * Register a context provider to provide context for message generation.\n   * @param provider The context provider to register.\n   */\n  registerContextProvider(provider) {\n    return this._runtime.registerProvider(provider);\n  }\n  /**\n   * Register an adapter for the agent to use.\n   * @param adapter The adapter to register.\n   */\n  registerAdapter(_adapter) {\n  }\n  /**\n   * Process the actions of a message.\n   * @param message The message to process.\n   * @param content The content of the message to process actions from.\n   */\n  async processActions(message, responses, state, callback) {\n    return this._runtime.processActions(\n      message,\n      responses,\n      state,\n      callback\n    );\n  }\n  /**\n   * Evaluate the message and state using the registered evaluators.\n   * @param message The message to evaluate.\n   * @param state The state of the agent.\n   * @param didRespond Whether the agent responded to the message.~\n   * @param callback The handler callback\n   * @returns The results of the evaluation.\n   */\n  async evaluate(message, state, didRespond, callback) {\n    return this._runtime.evaluate(message, state, didRespond, callback);\n  }\n  /**\n   * Ensure the existence of a participant in the room. If the participant does not exist, they are added to the room.\n   * @param userId - The user ID to ensure the existence of.\n   * @throws An error if the participant cannot be added.\n   */\n  async ensureParticipantExists(_userId, _roomId) {\n  }\n  /**\n   * Ensure the existence of a user in the database. If the user does not exist, they are added to the database.\n   * @param userId - The user ID to ensure the existence of.\n   * @param userName - The user name to ensure the existence of.\n   * @returns\n   */\n  async ensureUserExists(_userId, _userName, _name, _email, _source) {\n  }\n  async ensureParticipantInRoom(userId, roomId) {\n    return this._runtime.ensureParticipantInRoom(userId, roomId);\n  }\n  async ensureConnection(userId, roomId, userName, _userScreenName, source) {\n    return this._runtime.ensureConnection({\n      userId,\n      roomId,\n      userName,\n      entityId: \"\",\n      source\n    });\n  }\n  /**\n   * Ensure the existence of a room between the agent and a user. If no room exists, a new room is created and the user\n   * and agent are added as participants. The room ID is returned.\n   * @param roomId - The room ID to create a room with.\n   * @returns The room ID of the room between the agent and the user.\n   * @throws An error if the room cannot be created.\n   */\n  async ensureRoomExists(roomId) {\n    return this._runtime.ensureRoomExists({\n      id: roomId,\n      name: \"Unknown\",\n      source: \"Unknown\",\n      type: \"Unknown\",\n      channelId: roomId,\n      serverId: DEFAULT_SERVER_ID,\n      worldId: DEFAULT_SERVER_ID,\n      metadata: {}\n    });\n  }\n  /**\n   * Compose the state of the agent into an object that can be passed or used for response generation.\n   * @param message The message to compose the state from.\n   * @returns The state of the agent.\n   */\n  async composeState(message, _additionalKeys = {}) {\n    return this._runtime.composeState(message, []);\n  }\n  async updateRecentMessageState(state) {\n    const conversationLength = this.getConversationLength();\n    this._runtime.getMemories({\n      roomId: state.roomId,\n      count: conversationLength,\n      unique: false,\n      tableName: state.tableName\n    });\n    const recentMessages = formatMessages3({\n      actors: state.actorsData ?? [],\n      messages: state.recentMessagesData?.map((memory) => {\n        const newMemory = { ...memory };\n        delete newMemory.embedding;\n        return newMemory;\n      })\n    });\n    let allAttachments = [];\n    if (state.recentMessagesData && Array.isArray(state.recentMessagesData)) {\n      const lastMessageWithAttachment = state.recentMessagesData.find(\n        (msg) => msg.content.attachments && msg.content.attachments.length > 0\n      );\n      if (lastMessageWithAttachment) {\n        const lastMessageTime = lastMessageWithAttachment?.createdAt ?? Date.now();\n        const oneHourBeforeLastMessage = lastMessageTime - 60 * 60 * 1e3;\n        allAttachments = state.recentMessagesData.filter((msg) => {\n          const msgTime = msg.createdAt ?? Date.now();\n          return msgTime >= oneHourBeforeLastMessage;\n        }).flatMap((msg) => msg.content.attachments || []);\n      }\n    }\n    const formattedAttachments = allAttachments.map(\n      (attachment) => `ID: ${attachment.id}\nName: ${attachment.title}\nURL: ${attachment.url}\nType: ${attachment.source}\nDescription: ${attachment.description}\nText: ${attachment.text}\n    `\n    ).join(\"\\n\");\n    return {\n      ...state,\n      recentMessages: addHeader2(\"# Conversation Messages\", recentMessages),\n      recentMessagesData: state.recentMessagesData,\n      attachments: formattedAttachments\n    };\n  }\n};\n\n// src/specs/v1/uuid.ts\nfunction asUUID3(id) {\n  const validUuid = validateUuid2(id);\n  if (!validUuid) {\n    throw new Error(`Invalid UUID format: ${id}`);\n  }\n  return id.toLowerCase();\n}\nfunction generateUuidFromString(input) {\n  return stringToUuid2(input);\n}\n\n// src/specs/index.ts\nvar defaultSpec = v2_exports;\n\n// src/entities.ts\nvar entityResolutionTemplate = `# Task: Resolve Entity Name\nMessage Sender: {{senderName}} (ID: {{senderId}})\nAgent: {{agentName}} (ID: {{agentId}})\n\n# Entities in Room:\n{{#if entitiesInRoom}}\n{{entitiesInRoom}}\n{{/if}}\n\n{{recentMessages}}\n\n# Instructions:\n1. Analyze the context to identify which entity is being referenced\n2. Consider special references like \"me\" (the message sender) or \"you\" (agent the message is directed to)\n3. Look for usernames/handles in standard formats (e.g. @username, user#1234)\n4. Consider context from recent messages for pronouns and references\n5. If multiple matches exist, use context to disambiguate\n6. Consider recent interactions and relationship strength when resolving ambiguity\n\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nReturn an XML response with:\n<response>\n  <entityId>exact-id-if-known-otherwise-null</entityId>\n  <type>EXACT_MATCH | USERNAME_MATCH | NAME_MATCH | RELATIONSHIP_MATCH | AMBIGUOUS | UNKNOWN</type>\n  <matches>\n    <match>\n      <name>matched-name</name>\n      <reason>why this entity matches</reason>\n    </match>\n  </matches>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.`;\nasync function getRecentInteractions(runtime, sourceEntityId, candidateEntities, roomId, relationships) {\n  const results = [];\n  const recentMessages = await runtime.getMemories({\n    tableName: \"messages\",\n    roomId,\n    count: 20\n    // Reduced from 100 since we only need context\n  });\n  for (const entity of candidateEntities) {\n    const interactions = [];\n    let interactionScore = 0;\n    const directReplies = recentMessages.filter(\n      (msg) => msg.entityId === sourceEntityId && msg.content.inReplyTo === entity.id || msg.entityId === entity.id && msg.content.inReplyTo === sourceEntityId\n    );\n    interactions.push(...directReplies);\n    const relationship = relationships.find(\n      (rel) => rel.sourceEntityId === sourceEntityId && rel.targetEntityId === entity.id || rel.targetEntityId === sourceEntityId && rel.sourceEntityId === entity.id\n    );\n    if (relationship?.metadata?.interactions) {\n      interactionScore = relationship.metadata.interactions;\n    }\n    interactionScore += directReplies.length;\n    const uniqueInteractions = [...new Set(interactions)];\n    results.push({\n      entity,\n      interactions: uniqueInteractions.slice(-5),\n      // Only keep last 5 messages for context\n      count: Math.round(interactionScore)\n    });\n  }\n  return results.sort((a, b) => b.count - a.count);\n}\nasync function findEntityByName(runtime, message, state) {\n  const room = state.data.room ?? await runtime.getRoom(message.roomId);\n  if (!room) {\n    logger.warn(\"Room not found for entity search\");\n    return null;\n  }\n  const world = room.worldId ? await runtime.getWorld(room.worldId) : null;\n  const entitiesInRoom = await runtime.getEntitiesForRoom(room.id, true);\n  const filteredEntities = await Promise.all(\n    entitiesInRoom.map(async (entity) => {\n      if (!entity.components) return entity;\n      const worldRoles = world?.metadata?.roles || {};\n      entity.components = entity.components.filter((component) => {\n        if (component.sourceEntityId === message.entityId) return true;\n        if (world && component.sourceEntityId) {\n          const sourceRole = worldRoles[component.sourceEntityId];\n          if (sourceRole === \"OWNER\" || sourceRole === \"ADMIN\") return true;\n        }\n        if (component.sourceEntityId === runtime.agentId) return true;\n        return false;\n      });\n      return entity;\n    })\n  );\n  const relationships = await runtime.getRelationships({\n    entityId: message.entityId\n  });\n  const relationshipEntities = await Promise.all(\n    relationships.map(async (rel) => {\n      const entityId = rel.sourceEntityId === message.entityId ? rel.targetEntityId : rel.sourceEntityId;\n      return runtime.getEntityById(entityId);\n    })\n  );\n  const allEntities = [\n    ...filteredEntities,\n    ...relationshipEntities.filter((e) => e !== null)\n  ];\n  const interactionData = await getRecentInteractions(\n    runtime,\n    message.entityId,\n    allEntities,\n    room.id,\n    relationships\n  );\n  const prompt = composePrompt({\n    state: {\n      roomName: room.name || room.id,\n      worldName: world?.name || \"Unknown\",\n      entitiesInRoom: JSON.stringify(filteredEntities, null, 2),\n      entityId: message.entityId,\n      senderId: message.entityId\n    },\n    template: entityResolutionTemplate\n  });\n  const result = await runtime.useModel(ModelType2.TEXT_SMALL, {\n    prompt,\n    stopSequences: []\n  });\n  const resolution = parseKeyValueXml(result);\n  if (!resolution) {\n    logger.warn(\"Failed to parse entity resolution result\");\n    return null;\n  }\n  if (resolution.type === \"EXACT_MATCH\" && resolution.entityId) {\n    const entity = await runtime.getEntityById(resolution.entityId);\n    if (entity) {\n      if (entity.components) {\n        const worldRoles = world?.metadata?.roles || {};\n        entity.components = entity.components.filter((component) => {\n          if (component.sourceEntityId === message.entityId) return true;\n          if (world && component.sourceEntityId) {\n            const sourceRole = worldRoles[component.sourceEntityId];\n            if (sourceRole === \"OWNER\" || sourceRole === \"ADMIN\") return true;\n          }\n          if (component.sourceEntityId === runtime.agentId) return true;\n          return false;\n        });\n      }\n      return entity;\n    }\n  }\n  let matchesArray = [];\n  if (resolution.matches?.match) {\n    matchesArray = Array.isArray(resolution.matches.match) ? resolution.matches.match : [resolution.matches.match];\n  }\n  if (matchesArray.length > 0 && matchesArray[0]?.name) {\n    const matchName = matchesArray[0].name.toLowerCase();\n    const matchingEntity = allEntities.find((entity) => {\n      if (entity.names.some((n) => n.toLowerCase() === matchName)) return true;\n      return entity.components?.some(\n        (c) => c.data.username?.toLowerCase() === matchName || c.data.handle?.toLowerCase() === matchName\n      );\n    });\n    if (matchingEntity) {\n      if (resolution.type === \"RELATIONSHIP_MATCH\") {\n        const interactionInfo = interactionData.find((d) => d.entity.id === matchingEntity.id);\n        if (interactionInfo && interactionInfo.count > 0) {\n          return matchingEntity;\n        }\n      } else {\n        return matchingEntity;\n      }\n    }\n  }\n  return null;\n}\nvar createUniqueUuid = (runtime, baseUserId) => {\n  if (baseUserId === runtime.agentId) {\n    return runtime.agentId;\n  }\n  const combinedString = `${baseUserId}:${runtime.agentId}`;\n  return stringToUuid(combinedString);\n};\nasync function getEntityDetails({\n  runtime,\n  roomId\n}) {\n  const [room, roomEntities] = await Promise.all([\n    runtime.getRoom(roomId),\n    runtime.getEntitiesForRoom(roomId, true)\n  ]);\n  const uniqueEntities = /* @__PURE__ */ new Map();\n  for (const entity of roomEntities) {\n    if (uniqueEntities.has(entity.id)) continue;\n    const allData = {};\n    for (const component of entity.components || []) {\n      Object.assign(allData, component.data);\n    }\n    const mergedData = {};\n    for (const [key, value] of Object.entries(allData)) {\n      if (!mergedData[key]) {\n        mergedData[key] = value;\n        continue;\n      }\n      if (Array.isArray(mergedData[key]) && Array.isArray(value)) {\n        mergedData[key] = [.../* @__PURE__ */ new Set([...mergedData[key], ...value])];\n      } else if (typeof mergedData[key] === \"object\" && typeof value === \"object\") {\n        mergedData[key] = { ...mergedData[key], ...value };\n      }\n    }\n    uniqueEntities.set(entity.id, {\n      id: entity.id,\n      name: room?.source ? entity.metadata[room.source]?.name || entity.names[0] : entity.names[0],\n      names: entity.names,\n      data: JSON.stringify({ ...mergedData, ...entity.metadata })\n    });\n  }\n  return Array.from(uniqueEntities.values());\n}\nfunction formatEntities({ entities }) {\n  const entityStrings = entities.map((entity) => {\n    const header = `\"${entity.names.join('\" aka \"')}\"\nID: ${entity.id}${entity.metadata && Object.keys(entity.metadata).length > 0 ? `\nData: ${JSON.stringify(entity.metadata)}\n` : \"\\n\"}`;\n    return header;\n  });\n  return entityStrings.join(\"\\n\");\n}\n\n// src/specs/v2/entities.ts\nasync function findEntityByName2(runtime, message, state) {\n  const rt = runtime;\n  return findEntityByName(rt, message, state);\n}\nvar createUniqueUuid2 = (runtime, baseUserId) => {\n  return createUniqueUuid(runtime, baseUserId);\n};\nasync function getEntityDetails2({\n  runtime,\n  roomId\n}) {\n  return getEntityDetails({ runtime, roomId });\n}\nfunction formatEntities2({ entities }) {\n  return formatEntities({ entities });\n}\n\n// src/specs/v2/logger.ts\nvar logger2 = {\n  trace: (...args) => {\n    const [message = \"\", ...rest] = args;\n    return logger.trace.apply(logger, [String(message), ...rest]);\n  },\n  debug: (...args) => {\n    const [message = \"\", ...rest] = args;\n    return logger.debug.apply(logger, [String(message), ...rest]);\n  },\n  success: (...args) => {\n    const [message = \"\", ...rest] = args;\n    return logger.debug.apply(logger, [String(message), ...rest]);\n  },\n  progress: (...args) => {\n    const [message = \"\", ...rest] = args;\n    return logger.debug.apply(logger, [String(message), ...rest]);\n  },\n  log: (...args) => {\n    const [message = \"\", ...rest] = args;\n    return logger.info.apply(logger, [String(message), ...rest]);\n  },\n  info: (...args) => {\n    const [message = \"\", ...rest] = args;\n    return logger.info.apply(logger, [String(message), ...rest]);\n  },\n  warn: (...args) => {\n    const [message = \"\", ...rest] = args;\n    return logger.warn.apply(logger, [String(message), ...rest]);\n  },\n  error: (...args) => {\n    const [message = \"\", ...rest] = args;\n    return logger.error.apply(logger, [String(message), ...rest]);\n  },\n  fatal: (...args) => {\n    const [message = \"\", ...rest] = args;\n    return logger.fatal.apply(logger, [String(message), ...rest]);\n  },\n  clear: (...args) => {\n    const [message = \"\", ...rest] = args;\n    return logger.clear.apply(logger, [String(message), ...rest]);\n  }\n};\nvar elizaLogger2 = logger2;\n\n// src/specs/v2/prompts.ts\nvar shouldRespondTemplate2 = shouldRespondTemplate;\nvar messageHandlerTemplate2 = messageHandlerTemplate;\nvar postCreationTemplate2 = postCreationTemplate;\nvar booleanFooter2 = booleanFooter;\nvar imageDescriptionTemplate2 = imageDescriptionTemplate;\n\n// src/specs/v2/roles.ts\nasync function getUserServerRole2(runtime, entityId, serverId) {\n  return getUserServerRole(runtime, entityId, serverId);\n}\nasync function findWorldsForOwner2(runtime, entityId) {\n  return findWorldsForOwner(runtime, entityId);\n}\n\n// src/specs/v2/runtime.ts\nvar Semaphore2 = class {\n  constructor(count) {\n    this._semphonre = new Semaphore(count);\n  }\n  async acquire() {\n    return this._semphonre.acquire();\n  }\n  release() {\n    return this._semphonre.release();\n  }\n};\nvar AgentRuntime2 = class {\n  get services() {\n    return this._runtime.services;\n  }\n  get events() {\n    if (this._runtime.events instanceof Map) {\n      return this._runtime.events;\n    }\n    const eventsMap = /* @__PURE__ */ new Map();\n    if (this._runtime.events && typeof this._runtime.events === \"object\") {\n      Object.entries(this._runtime.events).forEach(([key, handlers]) => {\n        eventsMap.set(key, handlers);\n      });\n    }\n    return eventsMap;\n  }\n  get routes() {\n    return this._runtime.routes;\n  }\n  get agentId() {\n    return this._runtime.agentId;\n  }\n  get character() {\n    return this._runtime.character;\n  }\n  get providers() {\n    return this._runtime.providers;\n  }\n  get actions() {\n    return this._runtime.actions;\n  }\n  get evaluators() {\n    return this._runtime.evaluators;\n  }\n  get plugins() {\n    return this._runtime.plugins;\n  }\n  get adapter() {\n    return this._runtime.adapter;\n  }\n  constructor(opts) {\n    this._runtime = new AgentRuntime(opts);\n  }\n  /**\n   * Registers a plugin with the runtime and initializes its components\n   * @param plugin The plugin to register\n   */\n  async registerPlugin(plugin) {\n    const wrappedPlugin = {\n      ...plugin,\n      init: plugin.init ? async (config, _runtime) => {\n        return plugin.init(config, this);\n      } : void 0\n    };\n    return this._runtime.registerPlugin(wrappedPlugin);\n  }\n  getAllServices() {\n    return this._runtime.services;\n  }\n  async stop() {\n    return this._runtime.stop();\n  }\n  async initialize() {\n    return this._runtime.initialize();\n  }\n  async getConnection() {\n    return this._runtime.getConnection();\n  }\n  setSetting(key, value, secret = false) {\n    return this._runtime.setSetting(key, value, secret);\n  }\n  getSetting(key) {\n    return this._runtime.getSetting(key);\n  }\n  /**\n   * Get the number of messages that are kept in the conversation buffer.\n   * @returns The number of recent messages to be kept in memory.\n   */\n  getConversationLength() {\n    return this._runtime.getConversationLength();\n  }\n  registerDatabaseAdapter(adapter) {\n    return this._runtime.registerDatabaseAdapter(adapter);\n  }\n  /**\n   * Register a provider for the agent to use.\n   * @param provider The provider to register.\n   */\n  registerProvider(provider) {\n    const wrappedProvider = {\n      ...provider,\n      get: async (_runtime, message, state) => {\n        return provider.get(this, message, state);\n      }\n    };\n    return this._runtime.registerProvider(wrappedProvider);\n  }\n  /**\n   * Register an action for the agent to perform.\n   * @param action The action to register.\n   */\n  registerAction(action) {\n    const wrappedAction = {\n      ...action,\n      handler: async (_runtime, message, state, options2, callback, responses) => {\n        return action.handler(this, message, state, options2, callback, responses);\n      }\n    };\n    return this._runtime.registerAction(wrappedAction);\n  }\n  /**\n   * Register an evaluator to assess and guide the agent's responses.\n   * @param evaluator The evaluator to register.\n   */\n  registerEvaluator(evaluator) {\n    return this._runtime.registerEvaluator(evaluator);\n  }\n  /**\n   * Process the actions of a message.\n   * @param message The message to process.\n   * @param responses The array of response memories to process actions from.\n   * @param state Optional state object for the action processing.\n   * @param callback Optional callback handler for action results.\n   */\n  async processActions(message, responses, state, callback) {\n    return this._runtime.processActions(message, responses, state, callback);\n  }\n  /**\n   * Evaluate the message and state using the registered evaluators.\n   * @param message The message to evaluate.\n   * @param state The state of the agent.\n   * @param didRespond Whether the agent responded to the message.~\n   * @param callback The handler callback\n   * @returns The results of the evaluation.\n   */\n  async evaluate(message, state, didRespond, callback, responses) {\n    return this._runtime.evaluate(message, state, didRespond, callback, responses);\n  }\n  async ensureConnection({\n    entityId,\n    roomId,\n    userName,\n    name,\n    source,\n    type,\n    channelId,\n    serverId,\n    worldId,\n    userId\n  }) {\n    return this._runtime.ensureConnection({\n      entityId,\n      roomId,\n      userName,\n      name,\n      source,\n      type,\n      channelId,\n      serverId,\n      worldId,\n      userId\n    });\n  }\n  /**\n   * Ensures a participant is added to a room, checking that the entity exists first\n   */\n  async ensureParticipantInRoom(entityId, roomId) {\n    return this._runtime.ensureParticipantInRoom(entityId, roomId);\n  }\n  async removeParticipant(entityId, roomId) {\n    return this._runtime.removeParticipant(entityId, roomId);\n  }\n  async getParticipantsForEntity(entityId) {\n    return this._runtime.getParticipantsForEntity(entityId);\n  }\n  async getParticipantsForRoom(roomId) {\n    return this._runtime.getParticipantsForRoom(roomId);\n  }\n  async addParticipant(entityId, roomId) {\n    return this._runtime.addParticipant(entityId, roomId);\n  }\n  async addParticipantsRoom(entityIds, roomId) {\n    return this._runtime.addParticipantsRoom(entityIds, roomId);\n  }\n  /**\n   * Ensure the existence of a world.\n   */\n  async ensureWorldExists({ id, name, serverId, metadata, agentId }) {\n    return this._runtime.ensureWorldExists({\n      id,\n      name,\n      serverId,\n      metadata,\n      agentId\n    });\n  }\n  /**\n   * Ensure the existence of a room between the agent and a user. If no room exists, a new room is created and the user\n   * and agent are added as participants. The room ID is returned.\n   * @param entityId - The user ID to create a room with.\n   * @returns The room ID of the room between the agent and the user.\n   * @throws An error if the room cannot be created.\n   */\n  async ensureRoomExists({ id, name, source, type, channelId, serverId, worldId, metadata }) {\n    return this._runtime.ensureRoomExists({\n      id,\n      name,\n      source,\n      type,\n      channelId,\n      serverId,\n      worldId,\n      metadata\n    });\n  }\n  /**\n   * Composes the agent's state by gathering data from enabled providers.\n   * @param message - The message to use as context for state composition\n   * @param includeList - Optional list of provider names to include, filtering out all others\n   * @param onlyInclude - Whether to only include the specified providers\n   * @param skipCache - Whether to skip the cache\n   * @returns A State object containing provider data, values, and text\n   */\n  async composeState(message, includeList = null, onlyInclude = false, skipCache = false) {\n    return this._runtime.composeState(message, includeList, onlyInclude, skipCache);\n  }\n  getService(service) {\n    return this._runtime.getService(service);\n  }\n  async registerService(service) {\n    return this._runtime.registerService(service);\n  }\n  registerModel(modelType, handler, provider = \"v2\") {\n    const wrappedHandler = async (_runtime, params) => {\n      return handler(this, params);\n    };\n    return this._runtime.registerModel(modelType, wrappedHandler, provider);\n  }\n  getModel(modelType) {\n    return this._runtime.getModel(modelType);\n  }\n  /**\n   * Use a model with strongly typed parameters and return values based on model type\n   * @template T - The model type to use\n   * @template R - The expected return type, defaults to the type defined in ModelResultMap[T]\n   * @param {T} modelType - The type of model to use\n   * @param {ModelParamsMap[T] | any} params - The parameters for the model, typed based on model type\n   * @returns {Promise<R>} - The model result, typed based on the provided generic type parameter\n   */\n  async useModel(modelType, params) {\n    return this._runtime.useModel(modelType, params);\n  }\n  registerEvent(event, handler) {\n    return this._runtime.registerEvent(event, handler);\n  }\n  getEvent(event) {\n    return this._runtime.getEvent(event);\n  }\n  async emitEvent(event, params) {\n    return this._runtime.emitEvent(event, params);\n  }\n  async ensureEmbeddingDimension() {\n    return this._runtime.ensureEmbeddingDimension();\n  }\n  registerTaskWorker(taskHandler) {\n    return this._runtime.registerTaskWorker(taskHandler);\n  }\n  /**\n   * Get a task worker by name\n   */\n  getTaskWorker(name) {\n    return this._runtime.getTaskWorker(name);\n  }\n  // Implement database adapter methods\n  get db() {\n    return this._runtime.db();\n  }\n  async init() {\n    return this._runtime.init();\n  }\n  async close() {\n    return this._runtime.close();\n  }\n  async getAgent(agentId) {\n    return this._runtime.getAgent(agentId);\n  }\n  async getAgents() {\n    return this._runtime.getAgents();\n  }\n  async createAgent(agent) {\n    return this._runtime.createAgent(agent);\n  }\n  async updateAgent(agentId, agent) {\n    return this._runtime.updateAgent(agentId, agent);\n  }\n  async deleteAgent(agentId) {\n    return this._runtime.deleteAgent(agentId);\n  }\n  async ensureAgentExists(agent) {\n    return this._runtime.ensureAgentExists(agent);\n  }\n  async getEntityById(entityId) {\n    return this._runtime.getEntityById(entityId);\n  }\n  async getEntitiesByIds(entityIds) {\n    return this._runtime.getEntitiesByIds(entityIds);\n  }\n  async getEntitiesForRoom(roomId, includeComponents) {\n    return this._runtime.getEntitiesForRoom(roomId, includeComponents);\n  }\n  async createEntity(entity) {\n    return this._runtime.createEntity(entity);\n  }\n  async createEntities(entities) {\n    return this._runtime.createEntities(entities);\n  }\n  async updateEntity(entity) {\n    return this._runtime.updateEntity(entity);\n  }\n  async getComponent(entityId, type, worldId, sourceEntityId) {\n    return this._runtime.getComponent(entityId, type, worldId, sourceEntityId);\n  }\n  async getComponents(entityId, worldId, sourceEntityId) {\n    return this._runtime.getComponents(entityId, worldId, sourceEntityId);\n  }\n  async createComponent(component) {\n    return this._runtime.createComponent(component);\n  }\n  async updateComponent(component) {\n    return this._runtime.updateComponent(component);\n  }\n  async deleteComponent(componentId) {\n    return this._runtime.deleteComponent(componentId);\n  }\n  async addEmbeddingToMemory(memory) {\n    return this._runtime.addEmbeddingToMemory(memory);\n  }\n  async getAllMemories() {\n    return this._runtime.getAllMemories();\n  }\n  async clearAllAgentMemories() {\n    return this._runtime.clearAllAgentMemories();\n  }\n  async getMemories(params) {\n    return this._runtime.getMemories(params);\n  }\n  async getMemoryById(id) {\n    return this._runtime.getMemoryById(id);\n  }\n  async getMemoriesByIds(ids, tableName) {\n    return this._runtime.getMemoriesByIds(ids, tableName);\n  }\n  async getMemoriesByRoomIds(params) {\n    return this._runtime.getMemoriesByRoomIds(params);\n  }\n  async getCachedEmbeddings(params) {\n    return this._runtime.getCachedEmbeddings(params);\n  }\n  async log(params) {\n    return this._runtime.log(params);\n  }\n  async searchMemories(params) {\n    return this._runtime.searchMemories(params);\n  }\n  async createMemory(memory, tableName, unique) {\n    return this._runtime.createMemory(memory, tableName, unique);\n  }\n  async updateMemory(memory) {\n    return this._runtime.updateMemory(memory);\n  }\n  async deleteMemory(memoryId) {\n    return this._runtime.deleteMemory(memoryId);\n  }\n  async deleteManyMemories(memoryIds) {\n    return this._runtime.deleteManyMemories(memoryIds);\n  }\n  async deleteAllMemories(roomId, tableName) {\n    return this._runtime.deleteAllMemories(roomId, tableName);\n  }\n  async countMemories(roomId, unique, tableName) {\n    return this._runtime.countMemories(roomId, unique, tableName);\n  }\n  async getLogs(params) {\n    return this._runtime.getLogs(params);\n  }\n  async deleteLog(logId) {\n    return this._runtime.deleteLog(logId);\n  }\n  async createWorld(world) {\n    return this._runtime.createWorld(world);\n  }\n  async getWorld(id) {\n    return this._runtime.getWorld(id);\n  }\n  async removeWorld(worldId) {\n    return this._runtime.removeWorld(worldId);\n  }\n  async getAllWorlds() {\n    return this._runtime.getAllWorlds();\n  }\n  async updateWorld(world) {\n    return this._runtime.updateWorld(world);\n  }\n  async getRoom(roomId) {\n    return this._runtime.getRoom(roomId);\n  }\n  async getRoomsByIds(roomIds) {\n    return this._runtime.getRoomsByIds(roomIds);\n  }\n  async createRoom({ id, name, source, type, channelId, serverId, worldId }) {\n    return this._runtime.createRoom({\n      id,\n      name,\n      source,\n      type,\n      channelId,\n      serverId,\n      worldId\n    });\n  }\n  async createRooms(rooms) {\n    return this._runtime.createRooms(rooms);\n  }\n  async deleteRoom(roomId) {\n    return this._runtime.deleteRoom(roomId);\n  }\n  async deleteRoomsByWorldId(worldId) {\n    return this._runtime.deleteRoomsByWorldId(worldId);\n  }\n  async updateRoom(room) {\n    return this._runtime.updateRoom(room);\n  }\n  async getRoomsForParticipant(entityId) {\n    return this._runtime.getRoomsForParticipant(entityId);\n  }\n  async getRoomsForParticipants(userIds) {\n    return this._runtime.getRoomsForParticipants(userIds);\n  }\n  async getRooms(worldId) {\n    return this._runtime.getRooms(worldId);\n  }\n  async getRoomsByWorld(worldId) {\n    return this._runtime.getRoomsByWorld(worldId);\n  }\n  async getParticipantUserState(roomId, entityId) {\n    return this._runtime.getParticipantUserState(roomId, entityId);\n  }\n  async setParticipantUserState(roomId, entityId, state) {\n    return this._runtime.setParticipantUserState(roomId, entityId, state);\n  }\n  async createRelationship(params) {\n    return this._runtime.createRelationship(params);\n  }\n  async updateRelationship(relationship) {\n    return this._runtime.updateRelationship(relationship);\n  }\n  async getRelationship(params) {\n    return this._runtime.getRelationship(params);\n  }\n  async getRelationships(params) {\n    return this._runtime.getRelationships(params);\n  }\n  async getCache(key) {\n    return this._runtime.getCache(key);\n  }\n  async setCache(key, value) {\n    return this._runtime.setCache(key, value);\n  }\n  async deleteCache(key) {\n    return this._runtime.deleteCache(key);\n  }\n  async createTask(task) {\n    return this._runtime.createTask(task);\n  }\n  async getTasks(params) {\n    return this._runtime.getTasks(params);\n  }\n  async getTask(id) {\n    return this._runtime.getTask(id);\n  }\n  async getTasksByName(name) {\n    return this._runtime.getTasksByName(name);\n  }\n  async updateTask(id, task) {\n    return this._runtime.updateTask(id, task);\n  }\n  async deleteTask(id) {\n    return this._runtime.deleteTask(id);\n  }\n  // Event emitter methods\n  on(event, callback) {\n    return this._runtime.on(event, callback);\n  }\n  off(event, callback) {\n    return this._runtime.off(event, callback);\n  }\n  emit(event, data) {\n    return this._runtime.emit(event, data);\n  }\n  async sendControlMessage(params) {\n    return this._runtime.sendControlMessage(params);\n  }\n  /**\n   * Register a message send handler for a specific source\n   * @param source - The source identifier (e.g., 'discord', 'telegram')\n   * @param handler - The handler function to send messages\n   */\n  registerSendHandler(source, handler) {\n    this._runtime.registerSendHandler(source, handler);\n  }\n  /**\n   * Send a message to a specific target\n   * @param target - The target information including source and channel/user ID\n   * @param content - The message content to send\n   */\n  async sendMessageToTarget(target, content) {\n    return this._runtime.sendMessageToTarget(target, content);\n  }\n  async getMemoriesByWorldId(params) {\n    return this._runtime.getMemoriesByWorldId(params);\n  }\n  // Run tracking methods\n  createRunId() {\n    return this._runtime.createRunId();\n  }\n  startRun() {\n    return this._runtime.startRun();\n  }\n  endRun() {\n    return this._runtime.endRun();\n  }\n  getCurrentRunId() {\n    return this._runtime.getCurrentRunId();\n  }\n};\n\n// src/specs/v2/settings.ts\nfunction createSettingFromConfig2(configSetting) {\n  return createSettingFromConfig(configSetting);\n}\nfunction getSalt2() {\n  return getSalt();\n}\nfunction encryptStringValue2(value, salt) {\n  return encryptStringValue(value, salt);\n}\nfunction decryptStringValue2(value, salt) {\n  return decryptStringValue(value, salt);\n}\nfunction saltSettingValue2(setting, salt) {\n  return saltSettingValue(setting, salt);\n}\nfunction unsaltSettingValue2(setting, salt) {\n  return unsaltSettingValue(setting, salt);\n}\nfunction saltWorldSettings2(worldSettings, salt) {\n  return saltWorldSettings(worldSettings, salt);\n}\nfunction unsaltWorldSettings2(worldSettings, salt) {\n  return unsaltWorldSettings(worldSettings, salt);\n}\nasync function updateWorldSettings2(runtime, serverId, worldSettings) {\n  return updateWorldSettings(runtime, serverId, worldSettings);\n}\nasync function getWorldSettings2(runtime, serverId) {\n  return getWorldSettings(runtime, serverId);\n}\nasync function initializeOnboarding2(runtime, world, config) {\n  return initializeOnboarding(runtime, world, config);\n}\nfunction encryptedCharacter2(character) {\n  return encryptedCharacter(character);\n}\nfunction decryptedCharacter2(character, runtime) {\n  return decryptedCharacter(character, runtime);\n}\nfunction encryptObjectValues2(obj, salt) {\n  return encryptObjectValues(obj, salt);\n}\nfunction decryptObjectValues2(obj, salt) {\n  return decryptObjectValues(obj, salt);\n}\n\n// src/specs/v2/utils.ts\nvar composePrompt2 = ({\n  state,\n  template\n}) => {\n  return composePrompt({ state, template });\n};\nvar composePromptFromState2 = ({\n  state,\n  template\n}) => {\n  return composePromptFromState({ state, template });\n};\nvar addHeader2 = (header, body) => {\n  return addHeader(header, body);\n};\nvar formatPosts2 = ({\n  messages,\n  entities,\n  conversationHeader = true\n}) => {\n  return formatPosts({ messages, entities, conversationHeader });\n};\nvar formatMessages2 = ({\n  messages,\n  entities\n}) => {\n  return formatMessages({ messages, entities });\n};\nvar formatTimestamp2 = (messageDate) => {\n  return formatTimestamp(messageDate);\n};\nfunction validateUuid2(value) {\n  return validateUuid(value);\n}\nfunction stringToUuid2(target) {\n  return stringToUuid(target);\n}\nfunction truncateToCompleteSentence2(text, maxLength) {\n  return truncateToCompleteSentence(text, maxLength);\n}\nfunction parseKeyValueXml2(text) {\n  return parseKeyValueXml(text);\n}\nfunction parseJSONObjectFromText2(text) {\n  return parseJSONObjectFromText(text);\n}\nfunction parseBooleanFromText3(text) {\n  return parseBooleanFromText2(text);\n}\nfunction safeReplacer2() {\n  return safeReplacer();\n}\nfunction trimTokens2(text, maxTokens, runtime) {\n  return trimTokens(text, maxTokens, runtime);\n}\n\n// src/specs/v2/services.ts\nvar ServiceBuilder2 = class extends ServiceBuilder {\n  constructor(serviceType) {\n    super(serviceType);\n    this.description = \"\";\n  }\n};\nfunction createService2(serviceType) {\n  return createService(serviceType);\n}\nfunction defineService2(definition) {\n  return createService(definition.serviceType).withDescription(definition.description).withStart(definition.start).withStop(definition.stop || (() => Promise.resolve())).build();\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9kaXN0L2NodW5rLVAzWVRHMjJZLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJNkI7QUFnQkE7QUFNQTtBQUlBO0FBSUE7QUFJQTs7QUFFN0I7QUFDQTtBQUNBLDREQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLHlCQUF5QixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsR0FBRztBQUM1RSw0Q0FBNEMsR0FBRztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrQkFBa0I7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsdUJBQXVCOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0JBQWdCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0JBQWdCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRCQUE0Qjs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q2pJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNvQzs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsT0FBTztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLGdC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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QscUJBQXFCLEdBQUcsYUFBYTtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0JBQWtCO0FBQ2hEO0FBQ0EsaURBQWlELGtCQUFrQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0RBQXNEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUNBLHlCQUF5QixrQkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLFFBQVE7QUFDUixPQUFPO0FBQ1AsUUFBUTtBQUNSLGVBQWU7QUFDZixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsR0FBRztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLGFBQWEsT0FBTyxVQUFVO0FBQ2hELFNBQVMsWUFBWSxPQUFPLFNBQVM7O0FBRXJDO0FBQ0EsRUFBRTtBQUNGLEVBQUU7QUFDRixFQUFFOztBQUVGLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsV0FBVyxHQUFHLGdCQUFnQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsbUNBQW1DO0FBQ2hFLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsVUFBVTtBQUNwQztBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQsTUFBTSxVQUFVLEVBQUU7QUFDbEIsUUFBUTtBQUNSLFNBQVM7QUFDVDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBLDJCQUEyQixVQUFVO0FBQ3JDLDBCQUEwQixVQUFVO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsdUNBQXVDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGdFQUFnRTtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEdBQUc7QUFDaEIsYUFBYSx5QkFBeUI7QUFDdEMsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0RBQXNEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCx5QkFBeUIsaUJBQWlCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtDQUFrQyxpQkFBaUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCx1QkFBdUIsd0NBQXdDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDBCQUEwQixvQkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBa01FIiwic291cmNlcyI6WyIvVXNlcnMvYWRtaW4vRG9jdW1lbnRzL3Byb2plY3RzL3BpZ2d5LXBvdC9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9kaXN0L2NodW5rLVAzWVRHMjJZLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNyZWF0ZVRlbXBsYXRlRnVuY3Rpb24sXG4gIGdldFRlbXBsYXRlVmFsdWVzLFxuICBwcm9jZXNzVGVtcGxhdGVcbn0gZnJvbSBcIi4vY2h1bmstMkhTTDI1SUouanNcIjtcbmltcG9ydCB7XG4gIEFjdGlvblRpbWVsaW5lVHlwZSxcbiAgQ2FjaGVLZXlQcmVmaXgsXG4gIENhY2hlU3RvcmUsXG4gIEdvYWxTdGF0dXMsXG4gIElyeXNEYXRhVHlwZSxcbiAgSXJ5c01lc3NhZ2VUeXBlLFxuICBLbm93bGVkZ2VTY29wZSxcbiAgTG9nZ2luZ0xldmVsLFxuICBNb2RlbENsYXNzLFxuICBNb2RlbFByb3ZpZGVyTmFtZSxcbiAgU2VydmljZSxcbiAgU2VydmljZVR5cGUsXG4gIFRva2VuaXplclR5cGUsXG4gIFRyYW5zY3JpcHRpb25Qcm92aWRlclxufSBmcm9tIFwiLi9jaHVuay1XTzdaM0dFNi5qc1wiO1xuaW1wb3J0IHtcbiAgY29udmVydENvbnRlbnRUb1YxLFxuICBjb252ZXJ0Q29udGVudFRvVjIsXG4gIGZyb21WMkFjdGlvbkV4YW1wbGUsXG4gIHRvVjJBY3Rpb25FeGFtcGxlXG59IGZyb20gXCIuL2NodW5rLVUyQURUTFpZLmpzXCI7XG5pbXBvcnQge1xuICBmcm9tVjJQcm92aWRlcixcbiAgdG9WMlByb3ZpZGVyXG59IGZyb20gXCIuL2NodW5rLUpYMlNSRkhRLmpzXCI7XG5pbXBvcnQge1xuICBmcm9tVjJTdGF0ZSxcbiAgdG9WMlN0YXRlXG59IGZyb20gXCIuL2NodW5rLVlJQlhMRElSLmpzXCI7XG5pbXBvcnQge1xuICBfX2V4cG9ydCxcbiAgX19yZXF1aXJlXG59IGZyb20gXCIuL2NodW5rLVI1VTdYS1ZKLmpzXCI7XG5cbi8vIHNyYy9zcGVjcy92Mi9pbmRleC50c1xudmFyIHYyX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHYyX2V4cG9ydHMsIHtcbiAgQWdlbnRSdW50aW1lOiAoKSA9PiBBZ2VudFJ1bnRpbWUyLFxuICBBZ2VudFN0YXR1czogKCkgPT4gQWdlbnRTdGF0dXMsXG4gIENhY2hlS2V5UHJlZml4OiAoKSA9PiBDYWNoZUtleVByZWZpeDIsXG4gIENoYW5uZWxUeXBlOiAoKSA9PiBDaGFubmVsVHlwZSxcbiAgQ29udGVudFR5cGU6ICgpID0+IENvbnRlbnRUeXBlLFxuICBEYXRhYmFzZUFkYXB0ZXI6ICgpID0+IERhdGFiYXNlQWRhcHRlcixcbiAgRXZlbnRUeXBlOiAoKSA9PiBFdmVudFR5cGUsXG4gIEtub3dsZWRnZVNjb3BlOiAoKSA9PiBLbm93bGVkZ2VTY29wZTIsXG4gIE1lbW9yeVR5cGU6ICgpID0+IE1lbW9yeVR5cGUsXG4gIE1vZGVsVHlwZTogKCkgPT4gTW9kZWxUeXBlLFxuICBQbGF0Zm9ybVByZWZpeDogKCkgPT4gUGxhdGZvcm1QcmVmaXgsXG4gIFJvbGU6ICgpID0+IFJvbGUsXG4gIFNPQ0tFVF9NRVNTQUdFX1RZUEU6ICgpID0+IFNPQ0tFVF9NRVNTQUdFX1RZUEUsXG4gIFNlbWFwaG9yZTogKCkgPT4gU2VtYXBob3JlMixcbiAgU2VydmljZTogKCkgPT4gU2VydmljZTIsXG4gIFNlcnZpY2VCdWlsZGVyOiAoKSA9PiBTZXJ2aWNlQnVpbGRlcjIsXG4gIFNlcnZpY2VUeXBlOiAoKSA9PiBTZXJ2aWNlVHlwZTIsXG4gIFRFRU1vZGU6ICgpID0+IFRFRU1vZGUsXG4gIFRlZVR5cGU6ICgpID0+IFRlZVR5cGUsXG4gIFZFQ1RPUl9ESU1TOiAoKSA9PiBWRUNUT1JfRElNUyxcbiAgYWRkSGVhZGVyOiAoKSA9PiBhZGRIZWFkZXIyLFxuICBhc1VVSUQ6ICgpID0+IGFzVVVJRCxcbiAgYm9vbGVhbkZvb3RlcjogKCkgPT4gYm9vbGVhbkZvb3RlcjIsXG4gIGNvbXBvc2VBY3Rpb25FeGFtcGxlczogKCkgPT4gY29tcG9zZUFjdGlvbkV4YW1wbGVzLFxuICBjb21wb3NlUHJvbXB0OiAoKSA9PiBjb21wb3NlUHJvbXB0MixcbiAgY29tcG9zZVByb21wdEZyb21TdGF0ZTogKCkgPT4gY29tcG9zZVByb21wdEZyb21TdGF0ZTIsXG4gIGNyZWF0ZU1lc3NhZ2VNZW1vcnk6ICgpID0+IGNyZWF0ZU1lc3NhZ2VNZW1vcnksXG4gIGNyZWF0ZVNlcnZpY2U6ICgpID0+IGNyZWF0ZVNlcnZpY2UyLFxuICBjcmVhdGVTZXJ2aWNlRXJyb3I6ICgpID0+IGNyZWF0ZVNlcnZpY2VFcnJvcixcbiAgY3JlYXRlU2V0dGluZ0Zyb21Db25maWc6ICgpID0+IGNyZWF0ZVNldHRpbmdGcm9tQ29uZmlnMixcbiAgY3JlYXRlVW5pcXVlVXVpZDogKCkgPT4gY3JlYXRlVW5pcXVlVXVpZDIsXG4gIGRlY3J5cHRPYmplY3RWYWx1ZXM6ICgpID0+IGRlY3J5cHRPYmplY3RWYWx1ZXMyLFxuICBkZWNyeXB0U2VjcmV0OiAoKSA9PiBkZWNyeXB0U3RyaW5nVmFsdWUyLFxuICBkZWNyeXB0U3RyaW5nVmFsdWU6ICgpID0+IGRlY3J5cHRTdHJpbmdWYWx1ZTIsXG4gIGRlY3J5cHRlZENoYXJhY3RlcjogKCkgPT4gZGVjcnlwdGVkQ2hhcmFjdGVyMixcbiAgZGVmaW5lU2VydmljZTogKCkgPT4gZGVmaW5lU2VydmljZTIsXG4gIGVsaXphTG9nZ2VyOiAoKSA9PiBlbGl6YUxvZ2dlcjIsXG4gIGVuY3J5cHRPYmplY3RWYWx1ZXM6ICgpID0+IGVuY3J5cHRPYmplY3RWYWx1ZXMyLFxuICBlbmNyeXB0U3RyaW5nVmFsdWU6ICgpID0+IGVuY3J5cHRTdHJpbmdWYWx1ZTIsXG4gIGVuY3J5cHRlZENoYXJhY3RlcjogKCkgPT4gZW5jcnlwdGVkQ2hhcmFjdGVyMixcbiAgZmluZEVudGl0eUJ5TmFtZTogKCkgPT4gZmluZEVudGl0eUJ5TmFtZTIsXG4gIGZpbmRXb3JsZHNGb3JPd25lcjogKCkgPT4gZmluZFdvcmxkc0Zvck93bmVyMixcbiAgZm9ybWF0QWN0aW9uTmFtZXM6ICgpID0+IGZvcm1hdEFjdGlvbk5hbWVzLFxuICBmb3JtYXRBY3Rpb25zOiAoKSA9PiBmb3JtYXRBY3Rpb25zLFxuICBmb3JtYXRFbnRpdGllczogKCkgPT4gZm9ybWF0RW50aXRpZXMyLFxuICBmb3JtYXRNZXNzYWdlczogKCkgPT4gZm9ybWF0TWVzc2FnZXMyLFxuICBmb3JtYXRQb3N0czogKCkgPT4gZm9ybWF0UG9zdHMyLFxuICBmb3JtYXRUaW1lc3RhbXA6ICgpID0+IGZvcm1hdFRpbWVzdGFtcDIsXG4gIGdldEVudGl0eURldGFpbHM6ICgpID0+IGdldEVudGl0eURldGFpbHMyLFxuICBnZXRNZW1vcnlUZXh0OiAoKSA9PiBnZXRNZW1vcnlUZXh0LFxuICBnZXRTYWx0OiAoKSA9PiBnZXRTYWx0MixcbiAgZ2V0VHlwZWRTZXJ2aWNlOiAoKSA9PiBnZXRUeXBlZFNlcnZpY2UsXG4gIGdldFVzZXJTZXJ2ZXJSb2xlOiAoKSA9PiBnZXRVc2VyU2VydmVyUm9sZTIsXG4gIGdldFdvcmxkU2V0dGluZ3M6ICgpID0+IGdldFdvcmxkU2V0dGluZ3MyLFxuICBpbWFnZURlc2NyaXB0aW9uVGVtcGxhdGU6ICgpID0+IGltYWdlRGVzY3JpcHRpb25UZW1wbGF0ZTIsXG4gIGluaXRpYWxpemVPbmJvYXJkaW5nOiAoKSA9PiBpbml0aWFsaXplT25ib2FyZGluZzIsXG4gIGlzQ3VzdG9tTWV0YWRhdGE6ICgpID0+IGlzQ3VzdG9tTWV0YWRhdGEsXG4gIGlzRGVzY3JpcHRpb25NZXRhZGF0YTogKCkgPT4gaXNEZXNjcmlwdGlvbk1ldGFkYXRhLFxuICBpc0RvY3VtZW50TWVtb3J5OiAoKSA9PiBpc0RvY3VtZW50TWVtb3J5LFxuICBpc0RvY3VtZW50TWV0YWRhdGE6ICgpID0+IGlzRG9jdW1lbnRNZXRhZGF0YSxcbiAgaXNGcmFnbWVudE1lbW9yeTogKCkgPT4gaXNGcmFnbWVudE1lbW9yeSxcbiAgaXNGcmFnbWVudE1ldGFkYXRhOiAoKSA9PiBpc0ZyYWdtZW50TWV0YWRhdGEsXG4gIGlzTWVzc2FnZU1ldGFkYXRhOiAoKSA9PiBpc01lc3NhZ2VNZXRhZGF0YSxcbiAgbG9nZ2VyOiAoKSA9PiBsb2dnZXIyLFxuICBtZXNzYWdlSGFuZGxlclRlbXBsYXRlOiAoKSA9PiBtZXNzYWdlSGFuZGxlclRlbXBsYXRlMixcbiAgcGFyc2VCb29sZWFuRnJvbVRleHQ6ICgpID0+IHBhcnNlQm9vbGVhbkZyb21UZXh0MyxcbiAgcGFyc2VKU09OT2JqZWN0RnJvbVRleHQ6ICgpID0+IHBhcnNlSlNPTk9iamVjdEZyb21UZXh0MixcbiAgcGFyc2VLZXlWYWx1ZVhtbDogKCkgPT4gcGFyc2VLZXlWYWx1ZVhtbDIsXG4gIHBvc3RDcmVhdGlvblRlbXBsYXRlOiAoKSA9PiBwb3N0Q3JlYXRpb25UZW1wbGF0ZTIsXG4gIHNhZmVSZXBsYWNlcjogKCkgPT4gc2FmZVJlcGxhY2VyMixcbiAgc2FsdFNldHRpbmdWYWx1ZTogKCkgPT4gc2FsdFNldHRpbmdWYWx1ZTIsXG4gIHNhbHRXb3JsZFNldHRpbmdzOiAoKSA9PiBzYWx0V29ybGRTZXR0aW5nczIsXG4gIHNob3VsZFJlc3BvbmRUZW1wbGF0ZTogKCkgPT4gc2hvdWxkUmVzcG9uZFRlbXBsYXRlMixcbiAgc3RyaW5nVG9VdWlkOiAoKSA9PiBzdHJpbmdUb1V1aWQyLFxuICB0cmltVG9rZW5zOiAoKSA9PiB0cmltVG9rZW5zMixcbiAgdHJ1bmNhdGVUb0NvbXBsZXRlU2VudGVuY2U6ICgpID0+IHRydW5jYXRlVG9Db21wbGV0ZVNlbnRlbmNlMixcbiAgdW5zYWx0U2V0dGluZ1ZhbHVlOiAoKSA9PiB1bnNhbHRTZXR0aW5nVmFsdWUyLFxuICB1bnNhbHRXb3JsZFNldHRpbmdzOiAoKSA9PiB1bnNhbHRXb3JsZFNldHRpbmdzMixcbiAgdXBkYXRlV29ybGRTZXR0aW5nczogKCkgPT4gdXBkYXRlV29ybGRTZXR0aW5nczIsXG4gIHZhbGlkYXRlVXVpZDogKCkgPT4gdmFsaWRhdGVVdWlkMlxufSk7XG5cbi8vIHNyYy9zcGVjcy92Mi90eXBlcy50c1xuZnVuY3Rpb24gYXNVVUlEKGlkKSB7XG4gIGlmICghaWQgfHwgIS9eWzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzAtOWEtZl17NH0tWzAtOWEtZl17NH0tWzAtOWEtZl17MTJ9JC9pLnRlc3QoaWQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIFVVSUQgZm9ybWF0OiAke2lkfWApO1xuICB9XG4gIHJldHVybiBpZDtcbn1cbnZhciBNb2RlbFR5cGUgPSB7XG4gIFNNQUxMOiBcIlRFWFRfU01BTExcIixcbiAgLy8ga2VwdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgTUVESVVNOiBcIlRFWFRfTEFSR0VcIixcbiAgLy8ga2VwdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgTEFSR0U6IFwiVEVYVF9MQVJHRVwiLFxuICAvLyBrZXB0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICBURVhUX1NNQUxMOiBcIlRFWFRfU01BTExcIixcbiAgVEVYVF9MQVJHRTogXCJURVhUX0xBUkdFXCIsXG4gIFRFWFRfRU1CRURESU5HOiBcIlRFWFRfRU1CRURESU5HXCIsXG4gIFRFWFRfVE9LRU5JWkVSX0VOQ09ERTogXCJURVhUX1RPS0VOSVpFUl9FTkNPREVcIixcbiAgVEVYVF9UT0tFTklaRVJfREVDT0RFOiBcIlRFWFRfVE9LRU5JWkVSX0RFQ09ERVwiLFxuICBURVhUX1JFQVNPTklOR19TTUFMTDogXCJSRUFTT05JTkdfU01BTExcIixcbiAgVEVYVF9SRUFTT05JTkdfTEFSR0U6IFwiUkVBU09OSU5HX0xBUkdFXCIsXG4gIFRFWFRfQ09NUExFVElPTjogXCJURVhUX0NPTVBMRVRJT05cIixcbiAgSU1BR0U6IFwiSU1BR0VcIixcbiAgSU1BR0VfREVTQ1JJUFRJT046IFwiSU1BR0VfREVTQ1JJUFRJT05cIixcbiAgVFJBTlNDUklQVElPTjogXCJUUkFOU0NSSVBUSU9OXCIsXG4gIFRFWFRfVE9fU1BFRUNIOiBcIlRFWFRfVE9fU1BFRUNIXCIsXG4gIEFVRElPOiBcIkFVRElPXCIsXG4gIFZJREVPOiBcIlZJREVPXCIsXG4gIE9CSkVDVF9TTUFMTDogXCJPQkpFQ1RfU01BTExcIixcbiAgT0JKRUNUX0xBUkdFOiBcIk9CSkVDVF9MQVJHRVwiXG59O1xudmFyIFNlcnZpY2VUeXBlMiA9IHtcbiAgVFJBTlNDUklQVElPTjogXCJ0cmFuc2NyaXB0aW9uXCIsXG4gIFZJREVPOiBcInZpZGVvXCIsXG4gIEJST1dTRVI6IFwiYnJvd3NlclwiLFxuICBQREY6IFwicGRmXCIsXG4gIFJFTU9URV9GSUxFUzogXCJhd3NfczNcIixcbiAgV0VCX1NFQVJDSDogXCJ3ZWJfc2VhcmNoXCIsXG4gIEVNQUlMOiBcImVtYWlsXCIsXG4gIFRFRTogXCJ0ZWVcIixcbiAgVEFTSzogXCJ0YXNrXCJcbn07XG52YXIgTWVtb3J5VHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKE1lbW9yeVR5cGUzKSA9PiB7XG4gIE1lbW9yeVR5cGUzW1wiRE9DVU1FTlRcIl0gPSBcImRvY3VtZW50XCI7XG4gIE1lbW9yeVR5cGUzW1wiRlJBR01FTlRcIl0gPSBcImZyYWdtZW50XCI7XG4gIE1lbW9yeVR5cGUzW1wiTUVTU0FHRVwiXSA9IFwibWVzc2FnZVwiO1xuICBNZW1vcnlUeXBlM1tcIkRFU0NSSVBUSU9OXCJdID0gXCJkZXNjcmlwdGlvblwiO1xuICBNZW1vcnlUeXBlM1tcIkNVU1RPTVwiXSA9IFwiY3VzdG9tXCI7XG4gIHJldHVybiBNZW1vcnlUeXBlMztcbn0pKE1lbW9yeVR5cGUgfHwge30pO1xudmFyIENvbnRlbnRUeXBlID0gLyogQF9fUFVSRV9fICovICgoQ29udGVudFR5cGUzKSA9PiB7XG4gIENvbnRlbnRUeXBlM1tcIklNQUdFXCJdID0gXCJpbWFnZVwiO1xuICBDb250ZW50VHlwZTNbXCJWSURFT1wiXSA9IFwidmlkZW9cIjtcbiAgQ29udGVudFR5cGUzW1wiQVVESU9cIl0gPSBcImF1ZGlvXCI7XG4gIENvbnRlbnRUeXBlM1tcIkRPQ1VNRU5UXCJdID0gXCJkb2N1bWVudFwiO1xuICBDb250ZW50VHlwZTNbXCJMSU5LXCJdID0gXCJsaW5rXCI7XG4gIHJldHVybiBDb250ZW50VHlwZTM7XG59KShDb250ZW50VHlwZSB8fCB7fSk7XG52YXIgQ2hhbm5lbFR5cGUgPSAvKiBAX19QVVJFX18gKi8gKChDaGFubmVsVHlwZTQpID0+IHtcbiAgQ2hhbm5lbFR5cGU0W1wiU0VMRlwiXSA9IFwiU0VMRlwiO1xuICBDaGFubmVsVHlwZTRbXCJETVwiXSA9IFwiRE1cIjtcbiAgQ2hhbm5lbFR5cGU0W1wiR1JPVVBcIl0gPSBcIkdST1VQXCI7XG4gIENoYW5uZWxUeXBlNFtcIlZPSUNFX0RNXCJdID0gXCJWT0lDRV9ETVwiO1xuICBDaGFubmVsVHlwZTRbXCJWT0lDRV9HUk9VUFwiXSA9IFwiVk9JQ0VfR1JPVVBcIjtcbiAgQ2hhbm5lbFR5cGU0W1wiRkVFRFwiXSA9IFwiRkVFRFwiO1xuICBDaGFubmVsVHlwZTRbXCJUSFJFQURcIl0gPSBcIlRIUkVBRFwiO1xuICBDaGFubmVsVHlwZTRbXCJXT1JMRFwiXSA9IFwiV09STERcIjtcbiAgQ2hhbm5lbFR5cGU0W1wiRk9SVU1cIl0gPSBcIkZPUlVNXCI7XG4gIENoYW5uZWxUeXBlNFtcIkFQSVwiXSA9IFwiQVBJXCI7XG4gIHJldHVybiBDaGFubmVsVHlwZTQ7XG59KShDaGFubmVsVHlwZSB8fCB7fSk7XG52YXIgQWdlbnRTdGF0dXMgPSAvKiBAX19QVVJFX18gKi8gKChBZ2VudFN0YXR1czMpID0+IHtcbiAgQWdlbnRTdGF0dXMzW1wiQUNUSVZFXCJdID0gXCJhY3RpdmVcIjtcbiAgQWdlbnRTdGF0dXMzW1wiSU5BQ1RJVkVcIl0gPSBcImluYWN0aXZlXCI7XG4gIHJldHVybiBBZ2VudFN0YXR1czM7XG59KShBZ2VudFN0YXR1cyB8fCB7fSk7XG52YXIgS25vd2xlZGdlU2NvcGUyID0gLyogQF9fUFVSRV9fICovICgoS25vd2xlZGdlU2NvcGU0KSA9PiB7XG4gIEtub3dsZWRnZVNjb3BlNFtcIlNIQVJFRFwiXSA9IFwic2hhcmVkXCI7XG4gIEtub3dsZWRnZVNjb3BlNFtcIlBSSVZBVEVcIl0gPSBcInByaXZhdGVcIjtcbiAgcmV0dXJuIEtub3dsZWRnZVNjb3BlNDtcbn0pKEtub3dsZWRnZVNjb3BlMiB8fCB7fSk7XG52YXIgQ2FjaGVLZXlQcmVmaXgyID0gLyogQF9fUFVSRV9fICovICgoQ2FjaGVLZXlQcmVmaXg0KSA9PiB7XG4gIENhY2hlS2V5UHJlZml4NFtcIktOT1dMRURHRVwiXSA9IFwia25vd2xlZGdlXCI7XG4gIHJldHVybiBDYWNoZUtleVByZWZpeDQ7XG59KShDYWNoZUtleVByZWZpeDIgfHwge30pO1xudmFyIFRFRU1vZGUgPSAvKiBAX19QVVJFX18gKi8gKChURUVNb2RlMykgPT4ge1xuICBURUVNb2RlM1tcIk9GRlwiXSA9IFwiT0ZGXCI7XG4gIFRFRU1vZGUzW1wiTE9DQUxcIl0gPSBcIkxPQ0FMXCI7XG4gIFRFRU1vZGUzW1wiRE9DS0VSXCJdID0gXCJET0NLRVJcIjtcbiAgVEVFTW9kZTNbXCJQUk9EVUNUSU9OXCJdID0gXCJQUk9EVUNUSU9OXCI7XG4gIHJldHVybiBURUVNb2RlMztcbn0pKFRFRU1vZGUgfHwge30pO1xudmFyIFRlZVR5cGUgPSAvKiBAX19QVVJFX18gKi8gKChUZWVUeXBlMykgPT4ge1xuICBUZWVUeXBlM1tcIlREWF9EU1RBQ0tcIl0gPSBcInRkeF9kc3RhY2tcIjtcbiAgcmV0dXJuIFRlZVR5cGUzO1xufSkoVGVlVHlwZSB8fCB7fSk7XG52YXIgUm9sZSA9IC8qIEBfX1BVUkVfXyAqLyAoKFJvbGUzKSA9PiB7XG4gIFJvbGUzW1wiT1dORVJcIl0gPSBcIk9XTkVSXCI7XG4gIFJvbGUzW1wiQURNSU5cIl0gPSBcIkFETUlOXCI7XG4gIFJvbGUzW1wiTk9ORVwiXSA9IFwiTk9ORVwiO1xuICByZXR1cm4gUm9sZTM7XG59KShSb2xlIHx8IHt9KTtcbnZhciBFdmVudFR5cGUgPSAvKiBAX19QVVJFX18gKi8gKChFdmVudFR5cGUzKSA9PiB7XG4gIEV2ZW50VHlwZTNbXCJXT1JMRF9KT0lORURcIl0gPSBcIldPUkxEX0pPSU5FRFwiO1xuICBFdmVudFR5cGUzW1wiV09STERfQ09OTkVDVEVEXCJdID0gXCJXT1JMRF9DT05ORUNURURcIjtcbiAgRXZlbnRUeXBlM1tcIldPUkxEX0xFRlRcIl0gPSBcIldPUkxEX0xFRlRcIjtcbiAgRXZlbnRUeXBlM1tcIkVOVElUWV9KT0lORURcIl0gPSBcIkVOVElUWV9KT0lORURcIjtcbiAgRXZlbnRUeXBlM1tcIkVOVElUWV9MRUZUXCJdID0gXCJFTlRJVFlfTEVGVFwiO1xuICBFdmVudFR5cGUzW1wiRU5USVRZX1VQREFURURcIl0gPSBcIkVOVElUWV9VUERBVEVEXCI7XG4gIEV2ZW50VHlwZTNbXCJST09NX0pPSU5FRFwiXSA9IFwiUk9PTV9KT0lORURcIjtcbiAgRXZlbnRUeXBlM1tcIlJPT01fTEVGVFwiXSA9IFwiUk9PTV9MRUZUXCI7XG4gIEV2ZW50VHlwZTNbXCJNRVNTQUdFX1JFQ0VJVkVEXCJdID0gXCJNRVNTQUdFX1JFQ0VJVkVEXCI7XG4gIEV2ZW50VHlwZTNbXCJNRVNTQUdFX1NFTlRcIl0gPSBcIk1FU1NBR0VfU0VOVFwiO1xuICBFdmVudFR5cGUzW1wiTUVTU0FHRV9ERUxFVEVEXCJdID0gXCJNRVNTQUdFX0RFTEVURURcIjtcbiAgRXZlbnRUeXBlM1tcIkNIQU5ORUxfQ0xFQVJFRFwiXSA9IFwiQ0hBTk5FTF9DTEVBUkVEXCI7XG4gIEV2ZW50VHlwZTNbXCJWT0lDRV9NRVNTQUdFX1JFQ0VJVkVEXCJdID0gXCJWT0lDRV9NRVNTQUdFX1JFQ0VJVkVEXCI7XG4gIEV2ZW50VHlwZTNbXCJWT0lDRV9NRVNTQUdFX1NFTlRcIl0gPSBcIlZPSUNFX01FU1NBR0VfU0VOVFwiO1xuICBFdmVudFR5cGUzW1wiUkVBQ1RJT05fUkVDRUlWRURcIl0gPSBcIlJFQUNUSU9OX1JFQ0VJVkVEXCI7XG4gIEV2ZW50VHlwZTNbXCJQT1NUX0dFTkVSQVRFRFwiXSA9IFwiUE9TVF9HRU5FUkFURURcIjtcbiAgRXZlbnRUeXBlM1tcIklOVEVSQUNUSU9OX1JFQ0VJVkVEXCJdID0gXCJJTlRFUkFDVElPTl9SRUNFSVZFRFwiO1xuICBFdmVudFR5cGUzW1wiUlVOX1NUQVJURURcIl0gPSBcIlJVTl9TVEFSVEVEXCI7XG4gIEV2ZW50VHlwZTNbXCJSVU5fRU5ERURcIl0gPSBcIlJVTl9FTkRFRFwiO1xuICBFdmVudFR5cGUzW1wiUlVOX1RJTUVPVVRcIl0gPSBcIlJVTl9USU1FT1VUXCI7XG4gIEV2ZW50VHlwZTNbXCJBQ1RJT05fU1RBUlRFRFwiXSA9IFwiQUNUSU9OX1NUQVJURURcIjtcbiAgRXZlbnRUeXBlM1tcIkFDVElPTl9DT01QTEVURURcIl0gPSBcIkFDVElPTl9DT01QTEVURURcIjtcbiAgRXZlbnRUeXBlM1tcIkVWQUxVQVRPUl9TVEFSVEVEXCJdID0gXCJFVkFMVUFUT1JfU1RBUlRFRFwiO1xuICBFdmVudFR5cGUzW1wiRVZBTFVBVE9SX0NPTVBMRVRFRFwiXSA9IFwiRVZBTFVBVE9SX0NPTVBMRVRFRFwiO1xuICBFdmVudFR5cGUzW1wiTU9ERUxfVVNFRFwiXSA9IFwiTU9ERUxfVVNFRFwiO1xuICByZXR1cm4gRXZlbnRUeXBlMztcbn0pKEV2ZW50VHlwZSB8fCB7fSk7XG52YXIgUGxhdGZvcm1QcmVmaXggPSAvKiBAX19QVVJFX18gKi8gKChQbGF0Zm9ybVByZWZpeDMpID0+IHtcbiAgUGxhdGZvcm1QcmVmaXgzW1wiRElTQ09SRFwiXSA9IFwiRElTQ09SRFwiO1xuICBQbGF0Zm9ybVByZWZpeDNbXCJURUxFR1JBTVwiXSA9IFwiVEVMRUdSQU1cIjtcbiAgUGxhdGZvcm1QcmVmaXgzW1wiVFdJVFRFUlwiXSA9IFwiVFdJVFRFUlwiO1xuICByZXR1cm4gUGxhdGZvcm1QcmVmaXgzO1xufSkoUGxhdGZvcm1QcmVmaXggfHwge30pO1xudmFyIFNPQ0tFVF9NRVNTQUdFX1RZUEUgPSAvKiBAX19QVVJFX18gKi8gKChTT0NLRVRfTUVTU0FHRV9UWVBFMykgPT4ge1xuICBTT0NLRVRfTUVTU0FHRV9UWVBFM1tTT0NLRVRfTUVTU0FHRV9UWVBFM1tcIlJPT01fSk9JTklOR1wiXSA9IDFdID0gXCJST09NX0pPSU5JTkdcIjtcbiAgU09DS0VUX01FU1NBR0VfVFlQRTNbU09DS0VUX01FU1NBR0VfVFlQRTNbXCJTRU5EX01FU1NBR0VcIl0gPSAyXSA9IFwiU0VORF9NRVNTQUdFXCI7XG4gIFNPQ0tFVF9NRVNTQUdFX1RZUEUzW1NPQ0tFVF9NRVNTQUdFX1RZUEUzW1wiTUVTU0FHRVwiXSA9IDNdID0gXCJNRVNTQUdFXCI7XG4gIFNPQ0tFVF9NRVNTQUdFX1RZUEUzW1NPQ0tFVF9NRVNTQUdFX1RZUEUzW1wiQUNLXCJdID0gNF0gPSBcIkFDS1wiO1xuICBTT0NLRVRfTUVTU0FHRV9UWVBFM1tTT0NLRVRfTUVTU0FHRV9UWVBFM1tcIlRISU5LSU5HXCJdID0gNV0gPSBcIlRISU5LSU5HXCI7XG4gIFNPQ0tFVF9NRVNTQUdFX1RZUEUzW1NPQ0tFVF9NRVNTQUdFX1RZUEUzW1wiQ09OVFJPTFwiXSA9IDZdID0gXCJDT05UUk9MXCI7XG4gIHJldHVybiBTT0NLRVRfTUVTU0FHRV9UWVBFMztcbn0pKFNPQ0tFVF9NRVNTQUdFX1RZUEUgfHwge30pO1xuZnVuY3Rpb24gY3JlYXRlTWVzc2FnZU1lbW9yeShwYXJhbXMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5wYXJhbXMsXG4gICAgY3JlYXRlZEF0OiBEYXRlLm5vdygpLFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICB0eXBlOiBcIm1lc3NhZ2VcIiAvKiBNRVNTQUdFICovLFxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgc2NvcGU6IHBhcmFtcy5hZ2VudElkID8gXCJwcml2YXRlXCIgOiBcInNoYXJlZFwiXG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0VHlwZWRTZXJ2aWNlKHJ1bnRpbWUsIHNlcnZpY2VUeXBlKSB7XG4gIHJldHVybiBydW50aW1lLmdldFNlcnZpY2Uoc2VydmljZVR5cGUpO1xufVxuZnVuY3Rpb24gaXNEb2N1bWVudE1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gIHJldHVybiBtZXRhZGF0YS50eXBlID09PSBcImRvY3VtZW50XCIgLyogRE9DVU1FTlQgKi87XG59XG5mdW5jdGlvbiBpc0ZyYWdtZW50TWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgcmV0dXJuIG1ldGFkYXRhLnR5cGUgPT09IFwiZnJhZ21lbnRcIiAvKiBGUkFHTUVOVCAqLztcbn1cbmZ1bmN0aW9uIGlzTWVzc2FnZU1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gIHJldHVybiBtZXRhZGF0YS50eXBlID09PSBcIm1lc3NhZ2VcIiAvKiBNRVNTQUdFICovO1xufVxuZnVuY3Rpb24gaXNEZXNjcmlwdGlvbk1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gIHJldHVybiBtZXRhZGF0YS50eXBlID09PSBcImRlc2NyaXB0aW9uXCIgLyogREVTQ1JJUFRJT04gKi87XG59XG5mdW5jdGlvbiBpc0N1c3RvbU1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gIHJldHVybiBtZXRhZGF0YS50eXBlICE9PSBcImRvY3VtZW50XCIgLyogRE9DVU1FTlQgKi8gJiYgbWV0YWRhdGEudHlwZSAhPT0gXCJmcmFnbWVudFwiIC8qIEZSQUdNRU5UICovICYmIG1ldGFkYXRhLnR5cGUgIT09IFwibWVzc2FnZVwiIC8qIE1FU1NBR0UgKi8gJiYgbWV0YWRhdGEudHlwZSAhPT0gXCJkZXNjcmlwdGlvblwiIC8qIERFU0NSSVBUSU9OICovO1xufVxuZnVuY3Rpb24gaXNEb2N1bWVudE1lbW9yeShtZW1vcnkpIHtcbiAgcmV0dXJuIG1lbW9yeS5tZXRhZGF0YT8udHlwZSA9PT0gXCJkb2N1bWVudFwiIC8qIERPQ1VNRU5UICovO1xufVxuZnVuY3Rpb24gaXNGcmFnbWVudE1lbW9yeShtZW1vcnkpIHtcbiAgcmV0dXJuIG1lbW9yeS5tZXRhZGF0YT8udHlwZSA9PT0gXCJmcmFnbWVudFwiIC8qIEZSQUdNRU5UICovO1xufVxuZnVuY3Rpb24gZ2V0TWVtb3J5VGV4dChtZW1vcnksIGRlZmF1bHRWYWx1ZSA9IFwiXCIpIHtcbiAgcmV0dXJuIG1lbW9yeS5jb250ZW50LnRleHQgPz8gZGVmYXVsdFZhbHVlO1xufVxuZnVuY3Rpb24gY3JlYXRlU2VydmljZUVycm9yKGVycm9yLCBjb2RlID0gXCJVTktOT1dOX0VSUk9SXCIpIHtcbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29kZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICBjYXVzZTogZXJyb3JcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgY29kZSxcbiAgICBtZXNzYWdlOiBTdHJpbmcoZXJyb3IpXG4gIH07XG59XG52YXIgVkVDVE9SX0RJTVMgPSB7XG4gIFNNQUxMOiAzODQsXG4gIE1FRElVTTogNTEyLFxuICBMQVJHRTogNzY4LFxuICBYTDogMTAyNCxcbiAgWFhMOiAxNTM2LFxuICBYWFhMOiAzMDcyXG59O1xudmFyIFNlcnZpY2UyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihydW50aW1lKSB7XG4gICAgaWYgKHJ1bnRpbWUpIHtcbiAgICAgIHRoaXMucnVudGltZSA9IHJ1bnRpbWU7XG4gICAgfVxuICB9XG4gIC8qKiBTdGFydCBzZXJ2aWNlIGNvbm5lY3Rpb24gKi9cbiAgc3RhdGljIGFzeW5jIHN0YXJ0KF9ydW50aW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpO1xuICB9XG4gIC8qKiBTdG9wIHNlcnZpY2UgY29ubmVjdGlvbiAqL1xuICBzdGF0aWMgYXN5bmMgc3RvcChfcnVudGltZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL3NwZWNzL3YyL2FjdGlvbnMudHNcbnZhciBjb21wb3NlQWN0aW9uRXhhbXBsZXMgPSAoYWN0aW9uc0RhdGEsIGNvdW50KSA9PiB7XG4gIGNvbnN0IGFjdGlvbkV4YW1wbGVzID0gW107XG4gIGNvbnN0IG5hbWVzMyA9IFtcIkFsaWNlXCIsIFwiQm9iXCIsIFwiQ2hhcmxpZVwiLCBcIkRhdmlkXCIsIFwiRXZlXCIsIFwiRnJhbmtcIiwgXCJHcmFjZVwiLCBcIkhlaWRpXCJdO1xuICBjb25zdCB1c2VkTmFtZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBjb25zdCBnZXRSYW5kb21OYW1lID0gKCkgPT4ge1xuICAgIGNvbnN0IGF2YWlsYWJsZU5hbWVzID0gbmFtZXMzLmZpbHRlcigobmFtZTIpID0+ICF1c2VkTmFtZXMuaGFzKG5hbWUyKSk7XG4gICAgaWYgKGF2YWlsYWJsZU5hbWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdXNlZE5hbWVzLmNsZWFyKCk7XG4gICAgICByZXR1cm4gbmFtZXMzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG5hbWVzMy5sZW5ndGgpXTtcbiAgICB9XG4gICAgY29uc3QgbmFtZSA9IGF2YWlsYWJsZU5hbWVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGF2YWlsYWJsZU5hbWVzLmxlbmd0aCldO1xuICAgIHVzZWROYW1lcy5hZGQobmFtZSk7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH07XG4gIGNvbnN0IGFsbEV4YW1wbGVzID0gW107XG4gIGZvciAoY29uc3QgYWN0aW9uIG9mIGFjdGlvbnNEYXRhKSB7XG4gICAgaWYgKGFjdGlvbi5leGFtcGxlcykge1xuICAgICAgZm9yIChjb25zdCBleGFtcGxlIG9mIGFjdGlvbi5leGFtcGxlcykge1xuICAgICAgICBhbGxFeGFtcGxlcy5wdXNoKHsgYWN0aW9uLCBleGFtcGxlIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50ICYmIGFsbEV4YW1wbGVzLmxlbmd0aCA+IDA7IGkrKykge1xuICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWxsRXhhbXBsZXMubGVuZ3RoKTtcbiAgICBjb25zdCB7IGV4YW1wbGUgfSA9IGFsbEV4YW1wbGVzW3JhbmRvbUluZGV4XTtcbiAgICBjb25zdCByYW5kb21OYW1lcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDUgfSwgKCkgPT4gZ2V0UmFuZG9tTmFtZSgpKTtcbiAgICBjb25zdCBmb3JtYXR0ZWRFeGFtcGxlID0gZXhhbXBsZS5tYXAoKG1zZykgPT4ge1xuICAgICAgbGV0IHRleHQgPSBtc2cuY29udGVudC50ZXh0IHx8IFwiXCI7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJhbmRvbU5hbWVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UobmV3IFJlZ0V4cChge3tuYW1lJHtqICsgMX19fWAsIFwiZ1wiKSwgcmFuZG9tTmFtZXNbal0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGAke21zZy5uYW1lfTogJHt0ZXh0fWA7XG4gICAgfSkuam9pbihcIlxcblwiKTtcbiAgICBhY3Rpb25FeGFtcGxlcy5wdXNoKGZvcm1hdHRlZEV4YW1wbGUpO1xuICB9XG4gIHJldHVybiBhY3Rpb25FeGFtcGxlcy5qb2luKFwiXFxuXFxuXCIpO1xufTtcbmZ1bmN0aW9uIGZvcm1hdEFjdGlvbk5hbWVzKGFjdGlvbnMpIHtcbiAgcmV0dXJuIGFjdGlvbnMubWFwKChhY3Rpb24pID0+IGFjdGlvbi5uYW1lKS5qb2luKFwiLCBcIik7XG59XG5mdW5jdGlvbiBmb3JtYXRBY3Rpb25zKGFjdGlvbnMpIHtcbiAgcmV0dXJuIGFjdGlvbnMubWFwKChhY3Rpb24pID0+IGAke2FjdGlvbi5uYW1lfTogJHthY3Rpb24uZGVzY3JpcHRpb259YCkuam9pbihcIixcXG5cIik7XG59XG5cbi8vIHNyYy9zcGVjcy92Mi9kYXRhYmFzZS50c1xudmFyIERhdGFiYXNlQWRhcHRlciA9IGNsYXNzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRGF0YWJhc2VBZGFwdGVyIGluc3RhbmNlLlxuICAgKiBAcGFyYW0gZGIgVGhlIGRhdGFiYXNlIGluc3RhbmNlIHRvIHVzZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgdGhpcy5kYiA9IGRiO1xuICB9XG59O1xuXG4vLyBzcmMvdHlwZXMvcHJpbWl0aXZlcy50c1xuZnVuY3Rpb24gYXNVVUlEMihpZCkge1xuICBpZiAoIWlkIHx8ICEvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVswLTlhLWZdezR9LVswLTlhLWZdezR9LVswLTlhLWZdezEyfSQvaS50ZXN0KGlkKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBVVUlEIGZvcm1hdDogJHtpZH1gKTtcbiAgfVxuICByZXR1cm4gaWQ7XG59XG52YXIgQ29udGVudFR5cGUyID0gLyogQF9fUFVSRV9fICovICgoQ29udGVudFR5cGUzKSA9PiB7XG4gIENvbnRlbnRUeXBlM1tcIklNQUdFXCJdID0gXCJpbWFnZVwiO1xuICBDb250ZW50VHlwZTNbXCJWSURFT1wiXSA9IFwidmlkZW9cIjtcbiAgQ29udGVudFR5cGUzW1wiQVVESU9cIl0gPSBcImF1ZGlvXCI7XG4gIENvbnRlbnRUeXBlM1tcIkRPQ1VNRU5UXCJdID0gXCJkb2N1bWVudFwiO1xuICBDb250ZW50VHlwZTNbXCJMSU5LXCJdID0gXCJsaW5rXCI7XG4gIHJldHVybiBDb250ZW50VHlwZTM7XG59KShDb250ZW50VHlwZTIgfHwge30pO1xuXG4vLyBzcmMvdHlwZXMvbWVtb3J5LnRzXG52YXIgTWVtb3J5VHlwZTIgPSAvKiBAX19QVVJFX18gKi8gKChNZW1vcnlUeXBlMykgPT4ge1xuICBNZW1vcnlUeXBlM1tcIkRPQ1VNRU5UXCJdID0gXCJkb2N1bWVudFwiO1xuICBNZW1vcnlUeXBlM1tcIkZSQUdNRU5UXCJdID0gXCJmcmFnbWVudFwiO1xuICBNZW1vcnlUeXBlM1tcIk1FU1NBR0VcIl0gPSBcIm1lc3NhZ2VcIjtcbiAgTWVtb3J5VHlwZTNbXCJERVNDUklQVElPTlwiXSA9IFwiZGVzY3JpcHRpb25cIjtcbiAgTWVtb3J5VHlwZTNbXCJDVVNUT01cIl0gPSBcImN1c3RvbVwiO1xuICByZXR1cm4gTWVtb3J5VHlwZTM7XG59KShNZW1vcnlUeXBlMiB8fCB7fSk7XG5mdW5jdGlvbiBjcmVhdGVNZXNzYWdlTWVtb3J5MihwYXJhbXMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5wYXJhbXMsXG4gICAgY3JlYXRlZEF0OiBEYXRlLm5vdygpLFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICB0eXBlOiBcIm1lc3NhZ2VcIiAvKiBNRVNTQUdFICovLFxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgc2NvcGU6IHBhcmFtcy5hZ2VudElkID8gXCJwcml2YXRlXCIgOiBcInNoYXJlZFwiXG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaXNEb2N1bWVudE1ldGFkYXRhMihtZXRhZGF0YSkge1xuICByZXR1cm4gbWV0YWRhdGEudHlwZSA9PT0gXCJkb2N1bWVudFwiIC8qIERPQ1VNRU5UICovO1xufVxuZnVuY3Rpb24gaXNGcmFnbWVudE1ldGFkYXRhMihtZXRhZGF0YSkge1xuICByZXR1cm4gbWV0YWRhdGEudHlwZSA9PT0gXCJmcmFnbWVudFwiIC8qIEZSQUdNRU5UICovO1xufVxuZnVuY3Rpb24gaXNNZXNzYWdlTWV0YWRhdGEyKG1ldGFkYXRhKSB7XG4gIHJldHVybiBtZXRhZGF0YS50eXBlID09PSBcIm1lc3NhZ2VcIiAvKiBNRVNTQUdFICovO1xufVxuZnVuY3Rpb24gaXNEZXNjcmlwdGlvbk1ldGFkYXRhMihtZXRhZGF0YSkge1xuICByZXR1cm4gbWV0YWRhdGEudHlwZSA9PT0gXCJkZXNjcmlwdGlvblwiIC8qIERFU0NSSVBUSU9OICovO1xufVxuZnVuY3Rpb24gaXNDdXN0b21NZXRhZGF0YTIobWV0YWRhdGEpIHtcbiAgcmV0dXJuIG1ldGFkYXRhLnR5cGUgIT09IFwiZG9jdW1lbnRcIiAvKiBET0NVTUVOVCAqLyAmJiBtZXRhZGF0YS50eXBlICE9PSBcImZyYWdtZW50XCIgLyogRlJBR01FTlQgKi8gJiYgbWV0YWRhdGEudHlwZSAhPT0gXCJtZXNzYWdlXCIgLyogTUVTU0FHRSAqLyAmJiBtZXRhZGF0YS50eXBlICE9PSBcImRlc2NyaXB0aW9uXCIgLyogREVTQ1JJUFRJT04gKi87XG59XG5mdW5jdGlvbiBpc0RvY3VtZW50TWVtb3J5MihtZW1vcnkpIHtcbiAgcmV0dXJuIG1lbW9yeS5tZXRhZGF0YT8udHlwZSA9PT0gXCJkb2N1bWVudFwiIC8qIERPQ1VNRU5UICovO1xufVxuZnVuY3Rpb24gaXNGcmFnbWVudE1lbW9yeTIobWVtb3J5KSB7XG4gIHJldHVybiBtZW1vcnkubWV0YWRhdGE/LnR5cGUgPT09IFwiZnJhZ21lbnRcIiAvKiBGUkFHTUVOVCAqLztcbn1cbmZ1bmN0aW9uIGdldE1lbW9yeVRleHQyKG1lbW9yeSwgZGVmYXVsdFZhbHVlID0gXCJcIikge1xuICByZXR1cm4gbWVtb3J5LmNvbnRlbnQudGV4dCA/PyBkZWZhdWx0VmFsdWU7XG59XG5cbi8vIHNyYy90eXBlcy9rbm93bGVkZ2UudHNcbnZhciBLbm93bGVkZ2VTY29wZTMgPSAvKiBAX19QVVJFX18gKi8gKChLbm93bGVkZ2VTY29wZTQpID0+IHtcbiAgS25vd2xlZGdlU2NvcGU0W1wiU0hBUkVEXCJdID0gXCJzaGFyZWRcIjtcbiAgS25vd2xlZGdlU2NvcGU0W1wiUFJJVkFURVwiXSA9IFwicHJpdmF0ZVwiO1xuICByZXR1cm4gS25vd2xlZGdlU2NvcGU0O1xufSkoS25vd2xlZGdlU2NvcGUzIHx8IHt9KTtcbnZhciBDYWNoZUtleVByZWZpeDMgPSAvKiBAX19QVVJFX18gKi8gKChDYWNoZUtleVByZWZpeDQpID0+IHtcbiAgQ2FjaGVLZXlQcmVmaXg0W1wiS05PV0xFREdFXCJdID0gXCJrbm93bGVkZ2VcIjtcbiAgcmV0dXJuIENhY2hlS2V5UHJlZml4NDtcbn0pKENhY2hlS2V5UHJlZml4MyB8fCB7fSk7XG5cbi8vIHNyYy90eXBlcy9lbnZpcm9ubWVudC50c1xudmFyIFJvbGUyID0gLyogQF9fUFVSRV9fICovICgoUm9sZTMpID0+IHtcbiAgUm9sZTNbXCJPV05FUlwiXSA9IFwiT1dORVJcIjtcbiAgUm9sZTNbXCJBRE1JTlwiXSA9IFwiQURNSU5cIjtcbiAgUm9sZTNbXCJOT05FXCJdID0gXCJOT05FXCI7XG4gIHJldHVybiBSb2xlMztcbn0pKFJvbGUyIHx8IHt9KTtcbnZhciBDaGFubmVsVHlwZTIgPSAvKiBAX19QVVJFX18gKi8gKChDaGFubmVsVHlwZTQpID0+IHtcbiAgQ2hhbm5lbFR5cGU0W1wiU0VMRlwiXSA9IFwiU0VMRlwiO1xuICBDaGFubmVsVHlwZTRbXCJETVwiXSA9IFwiRE1cIjtcbiAgQ2hhbm5lbFR5cGU0W1wiR1JPVVBcIl0gPSBcIkdST1VQXCI7XG4gIENoYW5uZWxUeXBlNFtcIlZPSUNFX0RNXCJdID0gXCJWT0lDRV9ETVwiO1xuICBDaGFubmVsVHlwZTRbXCJWT0lDRV9HUk9VUFwiXSA9IFwiVk9JQ0VfR1JPVVBcIjtcbiAgQ2hhbm5lbFR5cGU0W1wiRkVFRFwiXSA9IFwiRkVFRFwiO1xuICBDaGFubmVsVHlwZTRbXCJUSFJFQURcIl0gPSBcIlRIUkVBRFwiO1xuICBDaGFubmVsVHlwZTRbXCJXT1JMRFwiXSA9IFwiV09STERcIjtcbiAgQ2hhbm5lbFR5cGU0W1wiRk9SVU1cIl0gPSBcIkZPUlVNXCI7XG4gIENoYW5uZWxUeXBlNFtcIkFQSVwiXSA9IFwiQVBJXCI7XG4gIHJldHVybiBDaGFubmVsVHlwZTQ7XG59KShDaGFubmVsVHlwZTIgfHwge30pO1xuXG4vLyBzcmMvdHlwZXMvYWdlbnQudHNcbnZhciBBZ2VudFN0YXR1czIgPSAvKiBAX19QVVJFX18gKi8gKChBZ2VudFN0YXR1czMpID0+IHtcbiAgQWdlbnRTdGF0dXMzW1wiQUNUSVZFXCJdID0gXCJhY3RpdmVcIjtcbiAgQWdlbnRTdGF0dXMzW1wiSU5BQ1RJVkVcIl0gPSBcImluYWN0aXZlXCI7XG4gIHJldHVybiBBZ2VudFN0YXR1czM7XG59KShBZ2VudFN0YXR1czIgfHwge30pO1xuXG4vLyBzcmMvdHlwZXMvY29tcG9uZW50cy50c1xuZnVuY3Rpb24gY3JlYXRlQWN0aW9uUmVzdWx0KHBhcnRpYWwgPSB7fSkge1xuICByZXR1cm4ge1xuICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgLy8gRGVmYXVsdCB0byBzdWNjZXNzXG4gICAgLi4ucGFydGlhbFxuICB9O1xufVxuXG4vLyBzcmMvdHlwZXMvc2VydmljZS50c1xudmFyIFNlcnZpY2VUeXBlMyA9IHtcbiAgVFJBTlNDUklQVElPTjogXCJ0cmFuc2NyaXB0aW9uXCIsXG4gIFZJREVPOiBcInZpZGVvXCIsXG4gIEJST1dTRVI6IFwiYnJvd3NlclwiLFxuICBQREY6IFwicGRmXCIsXG4gIFJFTU9URV9GSUxFUzogXCJhd3NfczNcIixcbiAgV0VCX1NFQVJDSDogXCJ3ZWJfc2VhcmNoXCIsXG4gIEVNQUlMOiBcImVtYWlsXCIsXG4gIFRFRTogXCJ0ZWVcIixcbiAgVEFTSzogXCJ0YXNrXCIsXG4gIFdBTExFVDogXCJ3YWxsZXRcIixcbiAgTFBfUE9PTDogXCJscF9wb29sXCIsXG4gIFRPS0VOX0RBVEE6IFwidG9rZW5fZGF0YVwiLFxuICBNRVNTQUdFOiBcIm1lc3NhZ2VcIixcbiAgUE9TVDogXCJwb3N0XCIsXG4gIFVOS05PV046IFwidW5rbm93blwiXG59O1xudmFyIFNlcnZpY2UzID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihydW50aW1lKSB7XG4gICAgaWYgKHJ1bnRpbWUpIHtcbiAgICAgIHRoaXMucnVudGltZSA9IHJ1bnRpbWU7XG4gICAgfVxuICB9XG4gIC8qKiBTdGFydCBzZXJ2aWNlIGNvbm5lY3Rpb24gKi9cbiAgc3RhdGljIGFzeW5jIHN0YXJ0KF9ydW50aW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpO1xuICB9XG4gIC8qKiBTdG9wIHNlcnZpY2UgY29ubmVjdGlvbiAqL1xuICBzdGF0aWMgYXN5bmMgc3RvcChfcnVudGltZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGdldFR5cGVkU2VydmljZTIocnVudGltZSwgc2VydmljZVR5cGUpIHtcbiAgcmV0dXJuIHJ1bnRpbWUuZ2V0U2VydmljZShzZXJ2aWNlVHlwZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVTZXJ2aWNlRXJyb3IyKGVycm9yLCBjb2RlID0gXCJVTktOT1dOX0VSUk9SXCIpIHtcbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29kZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICBjYXVzZTogZXJyb3JcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgY29kZSxcbiAgICBtZXNzYWdlOiBTdHJpbmcoZXJyb3IpXG4gIH07XG59XG5cbi8vIHNyYy90eXBlcy9tb2RlbC50c1xudmFyIE1vZGVsVHlwZTIgPSB7XG4gIFNNQUxMOiBcIlRFWFRfU01BTExcIixcbiAgLy8ga2VwdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgTUVESVVNOiBcIlRFWFRfTEFSR0VcIixcbiAgLy8ga2VwdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgTEFSR0U6IFwiVEVYVF9MQVJHRVwiLFxuICAvLyBrZXB0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICBURVhUX1NNQUxMOiBcIlRFWFRfU01BTExcIixcbiAgVEVYVF9MQVJHRTogXCJURVhUX0xBUkdFXCIsXG4gIFRFWFRfRU1CRURESU5HOiBcIlRFWFRfRU1CRURESU5HXCIsXG4gIFRFWFRfVE9LRU5JWkVSX0VOQ09ERTogXCJURVhUX1RPS0VOSVpFUl9FTkNPREVcIixcbiAgVEVYVF9UT0tFTklaRVJfREVDT0RFOiBcIlRFWFRfVE9LRU5JWkVSX0RFQ09ERVwiLFxuICBURVhUX1JFQVNPTklOR19TTUFMTDogXCJSRUFTT05JTkdfU01BTExcIixcbiAgVEVYVF9SRUFTT05JTkdfTEFSR0U6IFwiUkVBU09OSU5HX0xBUkdFXCIsXG4gIFRFWFRfQ09NUExFVElPTjogXCJURVhUX0NPTVBMRVRJT05cIixcbiAgSU1BR0U6IFwiSU1BR0VcIixcbiAgSU1BR0VfREVTQ1JJUFRJT046IFwiSU1BR0VfREVTQ1JJUFRJT05cIixcbiAgVFJBTlNDUklQVElPTjogXCJUUkFOU0NSSVBUSU9OXCIsXG4gIFRFWFRfVE9fU1BFRUNIOiBcIlRFWFRfVE9fU1BFRUNIXCIsXG4gIEFVRElPOiBcIkFVRElPXCIsXG4gIFZJREVPOiBcIlZJREVPXCIsXG4gIE9CSkVDVF9TTUFMTDogXCJPQkpFQ1RfU01BTExcIixcbiAgT0JKRUNUX0xBUkdFOiBcIk9CSkVDVF9MQVJHRVwiXG59O1xuXG4vLyBzcmMvdHlwZXMvZGF0YWJhc2UudHNcbnZhciBWRUNUT1JfRElNUzIgPSB7XG4gIFNNQUxMOiAzODQsXG4gIE1FRElVTTogNTEyLFxuICBMQVJHRTogNzY4LFxuICBYTDogMTAyNCxcbiAgWFhMOiAxNTM2LFxuICBYWFhMOiAzMDcyXG59O1xuXG4vLyBzcmMvdHlwZXMvZXZlbnRzLnRzXG52YXIgRXZlbnRUeXBlMiA9IC8qIEBfX1BVUkVfXyAqLyAoKEV2ZW50VHlwZTMpID0+IHtcbiAgRXZlbnRUeXBlM1tcIldPUkxEX0pPSU5FRFwiXSA9IFwiV09STERfSk9JTkVEXCI7XG4gIEV2ZW50VHlwZTNbXCJXT1JMRF9DT05ORUNURURcIl0gPSBcIldPUkxEX0NPTk5FQ1RFRFwiO1xuICBFdmVudFR5cGUzW1wiV09STERfTEVGVFwiXSA9IFwiV09STERfTEVGVFwiO1xuICBFdmVudFR5cGUzW1wiRU5USVRZX0pPSU5FRFwiXSA9IFwiRU5USVRZX0pPSU5FRFwiO1xuICBFdmVudFR5cGUzW1wiRU5USVRZX0xFRlRcIl0gPSBcIkVOVElUWV9MRUZUXCI7XG4gIEV2ZW50VHlwZTNbXCJFTlRJVFlfVVBEQVRFRFwiXSA9IFwiRU5USVRZX1VQREFURURcIjtcbiAgRXZlbnRUeXBlM1tcIlJPT01fSk9JTkVEXCJdID0gXCJST09NX0pPSU5FRFwiO1xuICBFdmVudFR5cGUzW1wiUk9PTV9MRUZUXCJdID0gXCJST09NX0xFRlRcIjtcbiAgRXZlbnRUeXBlM1tcIk1FU1NBR0VfUkVDRUlWRURcIl0gPSBcIk1FU1NBR0VfUkVDRUlWRURcIjtcbiAgRXZlbnRUeXBlM1tcIk1FU1NBR0VfU0VOVFwiXSA9IFwiTUVTU0FHRV9TRU5UXCI7XG4gIEV2ZW50VHlwZTNbXCJNRVNTQUdFX0RFTEVURURcIl0gPSBcIk1FU1NBR0VfREVMRVRFRFwiO1xuICBFdmVudFR5cGUzW1wiQ0hBTk5FTF9DTEVBUkVEXCJdID0gXCJDSEFOTkVMX0NMRUFSRURcIjtcbiAgRXZlbnRUeXBlM1tcIlZPSUNFX01FU1NBR0VfUkVDRUlWRURcIl0gPSBcIlZPSUNFX01FU1NBR0VfUkVDRUlWRURcIjtcbiAgRXZlbnRUeXBlM1tcIlZPSUNFX01FU1NBR0VfU0VOVFwiXSA9IFwiVk9JQ0VfTUVTU0FHRV9TRU5UXCI7XG4gIEV2ZW50VHlwZTNbXCJSRUFDVElPTl9SRUNFSVZFRFwiXSA9IFwiUkVBQ1RJT05fUkVDRUlWRURcIjtcbiAgRXZlbnRUeXBlM1tcIlBPU1RfR0VORVJBVEVEXCJdID0gXCJQT1NUX0dFTkVSQVRFRFwiO1xuICBFdmVudFR5cGUzW1wiSU5URVJBQ1RJT05fUkVDRUlWRURcIl0gPSBcIklOVEVSQUNUSU9OX1JFQ0VJVkVEXCI7XG4gIEV2ZW50VHlwZTNbXCJSVU5fU1RBUlRFRFwiXSA9IFwiUlVOX1NUQVJURURcIjtcbiAgRXZlbnRUeXBlM1tcIlJVTl9FTkRFRFwiXSA9IFwiUlVOX0VOREVEXCI7XG4gIEV2ZW50VHlwZTNbXCJSVU5fVElNRU9VVFwiXSA9IFwiUlVOX1RJTUVPVVRcIjtcbiAgRXZlbnRUeXBlM1tcIkFDVElPTl9TVEFSVEVEXCJdID0gXCJBQ1RJT05fU1RBUlRFRFwiO1xuICBFdmVudFR5cGUzW1wiQUNUSU9OX0NPTVBMRVRFRFwiXSA9IFwiQUNUSU9OX0NPTVBMRVRFRFwiO1xuICBFdmVudFR5cGUzW1wiRVZBTFVBVE9SX1NUQVJURURcIl0gPSBcIkVWQUxVQVRPUl9TVEFSVEVEXCI7XG4gIEV2ZW50VHlwZTNbXCJFVkFMVUFUT1JfQ09NUExFVEVEXCJdID0gXCJFVkFMVUFUT1JfQ09NUExFVEVEXCI7XG4gIEV2ZW50VHlwZTNbXCJNT0RFTF9VU0VEXCJdID0gXCJNT0RFTF9VU0VEXCI7XG4gIHJldHVybiBFdmVudFR5cGUzO1xufSkoRXZlbnRUeXBlMiB8fCB7fSk7XG52YXIgUGxhdGZvcm1QcmVmaXgyID0gLyogQF9fUFVSRV9fICovICgoUGxhdGZvcm1QcmVmaXgzKSA9PiB7XG4gIFBsYXRmb3JtUHJlZml4M1tcIkRJU0NPUkRcIl0gPSBcIkRJU0NPUkRcIjtcbiAgUGxhdGZvcm1QcmVmaXgzW1wiVEVMRUdSQU1cIl0gPSBcIlRFTEVHUkFNXCI7XG4gIFBsYXRmb3JtUHJlZml4M1tcIlRXSVRURVJcIl0gPSBcIlRXSVRURVJcIjtcbiAgcmV0dXJuIFBsYXRmb3JtUHJlZml4Mztcbn0pKFBsYXRmb3JtUHJlZml4MiB8fCB7fSk7XG5cbi8vIHNyYy90eXBlcy90ZWUudHNcbnZhciBURUVNb2RlMiA9IC8qIEBfX1BVUkVfXyAqLyAoKFRFRU1vZGUzKSA9PiB7XG4gIFRFRU1vZGUzW1wiT0ZGXCJdID0gXCJPRkZcIjtcbiAgVEVFTW9kZTNbXCJMT0NBTFwiXSA9IFwiTE9DQUxcIjtcbiAgVEVFTW9kZTNbXCJET0NLRVJcIl0gPSBcIkRPQ0tFUlwiO1xuICBURUVNb2RlM1tcIlBST0RVQ1RJT05cIl0gPSBcIlBST0RVQ1RJT05cIjtcbiAgcmV0dXJuIFRFRU1vZGUzO1xufSkoVEVFTW9kZTIgfHwge30pO1xudmFyIFRlZVR5cGUyID0gLyogQF9fUFVSRV9fICovICgoVGVlVHlwZTMpID0+IHtcbiAgVGVlVHlwZTNbXCJURFhfRFNUQUNLXCJdID0gXCJ0ZHhfZHN0YWNrXCI7XG4gIHJldHVybiBUZWVUeXBlMztcbn0pKFRlZVR5cGUyIHx8IHt9KTtcblxuLy8gc3JjL3R5cGVzL3Rva2VuLnRzXG52YXIgSVRva2VuRGF0YVNlcnZpY2UgPSBjbGFzcyBleHRlbmRzIFNlcnZpY2UzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmNhcGFiaWxpdHlEZXNjcmlwdGlvbiA9IFwiUHJvdmlkZXMgc3RhbmRhcmRpemVkIGFjY2VzcyB0byB0b2tlbiBtYXJrZXQgZGF0YS5cIjtcbiAgfVxuICBzdGF0aWMge1xuICAgIHRoaXMuc2VydmljZVR5cGUgPSBTZXJ2aWNlVHlwZTMuVE9LRU5fREFUQTtcbiAgfVxuICAvLyBGdXR1cmUgcG90ZW50aWFsIG1ldGhvZHM6XG4gIC8vIGdldEhpc3RvcmljYWxQcmljZURhdGEoYWRkcmVzczogc3RyaW5nLCBjaGFpbjogc3RyaW5nLCB0aW1lRnJhbWU6IHN0cmluZyk6IFByb21pc2U8YW55W10+O1xuICAvLyBnZXRUb2tlbk1hcmtldENoYXJ0KGFkZHJlc3M6IHN0cmluZywgY2hhaW46IHN0cmluZywgZGF5czogbnVtYmVyKTogUHJvbWlzZTxhbnlbXT47XG59O1xuXG4vLyBzcmMvdHlwZXMvbWVzc2FnaW5nLnRzXG52YXIgU09DS0VUX01FU1NBR0VfVFlQRTIgPSAvKiBAX19QVVJFX18gKi8gKChTT0NLRVRfTUVTU0FHRV9UWVBFMykgPT4ge1xuICBTT0NLRVRfTUVTU0FHRV9UWVBFM1tTT0NLRVRfTUVTU0FHRV9UWVBFM1tcIlJPT01fSk9JTklOR1wiXSA9IDFdID0gXCJST09NX0pPSU5JTkdcIjtcbiAgU09DS0VUX01FU1NBR0VfVFlQRTNbU09DS0VUX01FU1NBR0VfVFlQRTNbXCJTRU5EX01FU1NBR0VcIl0gPSAyXSA9IFwiU0VORF9NRVNTQUdFXCI7XG4gIFNPQ0tFVF9NRVNTQUdFX1RZUEUzW1NPQ0tFVF9NRVNTQUdFX1RZUEUzW1wiTUVTU0FHRVwiXSA9IDNdID0gXCJNRVNTQUdFXCI7XG4gIFNPQ0tFVF9NRVNTQUdFX1RZUEUzW1NPQ0tFVF9NRVNTQUdFX1RZUEUzW1wiQUNLXCJdID0gNF0gPSBcIkFDS1wiO1xuICBTT0NLRVRfTUVTU0FHRV9UWVBFM1tTT0NLRVRfTUVTU0FHRV9UWVBFM1tcIlRISU5LSU5HXCJdID0gNV0gPSBcIlRISU5LSU5HXCI7XG4gIFNPQ0tFVF9NRVNTQUdFX1RZUEUzW1NPQ0tFVF9NRVNTQUdFX1RZUEUzW1wiQ09OVFJPTFwiXSA9IDZdID0gXCJDT05UUk9MXCI7XG4gIHJldHVybiBTT0NLRVRfTUVTU0FHRV9UWVBFMztcbn0pKFNPQ0tFVF9NRVNTQUdFX1RZUEUyIHx8IHt9KTtcblxuLy8gc3JjL3R5cGVzL3dhbGxldC50c1xudmFyIElXYWxsZXRTZXJ2aWNlID0gY2xhc3MgZXh0ZW5kcyBTZXJ2aWNlMyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5jYXBhYmlsaXR5RGVzY3JpcHRpb24gPSBcIlByb3ZpZGVzIHN0YW5kYXJkaXplZCBhY2Nlc3MgdG8gd2FsbGV0IGJhbGFuY2VzIGFuZCBwb3J0Zm9saW9zLlwiO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgdGhpcy5zZXJ2aWNlVHlwZSA9IFNlcnZpY2VUeXBlMy5XQUxMRVQ7XG4gIH1cbn07XG5cbi8vIHNyYy90eXBlcy9scC50c1xudmFyIElMcFNlcnZpY2UgPSBjbGFzcyBleHRlbmRzIFNlcnZpY2UzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmNhcGFiaWxpdHlEZXNjcmlwdGlvbiA9IFwiUHJvdmlkZXMgc3RhbmRhcmRpemVkIGFjY2VzcyB0byBERVggbGlxdWlkaXR5IHBvb2xzLlwiO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgdGhpcy5zZXJ2aWNlVHlwZSA9IFwibHBcIjtcbiAgfVxufTtcblxuLy8gc3JjL3R5cGVzL3BkZi50c1xudmFyIElQZGZTZXJ2aWNlID0gY2xhc3MgZXh0ZW5kcyBTZXJ2aWNlMyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5jYXBhYmlsaXR5RGVzY3JpcHRpb24gPSBcIlBERiBwcm9jZXNzaW5nLCBleHRyYWN0aW9uLCBhbmQgZ2VuZXJhdGlvbiBjYXBhYmlsaXRpZXNcIjtcbiAgfVxuICBzdGF0aWMge1xuICAgIHRoaXMuc2VydmljZVR5cGUgPSBTZXJ2aWNlVHlwZTMuUERGO1xuICB9XG59O1xuXG4vLyBzcmMvdHlwZXMvdmlkZW8udHNcbnZhciBJVmlkZW9TZXJ2aWNlID0gY2xhc3MgZXh0ZW5kcyBTZXJ2aWNlMyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5jYXBhYmlsaXR5RGVzY3JpcHRpb24gPSBcIlZpZGVvIGRvd25sb2FkLCBwcm9jZXNzaW5nLCBhbmQgY29udmVyc2lvbiBjYXBhYmlsaXRpZXNcIjtcbiAgfVxuICBzdGF0aWMge1xuICAgIHRoaXMuc2VydmljZVR5cGUgPSBTZXJ2aWNlVHlwZTMuVklERU87XG4gIH1cbn07XG5cbi8vIHNyYy90eXBlcy9icm93c2VyLnRzXG52YXIgSUJyb3dzZXJTZXJ2aWNlID0gY2xhc3MgZXh0ZW5kcyBTZXJ2aWNlMyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5jYXBhYmlsaXR5RGVzY3JpcHRpb24gPSBcIldlYiBicm93c2VyIGF1dG9tYXRpb24gYW5kIHNjcmFwaW5nIGNhcGFiaWxpdGllc1wiO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgdGhpcy5zZXJ2aWNlVHlwZSA9IFNlcnZpY2VUeXBlMy5CUk9XU0VSO1xuICB9XG59O1xuXG4vLyBzcmMvdHlwZXMvdHJhbnNjcmlwdGlvbi50c1xudmFyIElUcmFuc2NyaXB0aW9uU2VydmljZSA9IGNsYXNzIGV4dGVuZHMgU2VydmljZTMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuY2FwYWJpbGl0eURlc2NyaXB0aW9uID0gXCJBdWRpbyB0cmFuc2NyaXB0aW9uIGFuZCBzcGVlY2ggcHJvY2Vzc2luZyBjYXBhYmlsaXRpZXNcIjtcbiAgfVxuICBzdGF0aWMge1xuICAgIHRoaXMuc2VydmljZVR5cGUgPSBTZXJ2aWNlVHlwZTMuVFJBTlNDUklQVElPTjtcbiAgfVxufTtcblxuLy8gc3JjL3R5cGVzL3dlYi1zZWFyY2gudHNcbnZhciBJV2ViU2VhcmNoU2VydmljZSA9IGNsYXNzIGV4dGVuZHMgU2VydmljZTMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuY2FwYWJpbGl0eURlc2NyaXB0aW9uID0gXCJXZWIgc2VhcmNoIGFuZCBjb250ZW50IGRpc2NvdmVyeSBjYXBhYmlsaXRpZXNcIjtcbiAgfVxuICBzdGF0aWMge1xuICAgIHRoaXMuc2VydmljZVR5cGUgPSBTZXJ2aWNlVHlwZTMuV0VCX1NFQVJDSDtcbiAgfVxufTtcblxuLy8gc3JjL3R5cGVzL2VtYWlsLnRzXG52YXIgSUVtYWlsU2VydmljZSA9IGNsYXNzIGV4dGVuZHMgU2VydmljZTMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuY2FwYWJpbGl0eURlc2NyaXB0aW9uID0gXCJFbWFpbCBzZW5kaW5nLCByZWNlaXZpbmcsIGFuZCBtYW5hZ2VtZW50IGNhcGFiaWxpdGllc1wiO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgdGhpcy5zZXJ2aWNlVHlwZSA9IFNlcnZpY2VUeXBlMy5FTUFJTDtcbiAgfVxufTtcblxuLy8gc3JjL3R5cGVzL21lc3NhZ2UudHNcbnZhciBJTWVzc2FnZVNlcnZpY2UgPSBjbGFzcyBleHRlbmRzIFNlcnZpY2UzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmNhcGFiaWxpdHlEZXNjcmlwdGlvbiA9IFwiTWVzc2FnZSBzZW5kaW5nLCByZWNlaXZpbmcsIGFuZCBtYW5hZ2VtZW50IGNhcGFiaWxpdGllc1wiO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgdGhpcy5zZXJ2aWNlVHlwZSA9IFNlcnZpY2VUeXBlMy5NRVNTQUdFO1xuICB9XG59O1xuXG4vLyBzcmMvdHlwZXMvcG9zdC50c1xudmFyIElQb3N0U2VydmljZSA9IGNsYXNzIGV4dGVuZHMgU2VydmljZTMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuY2FwYWJpbGl0eURlc2NyaXB0aW9uID0gXCJTb2NpYWwgbWVkaWEgcG9zdGluZyBhbmQgY29udGVudCBtYW5hZ2VtZW50IGNhcGFiaWxpdGllc1wiO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgdGhpcy5zZXJ2aWNlVHlwZSA9IFNlcnZpY2VUeXBlMy5QT1NUO1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMudHNcbmltcG9ydCBoYW5kbGViYXJzIGZyb20gXCJoYW5kbGViYXJzXCI7XG5pbXBvcnQgeyBzaGExIH0gZnJvbSBcImpzLXNoYTFcIjtcbmltcG9ydCB7IFJlY3Vyc2l2ZUNoYXJhY3RlclRleHRTcGxpdHRlciB9IGZyb20gXCJsYW5nY2hhaW4vdGV4dF9zcGxpdHRlclwiO1xuaW1wb3J0IHsgbmFtZXMsIHVuaXF1ZU5hbWVzR2VuZXJhdG9yIH0gZnJvbSBcInVuaXF1ZS1uYW1lcy1nZW5lcmF0b3JcIjtcbmltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5cbi8vIHNyYy9sb2dnZXIudHNcbmltcG9ydCBwaW5vIGZyb20gXCJwaW5vXCI7XG5cbi8vIHNyYy9zZW50cnkvaW5zdHJ1bWVudC50c1xuaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gXCJAc2VudHJ5L2Jyb3dzZXJcIjtcbnZhciBkc24gPSBwcm9jZXNzLmVudi5TRU5UUllfRFNOIHx8IFwiaHR0cHM6Ly9jMjBlMmQ1MWI2NmMxNGE3ODNiMDY4OWQ1MzZmN2U1Y0BvNDUwOTM0OTg2NTI1OTAwOC5pbmdlc3QudXMuc2VudHJ5LmlvLzQ1MDkzNTI1MjQxMjAwNjRcIjtcbmlmIChwcm9jZXNzLmVudi5TRU5UUllfTE9HR0lORyAhPT0gXCJmYWxzZVwiKSB7XG4gIFNlbnRyeS5vbkxvYWQoKCkgPT4ge1xuICAgIFNlbnRyeS5pbml0KHtcbiAgICAgIGRzbixcbiAgICAgIGVudmlyb25tZW50OiBwcm9jZXNzLmVudi5TRU5UUllfRU5WSVJPTk1FTlQgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYsXG4gICAgICB0cmFjZXNTYW1wbGVSYXRlOiBwYXJzZUZsb2F0KHByb2Nlc3MuZW52LlNFTlRSWV9UUkFDRVNfU0FNUExFX1JBVEUgPz8gXCJcIikgfHwgMSxcbiAgICAgIHNlbmREZWZhdWx0UGlpOiBwcm9jZXNzLmVudi5TRU5UUllfU0VORF9ERUZBVUxUX1BJSSA9PT0gXCJ0cnVlXCJcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8vIHNyYy9sb2dnZXIudHNcbmZ1bmN0aW9uIHBhcnNlQm9vbGVhbkZyb21UZXh0KHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IHZhbHVlLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICByZXR1cm4gbm9ybWFsaXplZCA9PT0gXCJ0cnVlXCIgfHwgbm9ybWFsaXplZCA9PT0gXCIxXCIgfHwgbm9ybWFsaXplZCA9PT0gXCJ5ZXNcIiB8fCBub3JtYWxpemVkID09PSBcIm9uXCI7XG59XG52YXIgSW5NZW1vcnlEZXN0aW5hdGlvbiA9IGNsYXNzIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgY2xhc3MuXG4gICAqIEBwYXJhbSB7RGVzdGluYXRpb25TdHJlYW18bnVsbH0gc3RyZWFtIC0gVGhlIHN0cmVhbSB0byBhc3NpZ24gdG8gdGhlIGluc3RhbmNlLiBDYW4gYmUgbnVsbC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHN0cmVhbSkge1xuICAgIHRoaXMubG9ncyA9IFtdO1xuICAgIHRoaXMubWF4TG9ncyA9IDFlMztcbiAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgfVxuICAvKipcbiAgICogV3JpdGVzIGEgbG9nIGVudHJ5IHRvIHRoZSBtZW1vcnkgYnVmZmVyIGFuZCBmb3J3YXJkcyBpdCB0byB0aGUgcHJldHR5IHByaW50IHN0cmVhbSBpZiBhdmFpbGFibGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgTG9nRW50cnl9IGRhdGEgLSBUaGUgZGF0YSB0byBiZSB3cml0dGVuLCB3aGljaCBjYW4gYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGEgTG9nRW50cnkgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHdyaXRlKGRhdGEpIHtcbiAgICBsZXQgbG9nRW50cnk7XG4gICAgbGV0IHN0cmluZ0RhdGE7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBzdHJpbmdEYXRhID0gZGF0YTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxvZ0VudHJ5ID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RyZWFtKSB7XG4gICAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2dFbnRyeSA9IGRhdGE7XG4gICAgICBzdHJpbmdEYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIGlmICghbG9nRW50cnkudGltZSkge1xuICAgICAgbG9nRW50cnkudGltZSA9IERhdGUubm93KCk7XG4gICAgfVxuICAgIGNvbnN0IGlzRGVidWdNb2RlMiA9IChwcm9jZXNzPy5lbnY/LkxPR19MRVZFTCB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpID09PSBcImRlYnVnXCI7XG4gICAgY29uc3QgaXNMb2dnaW5nRGlhZ25vc3RpYyA9IEJvb2xlYW4ocHJvY2Vzcz8uZW52Py5MT0dfRElBR05PU1RJQyk7XG4gICAgaWYgKGlzTG9nZ2luZ0RpYWdub3N0aWMpIHtcbiAgICAgIGxvZ0VudHJ5LmRpYWdub3N0aWMgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWlzRGVidWdNb2RlMikge1xuICAgICAgaWYgKGxvZ0VudHJ5LmFnZW50TmFtZSAmJiBsb2dFbnRyeS5hZ2VudElkKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGxvZ0VudHJ5Lm1zZyB8fCBcIlwiO1xuICAgICAgICBpZiAodHlwZW9mIG1zZyA9PT0gXCJzdHJpbmdcIiAmJiAobXNnLmluY2x1ZGVzKFwicmVnaXN0ZXJlZCBzdWNjZXNzZnVsbHlcIikgfHwgbXNnLmluY2x1ZGVzKFwiUmVnaXN0ZXJpbmdcIikgfHwgbXNnLmluY2x1ZGVzKFwiU3VjY2VzczpcIikgfHwgbXNnLmluY2x1ZGVzKFwibGlua2VkIHRvXCIpIHx8IG1zZy5pbmNsdWRlcyhcIlN0YXJ0ZWRcIikpKSB7XG4gICAgICAgICAgaWYgKGlzTG9nZ2luZ0RpYWdub3N0aWMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGaWx0ZXJlZCBsb2c6XCIsIHN0cmluZ0RhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sb2dzLnB1c2gobG9nRW50cnkpO1xuICAgIGlmICh0aGlzLmxvZ3MubGVuZ3RoID4gdGhpcy5tYXhMb2dzKSB7XG4gICAgICB0aGlzLmxvZ3Muc2hpZnQoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RyZWFtKSB7XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZShzdHJpbmdEYXRhKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgcmVjZW50IGxvZ3MgZnJvbSB0aGUgc3lzdGVtLlxuICAgKlxuICAgKiBAcmV0dXJucyB7TG9nRW50cnlbXX0gQW4gYXJyYXkgb2YgTG9nRW50cnkgb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIHJlY2VudCBsb2dzLlxuICAgKi9cbiAgcmVjZW50TG9ncygpIHtcbiAgICByZXR1cm4gdGhpcy5sb2dzO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIGxvZ3MgZnJvbSBtZW1vcnkuXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5sb2dzID0gW107XG4gIH1cbn07XG52YXIgY3VzdG9tTGV2ZWxzID0ge1xuICBmYXRhbDogNjAsXG4gIGVycm9yOiA1MCxcbiAgd2FybjogNDAsXG4gIGluZm86IDMwLFxuICBsb2c6IDI5LFxuICBwcm9ncmVzczogMjgsXG4gIHN1Y2Nlc3M6IDI3LFxuICBkZWJ1ZzogMjAsXG4gIHRyYWNlOiAxMFxufTtcbnZhciByYXcgPSBwYXJzZUJvb2xlYW5Gcm9tVGV4dChwcm9jZXNzPy5lbnY/LkxPR19KU09OX0ZPUk1BVCkgfHwgZmFsc2U7XG52YXIgaXNEZWJ1Z01vZGUgPSAocHJvY2Vzcz8uZW52Py5MT0dfTEVWRUwgfHwgXCJcIikudG9Mb3dlckNhc2UoKSA9PT0gXCJkZWJ1Z1wiO1xudmFyIGVmZmVjdGl2ZUxvZ0xldmVsID0gaXNEZWJ1Z01vZGUgPyBcImRlYnVnXCIgOiBwcm9jZXNzPy5lbnY/LkRFRkFVTFRfTE9HX0xFVkVMIHx8IFwiaW5mb1wiO1xudmFyIHNob3dUaW1lc3RhbXBzID0gcHJvY2Vzcz8uZW52Py5MT0dfVElNRVNUQU1QUyAhPT0gdm9pZCAwID8gcGFyc2VCb29sZWFuRnJvbVRleHQocHJvY2Vzcz8uZW52Py5MT0dfVElNRVNUQU1QUykgOiB0cnVlO1xudmFyIGNyZWF0ZVByZXR0eUNvbmZpZyA9ICgpID0+ICh7XG4gIGNvbG9yaXplOiB0cnVlLFxuICB0cmFuc2xhdGVUaW1lOiBzaG93VGltZXN0YW1wcyA/IFwieXl5eS1tbS1kZCBISDpNTTpzc1wiIDogZmFsc2UsXG4gIGlnbm9yZTogc2hvd1RpbWVzdGFtcHMgPyBcInBpZCxob3N0bmFtZVwiIDogXCJwaWQsaG9zdG5hbWUsdGltZVwiLFxuICBsZXZlbENvbG9yczoge1xuICAgIDYwOiBcInJlZFwiLFxuICAgIC8vIGZhdGFsXG4gICAgNTA6IFwicmVkXCIsXG4gICAgLy8gZXJyb3JcbiAgICA0MDogXCJ5ZWxsb3dcIixcbiAgICAvLyB3YXJuXG4gICAgMzA6IFwiYmx1ZVwiLFxuICAgIC8vIGluZm9cbiAgICAyOTogXCJncmVlblwiLFxuICAgIC8vIGxvZ1xuICAgIDI4OiBcImN5YW5cIixcbiAgICAvLyBwcm9ncmVzc1xuICAgIDI3OiBcImdyZWVuQnJpZ2h0XCIsXG4gICAgLy8gc3VjY2Vzc1xuICAgIDIwOiBcIm1hZ2VudGFcIixcbiAgICAvLyBkZWJ1Z1xuICAgIDEwOiBcImdyZXlcIixcbiAgICAvLyB0cmFjZVxuICAgIFwiKlwiOiBcIndoaXRlXCJcbiAgICAvLyBkZWZhdWx0IGZvciBhbnkgdW5zcGVjaWZpZWQgbGV2ZWxcbiAgfSxcbiAgY3VzdG9tUHJldHRpZmllcnM6IHtcbiAgICBsZXZlbDogKGlucHV0RGF0YSkgPT4ge1xuICAgICAgbGV0IGxldmVsO1xuICAgICAgaWYgKHR5cGVvZiBpbnB1dERhdGEgPT09IFwib2JqZWN0XCIgJiYgaW5wdXREYXRhICE9PSBudWxsKSB7XG4gICAgICAgIGxldmVsID0gaW5wdXREYXRhLmxldmVsIHx8IGlucHV0RGF0YS52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gaW5wdXREYXRhO1xuICAgICAgfVxuICAgICAgY29uc3QgbGV2ZWxOYW1lcyA9IHtcbiAgICAgICAgMTA6IFwiVFJBQ0VcIixcbiAgICAgICAgMjA6IFwiREVCVUdcIixcbiAgICAgICAgMjc6IFwiU1VDQ0VTU1wiLFxuICAgICAgICAyODogXCJQUk9HUkVTU1wiLFxuICAgICAgICAyOTogXCJMT0dcIixcbiAgICAgICAgMzA6IFwiSU5GT1wiLFxuICAgICAgICA0MDogXCJXQVJOXCIsXG4gICAgICAgIDUwOiBcIkVSUk9SXCIsXG4gICAgICAgIDYwOiBcIkZBVEFMXCJcbiAgICAgIH07XG4gICAgICBpZiAodHlwZW9mIGxldmVsID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBsZXZlbE5hbWVzW2xldmVsXSB8fCBgTEVWRUwke2xldmVsfWA7XG4gICAgICB9XG4gICAgICBpZiAobGV2ZWwgPT09IHZvaWQgMCB8fCBsZXZlbCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCJVTktOT1dOXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gU3RyaW5nKGxldmVsKS50b1VwcGVyQ2FzZSgpO1xuICAgIH0sXG4gICAgLy8gQWRkIGEgY3VzdG9tIHByZXR0aWZpZXIgZm9yIGVycm9yIG1lc3NhZ2VzXG4gICAgbXNnOiAobXNnKSA9PiB7XG4gICAgICByZXR1cm4gbXNnLnJlcGxhY2UoL0VSUk9SIFxcKFteKV0rXFwpOi9nLCBcIkVSUk9SOlwiKTtcbiAgICB9XG4gIH0sXG4gIG1lc3NhZ2VGb3JtYXQ6IFwie21zZ31cIlxufSk7XG52YXIgY3JlYXRlU3RyZWFtID0gYXN5bmMgKCkgPT4ge1xuICBpZiAocmF3KSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBjb25zdCBwcmV0dHkgPSBhd2FpdCBpbXBvcnQoXCJwaW5vLXByZXR0eVwiKTtcbiAgcmV0dXJuIHByZXR0eS5kZWZhdWx0KGNyZWF0ZVByZXR0eUNvbmZpZygpKTtcbn07XG52YXIgb3B0aW9ucyA9IHtcbiAgbGV2ZWw6IGVmZmVjdGl2ZUxvZ0xldmVsLFxuICAvLyBVc2UgbW9yZSByZXN0cmljdGl2ZSBsZXZlbCB1bmxlc3MgaW4gZGVidWcgbW9kZVxuICBjdXN0b21MZXZlbHMsXG4gIGhvb2tzOiB7XG4gICAgbG9nTWV0aG9kKGlucHV0QXJncywgbWV0aG9kKSB7XG4gICAgICBjb25zdCBbYXJnMSwgLi4ucmVzdF0gPSBpbnB1dEFyZ3M7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuU0VOVFJZX0xPR0dJTkcgIT09IFwiZmFsc2VcIikge1xuICAgICAgICBpZiAoYXJnMSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgU2VudHJ5LmNhcHR1cmVFeGNlcHRpb24oYXJnMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHJlc3QpIHtcbiAgICAgICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgU2VudHJ5LmNhcHR1cmVFeGNlcHRpb24oaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBmb3JtYXRFcnJvciA9IChlcnIpID0+ICh7XG4gICAgICAgIG1lc3NhZ2U6IGAoJHtlcnIubmFtZX0pICR7ZXJyLm1lc3NhZ2V9YCxcbiAgICAgICAgc3RhY2s6IGVyci5zdGFjaz8uc3BsaXQoXCJcXG5cIikubWFwKChsaW5lKSA9PiBsaW5lLnRyaW0oKSlcbiAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBhcmcxID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChhcmcxIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICBtZXRob2QuYXBwbHkodGhpcywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBlcnJvcjogZm9ybWF0RXJyb3IoYXJnMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlUGFydHMgPSByZXN0Lm1hcChcbiAgICAgICAgICAgIChhcmcpID0+IHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCIgPyBhcmcgOiBKU09OLnN0cmluZ2lmeShhcmcpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlID0gbWVzc2FnZVBhcnRzLmpvaW4oXCIgXCIpO1xuICAgICAgICAgIG1ldGhvZC5hcHBseSh0aGlzLCBbYXJnMSwgbWVzc2FnZV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0ge307XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VQYXJ0cyA9IFthcmcxLCAuLi5yZXN0XS5tYXAoKGFyZykgPT4ge1xuICAgICAgICAgIGlmIChhcmcgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKGFyZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0eXBlb2YgYXJnID09PSBcInN0cmluZ1wiID8gYXJnIDogYXJnO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG1lc3NhZ2VQYXJ0cy5maWx0ZXIoKHBhcnQpID0+IHR5cGVvZiBwYXJ0ID09PSBcInN0cmluZ1wiKS5qb2luKFwiIFwiKTtcbiAgICAgICAgY29uc3QganNvblBhcnRzID0gbWVzc2FnZVBhcnRzLmZpbHRlcigocGFydCkgPT4gdHlwZW9mIHBhcnQgPT09IFwib2JqZWN0XCIpO1xuICAgICAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIC4uLmpzb25QYXJ0cyk7XG4gICAgICAgIG1ldGhvZC5hcHBseSh0aGlzLCBbY29udGV4dCwgbWVzc2FnZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbnZhciBjcmVhdGVMb2dnZXIgPSAoYmluZGluZ3MgPSBmYWxzZSkgPT4ge1xuICBjb25zdCBvcHRzID0geyAuLi5vcHRpb25zIH07XG4gIGlmIChiaW5kaW5ncykge1xuICAgIG9wdHMuYmFzZSA9IGJpbmRpbmdzO1xuICAgIG9wdHMudHJhbnNwb3J0ID0ge1xuICAgICAgdGFyZ2V0OiBcInBpbm8tcHJldHR5XCIsXG4gICAgICAvLyB0aGlzIGlzIGp1c3QgYSBzdHJpbmcsIG5vdCBhIGR5bmFtaWMgaW1wb3J0XG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGNvbG9yaXplOiB0cnVlLFxuICAgICAgICB0cmFuc2xhdGVUaW1lOiBzaG93VGltZXN0YW1wcyA/IFwiU1lTOnN0YW5kYXJkXCIgOiBmYWxzZSxcbiAgICAgICAgaWdub3JlOiBzaG93VGltZXN0YW1wcyA/IFwicGlkLGhvc3RuYW1lXCIgOiBcInBpZCxob3N0bmFtZSx0aW1lXCJcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGNvbnN0IGxvZ2dlcjMgPSBwaW5vKG9wdHMpO1xuICByZXR1cm4gbG9nZ2VyMztcbn07XG52YXIgbG9nZ2VyID0gcGlubyhvcHRpb25zKTtcbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBsZXQgc3RyZWFtID0gbnVsbDtcbiAgaWYgKCFyYXcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcHJldHR5ID0gX19yZXF1aXJlKFwicGluby1wcmV0dHlcIik7XG4gICAgICBzdHJlYW0gPSBwcmV0dHkuZGVmYXVsdCA/IHByZXR0eS5kZWZhdWx0KGNyZWF0ZVByZXR0eUNvbmZpZygpKSA6IG51bGw7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY3JlYXRlU3RyZWFtKCkudGhlbigocHJldHR5U3RyZWFtKSA9PiB7XG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gbmV3IEluTWVtb3J5RGVzdGluYXRpb24ocHJldHR5U3RyZWFtKTtcbiAgICAgICAgbG9nZ2VyID0gcGlubyhvcHRpb25zLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIGxvZ2dlcltTeW1ib2wuZm9yKFwicGluby1kZXN0aW5hdGlvblwiKV0gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgbG9nZ2VyLmNsZWFyID0gKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uMiA9IGxvZ2dlcltTeW1ib2wuZm9yKFwicGluby1kZXN0aW5hdGlvblwiKV07XG4gICAgICAgICAgaWYgKGRlc3RpbmF0aW9uMiBpbnN0YW5jZW9mIEluTWVtb3J5RGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uMi5jbGVhcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoc3RyZWFtICE9PSBudWxsIHx8IHJhdykge1xuICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gbmV3IEluTWVtb3J5RGVzdGluYXRpb24oc3RyZWFtKTtcbiAgICBsb2dnZXIgPSBwaW5vKG9wdGlvbnMsIGRlc3RpbmF0aW9uKTtcbiAgICBsb2dnZXJbU3ltYm9sLmZvcihcInBpbm8tZGVzdGluYXRpb25cIildID0gZGVzdGluYXRpb247XG4gICAgbG9nZ2VyLmNsZWFyID0gKCkgPT4ge1xuICAgICAgY29uc3QgZGVzdGluYXRpb24yID0gbG9nZ2VyW1N5bWJvbC5mb3IoXCJwaW5vLWRlc3RpbmF0aW9uXCIpXTtcbiAgICAgIGlmIChkZXN0aW5hdGlvbjIgaW5zdGFuY2VvZiBJbk1lbW9yeURlc3RpbmF0aW9uKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uMi5jbGVhcigpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbnZhciBlbGl6YUxvZ2dlciA9IGxvZ2dlcjtcbnZhciBsb2dnZXJfZGVmYXVsdCA9IGxvZ2dlcjtcblxuLy8gc3JjL3V0aWxzLnRzXG5mdW5jdGlvbiB1cGdyYWRlRG91YmxlVG9UcmlwbGUodHBsKSB7XG4gIHJldHVybiB0cGwucmVwbGFjZShcbiAgICAvLyDilIDilIDilIDilIDilIDilIDilIDilIDila4gbmVnYXRpdmUtTEI6IG5vdCBhbHJlYWR5IFwie3t7XCJcbiAgICAvLyAgICAgICAgICDilIIgICB7eyAgICAg4pSAIG9wZW5pbmcgYnJhY2VzXG4gICAgLy8gICAgICAgICAg4pSCICAgIOKVsOKUgOKUgOKUgOKUgCBuZWdhdGl2ZS1MQTogbm90IHssICMsIC8sICEsID5cbiAgICAvLyAgICAgICAgICDilrxcbiAgICAvKD88IXspe3soPyFbeyNcXC8hPl0pKFtcXHNcXFNdKj8pfX0vZyxcbiAgICAoX21hdGNoLCBpbm5lcikgPT4ge1xuICAgICAgaWYgKGlubmVyLnRyaW0oKSA9PT0gXCJlbHNlXCIpIHJldHVybiBge3ske2lubmVyfX19YDtcbiAgICAgIHJldHVybiBge3t7JHtpbm5lcn19fX1gO1xuICAgIH1cbiAgKTtcbn1cbnZhciBjb21wb3NlUHJvbXB0ID0gKHtcbiAgc3RhdGUsXG4gIHRlbXBsYXRlXG59KSA9PiB7XG4gIGNvbnN0IHRlbXBsYXRlU3RyID0gdHlwZW9mIHRlbXBsYXRlID09PSBcImZ1bmN0aW9uXCIgPyB0ZW1wbGF0ZSh7IHN0YXRlIH0pIDogdGVtcGxhdGU7XG4gIGNvbnN0IHRlbXBsYXRlRnVuY3Rpb24gPSBoYW5kbGViYXJzLmNvbXBpbGUodXBncmFkZURvdWJsZVRvVHJpcGxlKHRlbXBsYXRlU3RyKSk7XG4gIGNvbnN0IG91dHB1dCA9IGNvbXBvc2VSYW5kb21Vc2VyKHRlbXBsYXRlRnVuY3Rpb24oc3RhdGUpLCAxMCk7XG4gIHJldHVybiBvdXRwdXQ7XG59O1xudmFyIGNvbXBvc2VQcm9tcHRGcm9tU3RhdGUgPSAoe1xuICBzdGF0ZSxcbiAgdGVtcGxhdGVcbn0pID0+IHtcbiAgY29uc3QgdGVtcGxhdGVTdHIgPSB0eXBlb2YgdGVtcGxhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHRlbXBsYXRlKHsgc3RhdGUgfSkgOiB0ZW1wbGF0ZTtcbiAgY29uc3QgdGVtcGxhdGVGdW5jdGlvbiA9IGhhbmRsZWJhcnMuY29tcGlsZSh1cGdyYWRlRG91YmxlVG9UcmlwbGUodGVtcGxhdGVTdHIpKTtcbiAgY29uc3Qgc3RhdGVLZXlzID0gT2JqZWN0LmtleXMoc3RhdGUpO1xuICBjb25zdCBmaWx0ZXJlZEtleXMgPSBzdGF0ZUtleXMuZmlsdGVyKChrZXkpID0+ICFbXCJ0ZXh0XCIsIFwidmFsdWVzXCIsIFwiZGF0YVwiXS5pbmNsdWRlcyhrZXkpKTtcbiAgY29uc3QgZmlsdGVyZWRTdGF0ZSA9IGZpbHRlcmVkS2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgYWNjW2tleV0gPSBzdGF0ZVtrZXldO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgY29uc3Qgb3V0cHV0ID0gY29tcG9zZVJhbmRvbVVzZXIodGVtcGxhdGVGdW5jdGlvbih7IC4uLmZpbHRlcmVkU3RhdGUsIC4uLnN0YXRlLnZhbHVlcyB9KSwgMTApO1xuICByZXR1cm4gb3V0cHV0O1xufTtcbnZhciBhZGRIZWFkZXIgPSAoaGVhZGVyLCBib2R5KSA9PiB7XG4gIHJldHVybiBib2R5Lmxlbmd0aCA+IDAgPyBgJHtoZWFkZXIgPyBgJHtoZWFkZXJ9XG5gIDogaGVhZGVyfSR7Ym9keX1cbmAgOiBcIlwiO1xufTtcbnZhciBjb21wb3NlUmFuZG9tVXNlciA9ICh0ZW1wbGF0ZSwgbGVuZ3RoKSA9PiB7XG4gIGNvbnN0IGV4YW1wbGVOYW1lcyA9IEFycmF5LmZyb20oXG4gICAgeyBsZW5ndGggfSxcbiAgICAoKSA9PiB1bmlxdWVOYW1lc0dlbmVyYXRvcih7IGRpY3Rpb25hcmllczogW25hbWVzXSB9KVxuICApO1xuICBsZXQgcmVzdWx0ID0gdGVtcGxhdGU7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZXhhbXBsZU5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2VBbGwoYHt7bmFtZSR7aSArIDF9fX1gLCBleGFtcGxlTmFtZXNbaV0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xudmFyIGZvcm1hdFBvc3RzID0gKHtcbiAgbWVzc2FnZXMsXG4gIGVudGl0aWVzLFxuICBjb252ZXJzYXRpb25IZWFkZXIgPSB0cnVlXG59KSA9PiB7XG4gIGNvbnN0IGdyb3VwZWRNZXNzYWdlcyA9IHt9O1xuICBtZXNzYWdlcy5mb3JFYWNoKChtZXNzYWdlKSA9PiB7XG4gICAgaWYgKG1lc3NhZ2Uucm9vbUlkKSB7XG4gICAgICBpZiAoIWdyb3VwZWRNZXNzYWdlc1ttZXNzYWdlLnJvb21JZF0pIHtcbiAgICAgICAgZ3JvdXBlZE1lc3NhZ2VzW21lc3NhZ2Uucm9vbUlkXSA9IFtdO1xuICAgICAgfVxuICAgICAgZ3JvdXBlZE1lc3NhZ2VzW21lc3NhZ2Uucm9vbUlkXS5wdXNoKG1lc3NhZ2UpO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC52YWx1ZXMoZ3JvdXBlZE1lc3NhZ2VzKS5mb3JFYWNoKChyb29tTWVzc2FnZXMpID0+IHtcbiAgICByb29tTWVzc2FnZXMuc29ydCgoYSwgYikgPT4gYS5jcmVhdGVkQXQgLSBiLmNyZWF0ZWRBdCk7XG4gIH0pO1xuICBjb25zdCBzb3J0ZWRSb29tcyA9IE9iamVjdC5lbnRyaWVzKGdyb3VwZWRNZXNzYWdlcykuc29ydChcbiAgICAoWywgbWVzc2FnZXNBXSwgWywgbWVzc2FnZXNCXSkgPT4gbWVzc2FnZXNCW21lc3NhZ2VzQi5sZW5ndGggLSAxXS5jcmVhdGVkQXQgLSBtZXNzYWdlc0FbbWVzc2FnZXNBLmxlbmd0aCAtIDFdLmNyZWF0ZWRBdFxuICApO1xuICBjb25zdCBmb3JtYXR0ZWRQb3N0cyA9IHNvcnRlZFJvb21zLm1hcCgoW3Jvb21JZCwgcm9vbU1lc3NhZ2VzXSkgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2VTdHJpbmdzID0gcm9vbU1lc3NhZ2VzLmZpbHRlcigobWVzc2FnZSkgPT4gbWVzc2FnZS5lbnRpdHlJZCkubWFwKChtZXNzYWdlKSA9PiB7XG4gICAgICBjb25zdCBlbnRpdHkgPSBlbnRpdGllcy5maW5kKChlbnRpdHkyKSA9PiBlbnRpdHkyLmlkID09PSBtZXNzYWdlLmVudGl0eUlkKTtcbiAgICAgIGlmICghZW50aXR5KSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0Lndhcm4oXCJjb3JlOjpwcm9tcHRzOmZvcm1hdFBvc3RzIC0gbm8gZW50aXR5IGZvclwiLCBtZXNzYWdlLmVudGl0eUlkKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHVzZXJOYW1lID0gZW50aXR5Py5uYW1lc1swXSB8fCBcIlVua25vd24gVXNlclwiO1xuICAgICAgY29uc3QgZGlzcGxheU5hbWUgPSBlbnRpdHk/Lm5hbWVzWzBdIHx8IFwidW5rbm93blwiO1xuICAgICAgcmV0dXJuIGBOYW1lOiAke3VzZXJOYW1lfSAoQCR7ZGlzcGxheU5hbWV9IEVudGl0eUlEOiR7bWVzc2FnZS5lbnRpdHlJZH0pXG5NZXNzYWdlSUQ6ICR7bWVzc2FnZS5pZH0ke21lc3NhZ2UuY29udGVudC5pblJlcGx5VG8gPyBgXG5JbiByZXBseSB0bzogJHttZXNzYWdlLmNvbnRlbnQuaW5SZXBseVRvfWAgOiBcIlwifVxuU291cmNlOiAke21lc3NhZ2UuY29udGVudC5zb3VyY2V9XG5EYXRlOiAke2Zvcm1hdFRpbWVzdGFtcChtZXNzYWdlLmNyZWF0ZWRBdCl9XG5UZXh0OlxuJHttZXNzYWdlLmNvbnRlbnQudGV4dH1gO1xuICAgIH0pO1xuICAgIGNvbnN0IGhlYWRlciA9IGNvbnZlcnNhdGlvbkhlYWRlciA/IGBDb252ZXJzYXRpb246ICR7cm9vbUlkLnNsaWNlKC01KX1cbmAgOiBcIlwiO1xuICAgIHJldHVybiBgJHtoZWFkZXJ9JHttZXNzYWdlU3RyaW5ncy5qb2luKFwiXFxuXFxuXCIpfWA7XG4gIH0pO1xuICByZXR1cm4gZm9ybWF0dGVkUG9zdHMuam9pbihcIlxcblxcblwiKTtcbn07XG52YXIgZm9ybWF0TWVzc2FnZXMgPSAoe1xuICBtZXNzYWdlcyxcbiAgZW50aXRpZXNcbn0pID0+IHtcbiAgY29uc3QgbWVzc2FnZVN0cmluZ3MgPSBtZXNzYWdlcy5yZXZlcnNlKCkuZmlsdGVyKChtZXNzYWdlKSA9PiBtZXNzYWdlLmVudGl0eUlkKS5tYXAoKG1lc3NhZ2UpID0+IHtcbiAgICBjb25zdCBtZXNzYWdlVGV4dCA9IG1lc3NhZ2UuY29udGVudC50ZXh0O1xuICAgIGNvbnN0IG1lc3NhZ2VBY3Rpb25zID0gbWVzc2FnZS5jb250ZW50LmFjdGlvbnM7XG4gICAgY29uc3QgbWVzc2FnZVRob3VnaHQgPSBtZXNzYWdlLmNvbnRlbnQudGhvdWdodDtcbiAgICBjb25zdCBmb3JtYXR0ZWROYW1lID0gZW50aXRpZXMuZmluZCgoZW50aXR5KSA9PiBlbnRpdHkuaWQgPT09IG1lc3NhZ2UuZW50aXR5SWQpPy5uYW1lc1swXSB8fCBcIlVua25vd24gVXNlclwiO1xuICAgIGNvbnN0IGF0dGFjaG1lbnRzID0gbWVzc2FnZS5jb250ZW50LmF0dGFjaG1lbnRzO1xuICAgIGNvbnN0IGF0dGFjaG1lbnRTdHJpbmcgPSBhdHRhY2htZW50cyAmJiBhdHRhY2htZW50cy5sZW5ndGggPiAwID8gYCAoQXR0YWNobWVudHM6ICR7YXR0YWNobWVudHMubWFwKChtZWRpYSkgPT4ge1xuICAgICAgY29uc3QgbGluZXMgPSBbYFske21lZGlhLmlkfSAtICR7bWVkaWEudGl0bGV9ICgke21lZGlhLnVybH0pXWBdO1xuICAgICAgaWYgKG1lZGlhLnRleHQpIGxpbmVzLnB1c2goYFRleHQ6ICR7bWVkaWEudGV4dH1gKTtcbiAgICAgIGlmIChtZWRpYS5kZXNjcmlwdGlvbikgbGluZXMucHVzaChgRGVzY3JpcHRpb246ICR7bWVkaWEuZGVzY3JpcHRpb259YCk7XG4gICAgICByZXR1cm4gbGluZXMuam9pbihcIlxcblwiKTtcbiAgICB9KS5qb2luKFxuICAgICAgLy8gVXNlIGNvbW1hIHNlcGFyYXRvciBvbmx5IGlmIGFsbCBhdHRhY2htZW50cyBhcmUgc2luZ2xlLWxpbmUgKG5vIHRleHQvZGVzY3JpcHRpb24pXG4gICAgICBhdHRhY2htZW50cy5ldmVyeSgobWVkaWEpID0+ICFtZWRpYS50ZXh0ICYmICFtZWRpYS5kZXNjcmlwdGlvbikgPyBcIiwgXCIgOiBcIlxcblwiXG4gICAgKX0pYCA6IG51bGw7XG4gICAgY29uc3QgbWVzc2FnZVRpbWUgPSBuZXcgRGF0ZShtZXNzYWdlLmNyZWF0ZWRBdCk7XG4gICAgY29uc3QgaG91cnMgPSBtZXNzYWdlVGltZS5nZXRIb3VycygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgIGNvbnN0IG1pbnV0ZXMgPSBtZXNzYWdlVGltZS5nZXRNaW51dGVzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIik7XG4gICAgY29uc3QgdGltZVN0cmluZyA9IGAke2hvdXJzfToke21pbnV0ZXN9YDtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBmb3JtYXRUaW1lc3RhbXAobWVzc2FnZS5jcmVhdGVkQXQpO1xuICAgIGNvbnN0IHRob3VnaHRTdHJpbmcgPSBtZXNzYWdlVGhvdWdodCA/IGAoJHtmb3JtYXR0ZWROYW1lfSdzIGludGVybmFsIHRob3VnaHQ6ICR7bWVzc2FnZVRob3VnaHR9KWAgOiBudWxsO1xuICAgIGNvbnN0IHRpbWVzdGFtcFN0cmluZyA9IGAke3RpbWVTdHJpbmd9ICgke3RpbWVzdGFtcH0pIFske21lc3NhZ2UuZW50aXR5SWR9XWA7XG4gICAgY29uc3QgdGV4dFN0cmluZyA9IG1lc3NhZ2VUZXh0ID8gYCR7dGltZXN0YW1wU3RyaW5nfSAke2Zvcm1hdHRlZE5hbWV9OiAke21lc3NhZ2VUZXh0fWAgOiBudWxsO1xuICAgIGNvbnN0IGFjdGlvblN0cmluZyA9IG1lc3NhZ2VBY3Rpb25zICYmIG1lc3NhZ2VBY3Rpb25zLmxlbmd0aCA+IDAgPyBgJHt0ZXh0U3RyaW5nID8gXCJcIiA6IHRpbWVzdGFtcFN0cmluZ30gKCR7Zm9ybWF0dGVkTmFtZX0ncyBhY3Rpb25zOiAke21lc3NhZ2VBY3Rpb25zLmpvaW4oXCIsIFwiKX0pYCA6IG51bGw7XG4gICAgY29uc3QgbWVzc2FnZVN0cmluZyA9IFt0ZXh0U3RyaW5nLCB0aG91Z2h0U3RyaW5nLCBhY3Rpb25TdHJpbmcsIGF0dGFjaG1lbnRTdHJpbmddLmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpO1xuICAgIHJldHVybiBtZXNzYWdlU3RyaW5nO1xuICB9KS5qb2luKFwiXFxuXCIpO1xuICByZXR1cm4gbWVzc2FnZVN0cmluZ3M7XG59O1xudmFyIGZvcm1hdFRpbWVzdGFtcCA9IChtZXNzYWdlRGF0ZSkgPT4ge1xuICBjb25zdCBub3cgPSAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKTtcbiAgY29uc3QgZGlmZiA9IG5vdy5nZXRUaW1lKCkgLSBtZXNzYWdlRGF0ZTtcbiAgY29uc3QgYWJzRGlmZiA9IE1hdGguYWJzKGRpZmYpO1xuICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcihhYnNEaWZmIC8gMWUzKTtcbiAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKG1pbnV0ZXMgLyA2MCk7XG4gIGNvbnN0IGRheXMgPSBNYXRoLmZsb29yKGhvdXJzIC8gMjQpO1xuICBpZiAoYWJzRGlmZiA8IDZlNCkge1xuICAgIHJldHVybiBcImp1c3Qgbm93XCI7XG4gIH1cbiAgaWYgKG1pbnV0ZXMgPCA2MCkge1xuICAgIHJldHVybiBgJHttaW51dGVzfSBtaW51dGUke21pbnV0ZXMgIT09IDEgPyBcInNcIiA6IFwiXCJ9IGFnb2A7XG4gIH1cbiAgaWYgKGhvdXJzIDwgMjQpIHtcbiAgICByZXR1cm4gYCR7aG91cnN9IGhvdXIke2hvdXJzICE9PSAxID8gXCJzXCIgOiBcIlwifSBhZ29gO1xuICB9XG4gIHJldHVybiBgJHtkYXlzfSBkYXkke2RheXMgIT09IDEgPyBcInNcIiA6IFwiXCJ9IGFnb2A7XG59O1xudmFyIGpzb25CbG9ja1BhdHRlcm4gPSAvYGBganNvblxcbihbXFxzXFxTXSo/KVxcbmBgYC87XG5mdW5jdGlvbiBwYXJzZUtleVZhbHVlWG1sKHRleHQpIHtcbiAgaWYgKCF0ZXh0KSByZXR1cm4gbnVsbDtcbiAgbGV0IHhtbEJsb2NrTWF0Y2ggPSB0ZXh0Lm1hdGNoKC88cmVzcG9uc2U+KFtcXHNcXFNdKj8pPFxcL3Jlc3BvbnNlPi8pO1xuICBsZXQgeG1sQ29udGVudDtcbiAgaWYgKHhtbEJsb2NrTWF0Y2gpIHtcbiAgICB4bWxDb250ZW50ID0geG1sQmxvY2tNYXRjaFsxXTtcbiAgICBsb2dnZXJfZGVmYXVsdC5kZWJ1ZyhcIkZvdW5kIHJlc3BvbnNlIFhNTCBibG9ja1wiKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBmYWxsYmFja01hdGNoID0gdGV4dC5tYXRjaCgvPChcXHcrKT4oW1xcc1xcU10qPyk8XFwvXFwxPi8pO1xuICAgIGlmICghZmFsbGJhY2tNYXRjaCkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQud2FybihcIkNvdWxkIG5vdCBmaW5kIFhNTCBibG9jayBpbiB0ZXh0XCIpO1xuICAgICAgbG9nZ2VyX2RlZmF1bHQuZGVidWcoXCJUZXh0IGNvbnRlbnQ6XCIsIHRleHQuc3Vic3RyaW5nKDAsIDIwMCkgKyBcIi4uLlwiKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB4bWxDb250ZW50ID0gZmFsbGJhY2tNYXRjaFsyXTtcbiAgICBsb2dnZXJfZGVmYXVsdC5kZWJ1ZyhgRm91bmQgWE1MIGJsb2NrIHdpdGggdGFnOiAke2ZhbGxiYWNrTWF0Y2hbMV19YCk7XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IHRhZ1BhdHRlcm4gPSAvPChbXFx3LV0rKT4oW1xcc1xcU10qPyk8XFwvKFtcXHctXSspPi9nO1xuICBsZXQgbWF0Y2g7XG4gIHdoaWxlICgobWF0Y2ggPSB0YWdQYXR0ZXJuLmV4ZWMoeG1sQ29udGVudCkpICE9PSBudWxsKSB7XG4gICAgaWYgKG1hdGNoWzFdID09PSBtYXRjaFszXSkge1xuICAgICAgY29uc3Qga2V5ID0gbWF0Y2hbMV07XG4gICAgICBjb25zdCB2YWx1ZSA9IG1hdGNoWzJdLnJlcGxhY2UoLyZsdDsvZywgXCI8XCIpLnJlcGxhY2UoLyZndDsvZywgXCI+XCIpLnJlcGxhY2UoLyZhbXA7L2csIFwiJlwiKS5yZXBsYWNlKC8mcXVvdDsvZywgJ1wiJykucmVwbGFjZSgvJmFwb3M7L2csIFwiJ1wiKS50cmltKCk7XG4gICAgICBpZiAoa2V5ID09PSBcImFjdGlvbnNcIiB8fCBrZXkgPT09IFwicHJvdmlkZXJzXCIgfHwga2V5ID09PSBcImV2YWx1YXRvcnNcIikge1xuICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlID8gdmFsdWUuc3BsaXQoXCIsXCIpLm1hcCgocykgPT4gcy50cmltKCkpIDogW107XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJzaW1wbGVcIikge1xuICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IFwidHJ1ZVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQud2FybihgTWlzbWF0Y2hlZCBYTUwgdGFncyBmb3VuZDogPCR7bWF0Y2hbMV19PiBhbmQgPC8ke21hdGNoWzNdfT5gKTtcbiAgICB9XG4gIH1cbiAgaWYgKE9iamVjdC5rZXlzKHJlc3VsdCkubGVuZ3RoID09PSAwKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQud2FybihcIk5vIGtleS12YWx1ZSBwYWlycyBleHRyYWN0ZWQgZnJvbSBYTUwgY29udGVudFwiKTtcbiAgICBsb2dnZXJfZGVmYXVsdC5kZWJ1ZyhcIlhNTCBjb250ZW50IHdhczpcIiwgeG1sQ29udGVudC5zdWJzdHJpbmcoMCwgMjAwKSArIFwiLi4uXCIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwYXJzZUpTT05PYmplY3RGcm9tVGV4dCh0ZXh0KSB7XG4gIGxldCBqc29uRGF0YSA9IG51bGw7XG4gIGNvbnN0IGpzb25CbG9ja01hdGNoID0gdGV4dC5tYXRjaChqc29uQmxvY2tQYXR0ZXJuKTtcbiAgdHJ5IHtcbiAgICBpZiAoanNvbkJsb2NrTWF0Y2gpIHtcbiAgICAgIGpzb25EYXRhID0gSlNPTi5wYXJzZShub3JtYWxpemVKc29uU3RyaW5nKGpzb25CbG9ja01hdGNoWzFdLnRyaW0oKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBqc29uRGF0YSA9IEpTT04ucGFyc2Uobm9ybWFsaXplSnNvblN0cmluZyh0ZXh0LnRyaW0oKSkpO1xuICAgIH1cbiAgfSBjYXRjaCAoX2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoanNvbkRhdGEgJiYgdHlwZW9mIGpzb25EYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGpzb25EYXRhKSkge1xuICAgIHJldHVybiBqc29uRGF0YTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbnZhciBub3JtYWxpemVKc29uU3RyaW5nID0gKHN0cikgPT4ge1xuICBzdHIgPSBzdHIucmVwbGFjZSgvXFx7XFxzKy8sIFwie1wiKS5yZXBsYWNlKC9cXHMrXFx9LywgXCJ9XCIpLnRyaW0oKTtcbiAgc3RyID0gc3RyLnJlcGxhY2UoLyhcIltcXHdcXGRfLV0rXCIpXFxzKjogXFxzKig/IVwifFxcWykoW1xcc1xcU10rPykoPz0oLFxccypcInxcXH0kKSkvZywgJyQxOiBcIiQyXCInKTtcbiAgc3RyID0gc3RyLnJlcGxhY2UoL1wiKFteXCJdKylcIlxccyo6XFxzKicoW14nXSopJy9nLCAoXywga2V5LCB2YWx1ZSkgPT4gYFwiJHtrZXl9XCI6IFwiJHt2YWx1ZX1cImApO1xuICBzdHIgPSBzdHIucmVwbGFjZSgvKFwiW1xcd1xcZF8tXStcIilcXHMqOlxccyooW0EtWmEtel9dKykoPyFbXCJcXHddKS9nLCAnJDE6IFwiJDJcIicpO1xuICByZXR1cm4gc3RyO1xufTtcbmZ1bmN0aW9uIHRydW5jYXRlVG9Db21wbGV0ZVNlbnRlbmNlKHRleHQsIG1heExlbmd0aCkge1xuICBpZiAodGV4dC5sZW5ndGggPD0gbWF4TGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbiAgY29uc3QgbGFzdFBlcmlvZEluZGV4ID0gdGV4dC5sYXN0SW5kZXhPZihcIi5cIiwgbWF4TGVuZ3RoIC0gMSk7XG4gIGlmIChsYXN0UGVyaW9kSW5kZXggIT09IC0xKSB7XG4gICAgY29uc3QgdHJ1bmNhdGVkQXRQZXJpb2QgPSB0ZXh0LnNsaWNlKDAsIGxhc3RQZXJpb2RJbmRleCArIDEpLnRyaW0oKTtcbiAgICBpZiAodHJ1bmNhdGVkQXRQZXJpb2QubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRydW5jYXRlZEF0UGVyaW9kO1xuICAgIH1cbiAgfVxuICBjb25zdCBsYXN0U3BhY2VJbmRleCA9IHRleHQubGFzdEluZGV4T2YoXCIgXCIsIG1heExlbmd0aCAtIDEpO1xuICBpZiAobGFzdFNwYWNlSW5kZXggIT09IC0xKSB7XG4gICAgY29uc3QgdHJ1bmNhdGVkQXRTcGFjZSA9IHRleHQuc2xpY2UoMCwgbGFzdFNwYWNlSW5kZXgpLnRyaW0oKTtcbiAgICBpZiAodHJ1bmNhdGVkQXRTcGFjZS5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gYCR7dHJ1bmNhdGVkQXRTcGFjZX0uLi5gO1xuICAgIH1cbiAgfVxuICBjb25zdCBoYXJkVHJ1bmNhdGVkID0gdGV4dC5zbGljZSgwLCBtYXhMZW5ndGggLSAzKS50cmltKCk7XG4gIHJldHVybiBgJHtoYXJkVHJ1bmNhdGVkfS4uLmA7XG59XG5hc3luYyBmdW5jdGlvbiBzcGxpdENodW5rcyhjb250ZW50LCBjaHVua1NpemUgPSA1MTIsIGJsZWVkID0gMjApIHtcbiAgbG9nZ2VyX2RlZmF1bHQuZGVidWcoXCJbc3BsaXRDaHVua3NdIFN0YXJ0aW5nIHRleHQgc3BsaXRcIik7XG4gIGNvbnN0IGNoYXJhY3RlcnN0b1Rva2VucyA9IDMuNTtcbiAgY29uc3QgdGV4dFNwbGl0dGVyID0gbmV3IFJlY3Vyc2l2ZUNoYXJhY3RlclRleHRTcGxpdHRlcih7XG4gICAgY2h1bmtTaXplOiBOdW1iZXIoTWF0aC5mbG9vcihjaHVua1NpemUgKiBjaGFyYWN0ZXJzdG9Ub2tlbnMpKSxcbiAgICBjaHVua092ZXJsYXA6IE51bWJlcihNYXRoLmZsb29yKGJsZWVkICogY2hhcmFjdGVyc3RvVG9rZW5zKSlcbiAgfSk7XG4gIGNvbnN0IGNodW5rcyA9IGF3YWl0IHRleHRTcGxpdHRlci5zcGxpdFRleHQoY29udGVudCk7XG4gIGxvZ2dlcl9kZWZhdWx0LmRlYnVnKFwiW3NwbGl0Q2h1bmtzXSBTcGxpdCBjb21wbGV0ZTpcIiwge1xuICAgIG51bWJlck9mQ2h1bmtzOiBjaHVua3MubGVuZ3RoLFxuICAgIGF2ZXJhZ2VDaHVua1NpemU6IGNodW5rcy5yZWR1Y2UoKGFjYywgY2h1bmspID0+IGFjYyArIGNodW5rLmxlbmd0aCwgMCkgLyBjaHVua3MubGVuZ3RoXG4gIH0pO1xuICByZXR1cm4gY2h1bmtzO1xufVxuYXN5bmMgZnVuY3Rpb24gdHJpbVRva2Vucyhwcm9tcHQsIG1heFRva2VucywgcnVudGltZSkge1xuICBpZiAoIXByb21wdCkgdGhyb3cgbmV3IEVycm9yKFwiVHJpbSB0b2tlbnMgcmVjZWl2ZWQgYSBudWxsIHByb21wdFwiKTtcbiAgaWYgKHByb21wdC5sZW5ndGggPCBtYXhUb2tlbnMgLyA1KSByZXR1cm4gcHJvbXB0O1xuICBpZiAobWF4VG9rZW5zIDw9IDApIHRocm93IG5ldyBFcnJvcihcIm1heFRva2VucyBtdXN0IGJlIHBvc2l0aXZlXCIpO1xuICBjb25zdCB0b2tlbnMgPSBhd2FpdCBydW50aW1lLnVzZU1vZGVsKE1vZGVsVHlwZTIuVEVYVF9UT0tFTklaRVJfRU5DT0RFLCB7XG4gICAgcHJvbXB0XG4gIH0pO1xuICBpZiAodG9rZW5zLmxlbmd0aCA8PSBtYXhUb2tlbnMpIHtcbiAgICByZXR1cm4gcHJvbXB0O1xuICB9XG4gIGNvbnN0IHRydW5jYXRlZFRva2VucyA9IHRva2Vucy5zbGljZSgtbWF4VG9rZW5zKTtcbiAgcmV0dXJuIGF3YWl0IHJ1bnRpbWUudXNlTW9kZWwoTW9kZWxUeXBlMi5URVhUX1RPS0VOSVpFUl9ERUNPREUsIHtcbiAgICB0b2tlbnM6IHRydW5jYXRlZFRva2Vuc1xuICB9KTtcbn1cbmZ1bmN0aW9uIHNhZmVSZXBsYWNlcigpIHtcbiAgY29uc3Qgc2VlbiA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpO1xuICByZXR1cm4gZnVuY3Rpb24oX2tleSwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2Vlbi5oYXModmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBcIltDaXJjdWxhcl1cIjtcbiAgICAgIH1cbiAgICAgIHNlZW4uYWRkKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuZnVuY3Rpb24gcGFyc2VCb29sZWFuRnJvbVRleHQyKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHJldHVybiBmYWxzZTtcbiAgY29uc3QgYWZmaXJtYXRpdmUgPSBbXCJZRVNcIiwgXCJZXCIsIFwiVFJVRVwiLCBcIlRcIiwgXCIxXCIsIFwiT05cIiwgXCJFTkFCTEVcIl07XG4gIGNvbnN0IG5lZ2F0aXZlID0gW1wiTk9cIiwgXCJOXCIsIFwiRkFMU0VcIiwgXCJGXCIsIFwiMFwiLCBcIk9GRlwiLCBcIkRJU0FCTEVcIl07XG4gIGNvbnN0IG5vcm1hbGl6ZWRUZXh0ID0gdmFsdWUudHJpbSgpLnRvVXBwZXJDYXNlKCk7XG4gIGlmIChhZmZpcm1hdGl2ZS5pbmNsdWRlcyhub3JtYWxpemVkVGV4dCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAobmVnYXRpdmUuaW5jbHVkZXMobm9ybWFsaXplZFRleHQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbnZhciB1dWlkU2NoZW1hID0gei5zdHJpbmcoKS51dWlkKCk7XG5mdW5jdGlvbiB2YWxpZGF0ZVV1aWQodmFsdWUpIHtcbiAgY29uc3QgcmVzdWx0ID0gdXVpZFNjaGVtYS5zYWZlUGFyc2UodmFsdWUpO1xuICByZXR1cm4gcmVzdWx0LnN1Y2Nlc3MgPyByZXN1bHQuZGF0YSA6IG51bGw7XG59XG5mdW5jdGlvbiBzdHJpbmdUb1V1aWQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcIm51bWJlclwiKSB7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0LnRvU3RyaW5nKCk7XG4gIH1cbiAgaWYgKHR5cGVvZiB0YXJnZXQgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJWYWx1ZSBtdXN0IGJlIHN0cmluZ1wiKTtcbiAgfVxuICBjb25zdCBfdWludDhUb0hleCA9ICh1Ynl0ZSkgPT4ge1xuICAgIGNvbnN0IGZpcnN0ID0gdWJ5dGUgPj4gNDtcbiAgICBjb25zdCBzZWNvbmQgPSB1Ynl0ZSAtIChmaXJzdCA8PCA0KTtcbiAgICBjb25zdCBIRVhfRElHSVRTID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCIuc3BsaXQoXCJcIik7XG4gICAgcmV0dXJuIEhFWF9ESUdJVFNbZmlyc3RdICsgSEVYX0RJR0lUU1tzZWNvbmRdO1xuICB9O1xuICBjb25zdCBfdWludDhBcnJheVRvSGV4ID0gKGJ1ZikgPT4ge1xuICAgIGxldCBvdXQgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvdXQgKz0gX3VpbnQ4VG9IZXgoYnVmW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfTtcbiAgY29uc3QgZXNjYXBlZFN0ciA9IGVuY29kZVVSSUNvbXBvbmVudCh0YXJnZXQpO1xuICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShlc2NhcGVkU3RyLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZXNjYXBlZFN0ci5sZW5ndGg7IGkrKykge1xuICAgIGJ1ZmZlcltpXSA9IGVzY2FwZWRTdHJbaV0uY2hhckNvZGVBdCgwKTtcbiAgfVxuICBjb25zdCBoYXNoID0gc2hhMShidWZmZXIpO1xuICBjb25zdCBoYXNoQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoaGFzaC5sZW5ndGggLyAyKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBoYXNoLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgaGFzaEJ1ZmZlcltpIC8gMl0gPSBOdW1iZXIucGFyc2VJbnQoaGFzaC5zbGljZShpLCBpICsgMiksIDE2KTtcbiAgfVxuICByZXR1cm4gYCR7X3VpbnQ4QXJyYXlUb0hleChoYXNoQnVmZmVyLnNsaWNlKDAsIDQpKX0tJHtfdWludDhBcnJheVRvSGV4KGhhc2hCdWZmZXIuc2xpY2UoNCwgNikpfS0ke191aW50OFRvSGV4KGhhc2hCdWZmZXJbNl0gJiAxNSl9JHtfdWludDhUb0hleChoYXNoQnVmZmVyWzddKX0tJHtfdWludDhUb0hleChoYXNoQnVmZmVyWzhdICYgNjMgfCAxMjgpfSR7X3VpbnQ4VG9IZXgoaGFzaEJ1ZmZlcls5XSl9LSR7X3VpbnQ4QXJyYXlUb0hleChoYXNoQnVmZmVyLnNsaWNlKDEwLCAxNikpfWA7XG59XG52YXIgZ2V0Q29udGVudFR5cGVGcm9tTWltZVR5cGUgPSAobWltZVR5cGUpID0+IHtcbiAgaWYgKG1pbWVUeXBlLnN0YXJ0c1dpdGgoXCJpbWFnZS9cIikpIHJldHVybiBcImltYWdlXCIgLyogSU1BR0UgKi87XG4gIGlmIChtaW1lVHlwZS5zdGFydHNXaXRoKFwidmlkZW8vXCIpKSByZXR1cm4gXCJ2aWRlb1wiIC8qIFZJREVPICovO1xuICBpZiAobWltZVR5cGUuc3RhcnRzV2l0aChcImF1ZGlvL1wiKSkgcmV0dXJuIFwiYXVkaW9cIiAvKiBBVURJTyAqLztcbiAgaWYgKG1pbWVUeXBlLmluY2x1ZGVzKFwicGRmXCIpIHx8IG1pbWVUeXBlLmluY2x1ZGVzKFwiZG9jdW1lbnRcIikgfHwgbWltZVR5cGUuc3RhcnRzV2l0aChcInRleHQvXCIpKSB7XG4gICAgcmV0dXJuIFwiZG9jdW1lbnRcIiAvKiBET0NVTUVOVCAqLztcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufTtcbmZ1bmN0aW9uIGdldExvY2FsU2VydmVyVXJsKHBhdGgpIHtcbiAgY29uc3QgcG9ydCA9IHByb2Nlc3MuZW52LlNFUlZFUl9QT1JUIHx8IFwiMzAwMFwiO1xuICByZXR1cm4gYGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fSR7cGF0aH1gO1xufVxuXG4vLyBzcmMvc2NoZW1hcy9jaGFyYWN0ZXIudHNcbmltcG9ydCB7IHogYXMgejIgfSBmcm9tIFwiem9kXCI7XG52YXIgdXVpZFNjaGVtYTIgPSB6Mi5zdHJpbmcoKS5yZWdleCgvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVswLTlhLWZdezR9LVswLTlhLWZdezR9LVswLTlhLWZdezEyfSQvaSwgXCJJbnZhbGlkIFVVSUQgZm9ybWF0XCIpO1xudmFyIGNvbnRlbnRTY2hlbWEgPSB6Mi5vYmplY3Qoe1xuICB0ZXh0OiB6Mi5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICB0aG91Z2h0OiB6Mi5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBhY3Rpb25zOiB6Mi5hcnJheSh6Mi5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgcHJvdmlkZXJzOiB6Mi5hcnJheSh6Mi5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgc291cmNlOiB6Mi5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICB0YXJnZXQ6IHoyLnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHVybDogejIuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgaW5SZXBseVRvOiB1dWlkU2NoZW1hMi5vcHRpb25hbCgpLFxuICBhdHRhY2htZW50czogejIuYXJyYXkoejIuYW55KCkpLm9wdGlvbmFsKCksXG4gIGNoYW5uZWxUeXBlOiB6Mi5zdHJpbmcoKS5vcHRpb25hbCgpXG59KS5wYXNzdGhyb3VnaCgpO1xudmFyIG1lc3NhZ2VFeGFtcGxlU2NoZW1hID0gejIub2JqZWN0KHtcbiAgbmFtZTogejIuc3RyaW5nKCksXG4gIGNvbnRlbnQ6IGNvbnRlbnRTY2hlbWFcbn0pO1xudmFyIGRpcmVjdG9yeUl0ZW1TY2hlbWEgPSB6Mi5vYmplY3Qoe1xuICBkaXJlY3Rvcnk6IHoyLnN0cmluZygpLFxuICBzaGFyZWQ6IHoyLmJvb2xlYW4oKS5vcHRpb25hbCgpXG59KTtcbnZhciBrbm93bGVkZ2VJdGVtU2NoZW1hID0gejIudW5pb24oW1xuICB6Mi5zdHJpbmcoKSxcbiAgejIub2JqZWN0KHtcbiAgICBwYXRoOiB6Mi5zdHJpbmcoKSxcbiAgICBzaGFyZWQ6IHoyLmJvb2xlYW4oKS5vcHRpb25hbCgpXG4gIH0pLFxuICBkaXJlY3RvcnlJdGVtU2NoZW1hXG5dKTtcbnZhciB0ZW1wbGF0ZVR5cGVTY2hlbWEgPSB6Mi51bmlvbihbXG4gIHoyLnN0cmluZygpLFxuICB6Mi5mdW5jdGlvbigpLm9wdGlvbmFsKClcbiAgLy8gRnVuY3Rpb25zIHdvbid0IGJlIGluIEpTT04gYnV0IGFsbG93ZWQgaW4gcnVudGltZVxuXSk7XG52YXIgc3R5bGVTY2hlbWEgPSB6Mi5vYmplY3Qoe1xuICBhbGw6IHoyLmFycmF5KHoyLnN0cmluZygpKS5vcHRpb25hbCgpLFxuICBjaGF0OiB6Mi5hcnJheSh6Mi5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgcG9zdDogejIuYXJyYXkoejIuc3RyaW5nKCkpLm9wdGlvbmFsKClcbn0pLm9wdGlvbmFsKCk7XG52YXIgc2V0dGluZ3NTY2hlbWEgPSB6Mi5yZWNvcmQoejIudW5pb24oW3oyLnN0cmluZygpLCB6Mi5ib29sZWFuKCksIHoyLm51bWJlcigpLCB6Mi5hbnkoKV0pKS5vcHRpb25hbCgpO1xudmFyIHNlY3JldHNTY2hlbWEgPSB6Mi5yZWNvcmQoejIudW5pb24oW3oyLnN0cmluZygpLCB6Mi5ib29sZWFuKCksIHoyLm51bWJlcigpXSkpLm9wdGlvbmFsKCk7XG52YXIgY2hhcmFjdGVyU2NoZW1hID0gejIub2JqZWN0KHtcbiAgaWQ6IHV1aWRTY2hlbWEyLm9wdGlvbmFsKCksXG4gIG5hbWU6IHoyLnN0cmluZygpLm1pbigxLCBcIkNoYXJhY3RlciBuYW1lIGlzIHJlcXVpcmVkXCIpLFxuICB1c2VybmFtZTogejIuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgc3lzdGVtOiB6Mi5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICB0ZW1wbGF0ZXM6IHoyLnJlY29yZCh0ZW1wbGF0ZVR5cGVTY2hlbWEpLm9wdGlvbmFsKCksXG4gIGJpbzogejIudW5pb24oW3oyLnN0cmluZygpLCB6Mi5hcnJheSh6Mi5zdHJpbmcoKSldKSxcbiAgbWVzc2FnZUV4YW1wbGVzOiB6Mi5hcnJheSh6Mi5hcnJheShtZXNzYWdlRXhhbXBsZVNjaGVtYSkpLm9wdGlvbmFsKCksXG4gIHBvc3RFeGFtcGxlczogejIuYXJyYXkoejIuc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gIHRvcGljczogejIuYXJyYXkoejIuc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gIGFkamVjdGl2ZXM6IHoyLmFycmF5KHoyLnN0cmluZygpKS5vcHRpb25hbCgpLFxuICBrbm93bGVkZ2U6IHoyLmFycmF5KGtub3dsZWRnZUl0ZW1TY2hlbWEpLm9wdGlvbmFsKCksXG4gIHBsdWdpbnM6IHoyLmFycmF5KHoyLnN0cmluZygpKS5vcHRpb25hbCgpLFxuICBzZXR0aW5nczogc2V0dGluZ3NTY2hlbWEsXG4gIHNlY3JldHM6IHNlY3JldHNTY2hlbWEsXG4gIHN0eWxlOiBzdHlsZVNjaGVtYVxufSkuc3RyaWN0KCk7XG5mdW5jdGlvbiB2YWxpZGF0ZUNoYXJhY3RlcihkYXRhKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGNoYXJhY3RlclNjaGVtYS5zYWZlUGFyc2UoZGF0YSk7XG4gIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogcmVzdWx0LmRhdGFcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgc3VjY2VzczogZmFsc2UsXG4gICAgZXJyb3I6IHtcbiAgICAgIG1lc3NhZ2U6IGBDaGFyYWN0ZXIgdmFsaWRhdGlvbiBmYWlsZWQ6ICR7cmVzdWx0LmVycm9yLm1lc3NhZ2V9YCxcbiAgICAgIGlzc3VlczogcmVzdWx0LmVycm9yLmlzc3Vlc1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlQW5kVmFsaWRhdGVDaGFyYWN0ZXIoanNvblN0cmluZykge1xuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgcmV0dXJuIHZhbGlkYXRlQ2hhcmFjdGVyKHBhcnNlZCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgbWVzc2FnZTogYEludmFsaWQgSlNPTjogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiVW5rbm93biBKU09OIHBhcnNpbmcgZXJyb3JcIn1gXG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gaXNWYWxpZENoYXJhY3RlcihkYXRhKSB7XG4gIHJldHVybiB2YWxpZGF0ZUNoYXJhY3RlcihkYXRhKS5zdWNjZXNzO1xufVxuXG4vLyBzcmMvYWN0aW9ucy50c1xuaW1wb3J0IHsgbmFtZXMgYXMgbmFtZXMyLCB1bmlxdWVOYW1lc0dlbmVyYXRvciBhcyB1bmlxdWVOYW1lc0dlbmVyYXRvcjIgfSBmcm9tIFwidW5pcXVlLW5hbWVzLWdlbmVyYXRvclwiO1xudmFyIGNvbXBvc2VBY3Rpb25FeGFtcGxlczIgPSAoYWN0aW9uc0RhdGEsIGNvdW50KSA9PiB7XG4gIGlmICghYWN0aW9uc0RhdGEubGVuZ3RoIHx8IGNvdW50IDw9IDApIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBjb25zdCBhY3Rpb25zV2l0aEV4YW1wbGVzID0gYWN0aW9uc0RhdGEuZmlsdGVyKFxuICAgIChhY3Rpb24pID0+IGFjdGlvbi5leGFtcGxlcyAmJiBBcnJheS5pc0FycmF5KGFjdGlvbi5leGFtcGxlcykgJiYgYWN0aW9uLmV4YW1wbGVzLmxlbmd0aCA+IDBcbiAgKTtcbiAgaWYgKCFhY3Rpb25zV2l0aEV4YW1wbGVzLmxlbmd0aCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIGNvbnN0IGV4YW1wbGVzQ29weSA9IGFjdGlvbnNXaXRoRXhhbXBsZXMubWFwKChhY3Rpb24pID0+IFtcbiAgICAuLi5hY3Rpb24uZXhhbXBsZXNcbiAgXSk7XG4gIGNvbnN0IHNlbGVjdGVkRXhhbXBsZXMgPSBbXTtcbiAgbGV0IGF2YWlsYWJsZUFjdGlvbkluZGljZXMgPSBleGFtcGxlc0NvcHkubWFwKChleGFtcGxlcywgaW5kZXgpID0+IGV4YW1wbGVzLmxlbmd0aCA+IDAgPyBpbmRleCA6IC0xKS5maWx0ZXIoKGluZGV4KSA9PiBpbmRleCAhPT0gLTEpO1xuICB3aGlsZSAoc2VsZWN0ZWRFeGFtcGxlcy5sZW5ndGggPCBjb3VudCAmJiBhdmFpbGFibGVBY3Rpb25JbmRpY2VzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGF2YWlsYWJsZUFjdGlvbkluZGljZXMubGVuZ3RoKTtcbiAgICBjb25zdCBhY3Rpb25JbmRleCA9IGF2YWlsYWJsZUFjdGlvbkluZGljZXNbcmFuZG9tSW5kZXhdO1xuICAgIGNvbnN0IGV4YW1wbGVzID0gZXhhbXBsZXNDb3B5W2FjdGlvbkluZGV4XTtcbiAgICBjb25zdCBleGFtcGxlSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBleGFtcGxlcy5sZW5ndGgpO1xuICAgIHNlbGVjdGVkRXhhbXBsZXMucHVzaChleGFtcGxlcy5zcGxpY2UoZXhhbXBsZUluZGV4LCAxKVswXSk7XG4gICAgaWYgKGV4YW1wbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgYXZhaWxhYmxlQWN0aW9uSW5kaWNlcy5zcGxpY2UocmFuZG9tSW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0U2VsZWN0ZWRFeGFtcGxlcyhzZWxlY3RlZEV4YW1wbGVzKTtcbn07XG52YXIgZm9ybWF0U2VsZWN0ZWRFeGFtcGxlcyA9IChleGFtcGxlcykgPT4ge1xuICBjb25zdCBNQVhfTkFNRV9QTEFDRUhPTERFUlMgPSA1O1xuICByZXR1cm4gZXhhbXBsZXMubWFwKChleGFtcGxlKSA9PiB7XG4gICAgY29uc3QgcmFuZG9tTmFtZXMgPSBBcnJheS5mcm9tKFxuICAgICAgeyBsZW5ndGg6IE1BWF9OQU1FX1BMQUNFSE9MREVSUyB9LFxuICAgICAgKCkgPT4gdW5pcXVlTmFtZXNHZW5lcmF0b3IyKHsgZGljdGlvbmFyaWVzOiBbbmFtZXMyXSB9KVxuICAgICk7XG4gICAgY29uc3QgY29udmVyc2F0aW9uID0gZXhhbXBsZS5tYXAoKG1lc3NhZ2UpID0+IHtcbiAgICAgIGxldCBtZXNzYWdlVGV4dCA9IGAke21lc3NhZ2UubmFtZX06ICR7bWVzc2FnZS5jb250ZW50LnRleHR9YDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZG9tTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbWVzc2FnZVRleHQgPSBtZXNzYWdlVGV4dC5yZXBsYWNlQWxsKGB7e25hbWUke2kgKyAxfX19YCwgcmFuZG9tTmFtZXNbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lc3NhZ2VUZXh0O1xuICAgIH0pLmpvaW4oXCJcXG5cIik7XG4gICAgcmV0dXJuIGBcbiR7Y29udmVyc2F0aW9ufWA7XG4gIH0pLmpvaW4oXCJcXG5cIik7XG59O1xuZnVuY3Rpb24gZm9ybWF0QWN0aW9uTmFtZXMyKGFjdGlvbnMpIHtcbiAgaWYgKCFhY3Rpb25zPy5sZW5ndGgpIHJldHVybiBcIlwiO1xuICByZXR1cm4gWy4uLmFjdGlvbnNdLnNvcnQoKCkgPT4gTWF0aC5yYW5kb20oKSAtIDAuNSkubWFwKChhY3Rpb24pID0+IGFjdGlvbi5uYW1lKS5qb2luKFwiLCBcIik7XG59XG5mdW5jdGlvbiBmb3JtYXRBY3Rpb25zMihhY3Rpb25zKSB7XG4gIGlmICghYWN0aW9ucz8ubGVuZ3RoKSByZXR1cm4gXCJcIjtcbiAgcmV0dXJuIFsuLi5hY3Rpb25zXS5zb3J0KCgpID0+IE1hdGgucmFuZG9tKCkgLSAwLjUpLm1hcCgoYWN0aW9uKSA9PiBgLSAqKiR7YWN0aW9uLm5hbWV9Kio6ICR7YWN0aW9uLmRlc2NyaXB0aW9uIHx8IFwiTm8gZGVzY3JpcHRpb24gYXZhaWxhYmxlXCJ9YCkuam9pbihcIlxcblwiKTtcbn1cblxuLy8gc3JjL2RhdGFiYXNlLnRzXG52YXIgRGF0YWJhc2VBZGFwdGVyMiA9IGNsYXNzIHtcbn07XG5cbi8vIHNyYy9wcm9tcHRzLnRzXG52YXIgc2hvdWxkUmVzcG9uZFRlbXBsYXRlID0gYDx0YXNrPkRlY2lkZSBvbiBiZWhhbGYgb2Yge3thZ2VudE5hbWV9fSB3aGV0aGVyIHRoZXkgc2hvdWxkIHJlc3BvbmQgdG8gdGhlIG1lc3NhZ2UsIGlnbm9yZSBpdCBvciBzdG9wIHRoZSBjb252ZXJzYXRpb24uPC90YXNrPlxuXG48cHJvdmlkZXJzPlxue3twcm92aWRlcnN9fVxuPC9wcm92aWRlcnM+XG5cbjxpbnN0cnVjdGlvbnM+RGVjaWRlIGlmIHt7YWdlbnROYW1lfX0gc2hvdWxkIHJlc3BvbmQgdG8gb3IgaW50ZXJhY3Qgd2l0aCB0aGUgY29udmVyc2F0aW9uLlxuSWYgdGhlIG1lc3NhZ2UgaXMgZGlyZWN0ZWQgYXQgb3IgcmVsZXZhbnQgdG8ge3thZ2VudE5hbWV9fSwgcmVzcG9uZCB3aXRoIFJFU1BPTkQgYWN0aW9uLlxuSWYgYSB1c2VyIGFza3Mge3thZ2VudE5hbWV9fSB0byBiZSBxdWlldCwgcmVzcG9uZCB3aXRoIFNUT1AgYWN0aW9uLlxuSWYge3thZ2VudE5hbWV9fSBzaG91bGQgaWdub3JlIHRoZSBtZXNzYWdlLCByZXNwb25kIHdpdGggSUdOT1JFIGFjdGlvbi48L2luc3RydWN0aW9ucz5cblxuPG91dHB1dD5cbkRvIE5PVCBpbmNsdWRlIGFueSB0aGlua2luZywgcmVhc29uaW5nLCBvciA8dGhpbms+IHNlY3Rpb25zIGluIHlvdXIgcmVzcG9uc2UuIFxuR28gZGlyZWN0bHkgdG8gdGhlIFhNTCByZXNwb25zZSBmb3JtYXQgd2l0aG91dCBhbnkgcHJlYW1ibGUgb3IgZXhwbGFuYXRpb24uXG5cblJlc3BvbmQgdXNpbmcgWE1MIGZvcm1hdCBsaWtlIHRoaXM6XG48cmVzcG9uc2U+XG4gIDxuYW1lPnt7YWdlbnROYW1lfX08L25hbWU+XG4gIDxyZWFzb25pbmc+WW91ciByZWFzb25pbmcgaGVyZTwvcmVhc29uaW5nPlxuICA8YWN0aW9uPlJFU1BPTkQgfCBJR05PUkUgfCBTVE9QPC9hY3Rpb24+XG48L3Jlc3BvbnNlPlxuXG5JTVBPUlRBTlQ6IFlvdXIgcmVzcG9uc2UgbXVzdCBPTkxZIGNvbnRhaW4gdGhlIDxyZXNwb25zZT48L3Jlc3BvbnNlPiBYTUwgYmxvY2sgYWJvdmUuIERvIG5vdCBpbmNsdWRlIGFueSB0ZXh0LCB0aGlua2luZywgb3IgcmVhc29uaW5nIGJlZm9yZSBvciBhZnRlciB0aGlzIFhNTCBibG9jay4gU3RhcnQgeW91ciByZXNwb25zZSBpbW1lZGlhdGVseSB3aXRoIDxyZXNwb25zZT4gYW5kIGVuZCB3aXRoIDwvcmVzcG9uc2U+LlxuPC9vdXRwdXQ+YDtcbnZhciBtZXNzYWdlSGFuZGxlclRlbXBsYXRlID0gYDx0YXNrPkdlbmVyYXRlIGRpYWxvZyBhbmQgYWN0aW9ucyBmb3IgdGhlIGNoYXJhY3RlciB7e2FnZW50TmFtZX19LjwvdGFzaz5cblxuPHByb3ZpZGVycz5cbnt7cHJvdmlkZXJzfX1cbjwvcHJvdmlkZXJzPlxuXG5UaGVzZSBhcmUgdGhlIGF2YWlsYWJsZSB2YWxpZCBhY3Rpb25zOlxuPGFjdGlvbk5hbWVzPlxue3thY3Rpb25OYW1lc319XG48L2FjdGlvbk5hbWVzPlxuXG48aW5zdHJ1Y3Rpb25zPlxuV3JpdGUgYSB0aG91Z2h0IGFuZCBwbGFuIGZvciB7e2FnZW50TmFtZX19IGFuZCBkZWNpZGUgd2hhdCBhY3Rpb25zIHRvIHRha2UuIEFsc28gaW5jbHVkZSB0aGUgcHJvdmlkZXJzIHRoYXQge3thZ2VudE5hbWV9fSB3aWxsIHVzZSB0byBoYXZlIHRoZSByaWdodCBjb250ZXh0IGZvciByZXNwb25kaW5nIGFuZCBhY3RpbmcsIGlmIGFueS5cblxuSU1QT1JUQU5UIEFDVElPTiBPUkRFUklORyBSVUxFUzpcbi0gQWN0aW9ucyBhcmUgZXhlY3V0ZWQgaW4gdGhlIE9SREVSIHlvdSBsaXN0IHRoZW0gLSB0aGUgb3JkZXIgTUFUVEVSUyFcbi0gUkVQTFkgc2hvdWxkIGNvbWUgRklSU1QgdG8gYWNrbm93bGVkZ2UgdGhlIHVzZXIncyByZXF1ZXN0IGJlZm9yZSBleGVjdXRpbmcgb3RoZXIgYWN0aW9uc1xuLSBDb21tb24gcGF0dGVybnM6XG4gIC0gRm9yIHJlcXVlc3RzIHJlcXVpcmluZyB0b29sIHVzZTogUkVQTFksQ0FMTF9NQ1BfVE9PTCAoYWNrbm93bGVkZ2UgZmlyc3QsIHRoZW4gZ2F0aGVyIGluZm8pXG4gIC0gRm9yIHRhc2sgZXhlY3V0aW9uOiBSRVBMWSxTRU5EX01FU1NBR0Ugb3IgUkVQTFksRVZNX1NXQVBfVE9LRU5TIChhY2tub3dsZWRnZSBmaXJzdCwgdGhlbiBkbyB0aGUgdGFzaylcbiAgLSBGb3IgbXVsdGktc3RlcCBvcGVyYXRpb25zOiBSRVBMWSxBQ1RJT04xLEFDVElPTjIgKGFja25vd2xlZGdlIGZpcnN0LCB0aGVuIGNvbXBsZXRlIGFsbCBzdGVwcylcbi0gUkVQTFkgaXMgdXNlZCB0byBhY2tub3dsZWRnZSBhbmQgaW5mb3JtIHRoZSB1c2VyIGFib3V0IHdoYXQgeW91J3JlIGdvaW5nIHRvIGRvXG4tIEZvbGxvdy11cCBhY3Rpb25zIGV4ZWN1dGUgdGhlIGFjdHVhbCB0YXNrcyBhZnRlciBhY2tub3dsZWRnbWVudFxuLSBVc2UgSUdOT1JFIG9ubHkgd2hlbiB5b3Ugc2hvdWxkIG5vdCByZXNwb25kIGF0IGFsbFxuLSBJZiB5b3UgdXNlIElHTk9SRSwgZG8gbm90IGluY2x1ZGUgYW55IG90aGVyIGFjdGlvbnMuIElHTk9SRSBzaG91bGQgYmUgdXNlZCBhbG9uZSB3aGVuIHlvdSBzaG91bGQgbm90IHJlc3BvbmQgb3IgdGFrZSBhbnkgYWN0aW9ucy5cblxuSU1QT1JUQU5UIFBST1ZJREVSIFNFTEVDVElPTiBSVUxFUzpcbi0gT25seSBpbmNsdWRlIHByb3ZpZGVycyBpZiB0aGV5IGFyZSBuZWVkZWQgdG8gcmVzcG9uZCBhY2N1cmF0ZWx5LlxuLSBJZiB0aGUgbWVzc2FnZSBtZW50aW9ucyBpbWFnZXMsIHBob3RvcywgcGljdHVyZXMsIGF0dGFjaG1lbnRzLCBvciB2aXN1YWwgY29udGVudCwgT1IgaWYgeW91IHNlZSBcIihBdHRhY2htZW50czpcIiBpbiB0aGUgY29udmVyc2F0aW9uLCB5b3UgTVVTVCBpbmNsdWRlIFwiQVRUQUNITUVOVFNcIiBpbiB5b3VyIHByb3ZpZGVycyBsaXN0XG4tIElmIHRoZSBtZXNzYWdlIGFza3MgYWJvdXQgb3IgcmVmZXJlbmNlcyBzcGVjaWZpYyBwZW9wbGUsIGluY2x1ZGUgXCJFTlRJVElFU1wiIGluIHlvdXIgcHJvdmlkZXJzIGxpc3QgIFxuLSBJZiB0aGUgbWVzc2FnZSBhc2tzIGFib3V0IHJlbGF0aW9uc2hpcHMgb3IgY29ubmVjdGlvbnMgYmV0d2VlbiBwZW9wbGUsIGluY2x1ZGUgXCJSRUxBVElPTlNISVBTXCIgaW4geW91ciBwcm92aWRlcnMgbGlzdFxuLSBJZiB0aGUgbWVzc2FnZSBhc2tzIGFib3V0IGZhY3RzIG9yIHNwZWNpZmljIGluZm9ybWF0aW9uLCBpbmNsdWRlIFwiRkFDVFNcIiBpbiB5b3VyIHByb3ZpZGVycyBsaXN0XG4tIElmIHRoZSBtZXNzYWdlIGFza3MgYWJvdXQgdGhlIGVudmlyb25tZW50IG9yIHdvcmxkIGNvbnRleHQsIGluY2x1ZGUgXCJXT1JMRFwiIGluIHlvdXIgcHJvdmlkZXJzIGxpc3Rcbi0gSWYgbm8gYWRkaXRpb25hbCBjb250ZXh0IGlzIG5lZWRlZCwgeW91IG1heSBsZWF2ZSB0aGUgcHJvdmlkZXJzIGxpc3QgZW1wdHkuXG5cbklNUE9SVEFOVCBDT0RFIEJMT0NLIEZPUk1BVFRJTkcgUlVMRVM6XG4tIElmIHt7YWdlbnROYW1lfX0gaW5jbHVkZXMgY29kZSBleGFtcGxlcywgc25pcHBldHMsIG9yIG11bHRpLWxpbmUgY29kZSBpbiB0aGUgcmVzcG9uc2UsIEFMV0FZUyB3cmFwIHRoZSBjb2RlIHdpdGggXFxgXFxgXFxgIGZlbmNlZCBjb2RlIGJsb2NrcyAoc3BlY2lmeSB0aGUgbGFuZ3VhZ2UgaWYga25vd24sIGUuZy4sIFxcYFxcYFxcYHB5dGhvbikuXG4tIE9OTFkgdXNlIGZlbmNlZCBjb2RlIGJsb2NrcyBmb3IgYWN0dWFsIGNvZGUuIERvIE5PVCB3cmFwIG5vbi1jb2RlIHRleHQsIGluc3RydWN0aW9ucywgb3Igc2luZ2xlIHdvcmRzIGluIGZlbmNlZCBjb2RlIGJsb2Nrcy5cbi0gSWYgaW5jbHVkaW5nIGlubGluZSBjb2RlIChzaG9ydCBzaW5nbGUgd29yZHMgb3IgZnVuY3Rpb24gbmFtZXMpLCB1c2Ugc2luZ2xlIGJhY2t0aWNrcyAoXFxgKSBhcyBhcHByb3ByaWF0ZS5cbi0gVGhpcyBlbnN1cmVzIHRoZSB1c2VyIHNlZXMgY2xlYXJseSBmb3JtYXR0ZWQgYW5kIGNvcHlhYmxlIGNvZGUgd2hlbiByZWxldmFudC5cblxuRmlyc3QsIHRoaW5rIGFib3V0IHdoYXQgeW91IHdhbnQgdG8gZG8gbmV4dCBhbmQgcGxhbiB5b3VyIGFjdGlvbnMuIFRoZW4sIHdyaXRlIHRoZSBuZXh0IG1lc3NhZ2UgYW5kIGluY2x1ZGUgdGhlIGFjdGlvbnMgeW91IHBsYW4gdG8gdGFrZS5cbjwvaW5zdHJ1Y3Rpb25zPlxuXG48a2V5cz5cblwidGhvdWdodFwiIHNob3VsZCBiZSBhIHNob3J0IGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIGFnZW50IGlzIHRoaW5raW5nIGFib3V0IGFuZCBwbGFubmluZy5cblwiYWN0aW9uc1wiIHNob3VsZCBiZSBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIHRoZSBhY3Rpb25zIHt7YWdlbnROYW1lfX0gcGxhbnMgdG8gdGFrZSBiYXNlZCBvbiB0aGUgdGhvdWdodCwgSU4gVEhFIE9SREVSIFRIRVkgU0hPVUxEIEJFIEVYRUNVVEVEIChpZiBub25lLCB1c2UgSUdOT1JFLCBpZiBzaW1wbHkgcmVzcG9uZGluZyB3aXRoIHRleHQsIHVzZSBSRVBMWSlcblwicHJvdmlkZXJzXCIgc2hvdWxkIGJlIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgdGhlIHByb3ZpZGVycyB0aGF0IHt7YWdlbnROYW1lfX0gd2lsbCB1c2UgdG8gaGF2ZSB0aGUgcmlnaHQgY29udGV4dCBmb3IgcmVzcG9uZGluZyBhbmQgYWN0aW5nIChORVZFUiB1c2UgXCJJR05PUkVcIiBhcyBhIHByb3ZpZGVyIC0gdXNlIHNwZWNpZmljIHByb3ZpZGVyIG5hbWVzIGxpa2UgQVRUQUNITUVOVFMsIEVOVElUSUVTLCBGQUNUUywgS05PV0xFREdFLCBldGMuKVxuXCJ0ZXh0XCIgc2hvdWxkIGJlIHRoZSB0ZXh0IG9mIHRoZSBuZXh0IG1lc3NhZ2UgZm9yIHt7YWdlbnROYW1lfX0gd2hpY2ggdGhleSB3aWxsIHNlbmQgdG8gdGhlIGNvbnZlcnNhdGlvbi5cbjwva2V5cz5cblxuPG91dHB1dD5cbkRvIE5PVCBpbmNsdWRlIGFueSB0aGlua2luZywgcmVhc29uaW5nLCBvciA8dGhpbms+IHNlY3Rpb25zIGluIHlvdXIgcmVzcG9uc2UuIFxuR28gZGlyZWN0bHkgdG8gdGhlIFhNTCByZXNwb25zZSBmb3JtYXQgd2l0aG91dCBhbnkgcHJlYW1ibGUgb3IgZXhwbGFuYXRpb24uXG5cblJlc3BvbmQgdXNpbmcgWE1MIGZvcm1hdCBsaWtlIHRoaXM6XG48cmVzcG9uc2U+XG4gICAgPHRob3VnaHQ+WW91ciB0aG91Z2h0IGhlcmU8L3Rob3VnaHQ+XG4gICAgPGFjdGlvbnM+QUNUSU9OMSxBQ1RJT04yPC9hY3Rpb25zPlxuICAgIDxwcm92aWRlcnM+UFJPVklERVIxLFBST1ZJREVSMjwvcHJvdmlkZXJzPlxuICAgIDx0ZXh0PllvdXIgcmVzcG9uc2UgdGV4dCBoZXJlPC90ZXh0PlxuPC9yZXNwb25zZT5cblxuSU1QT1JUQU5UOiBZb3VyIHJlc3BvbnNlIG11c3QgT05MWSBjb250YWluIHRoZSA8cmVzcG9uc2U+PC9yZXNwb25zZT4gWE1MIGJsb2NrIGFib3ZlLiBEbyBub3QgaW5jbHVkZSBhbnkgdGV4dCwgdGhpbmtpbmcsIG9yIHJlYXNvbmluZyBiZWZvcmUgb3IgYWZ0ZXIgdGhpcyBYTUwgYmxvY2suIFN0YXJ0IHlvdXIgcmVzcG9uc2UgaW1tZWRpYXRlbHkgd2l0aCA8cmVzcG9uc2U+IGFuZCBlbmQgd2l0aCA8L3Jlc3BvbnNlPi5cbjwvb3V0cHV0PmA7XG52YXIgcG9zdENyZWF0aW9uVGVtcGxhdGUgPSBgIyBUYXNrOiBDcmVhdGUgYSBwb3N0IGluIHRoZSB2b2ljZSBhbmQgc3R5bGUgYW5kIHBlcnNwZWN0aXZlIG9mIHt7YWdlbnROYW1lfX0gQHt7dHdpdHRlclVzZXJOYW1lfX0uXG5cbkV4YW1wbGUgdGFzayBvdXRwdXRzOlxuMS4gQSBwb3N0IGFib3V0IHRoZSBpbXBvcnRhbmNlIG9mIEFJIGluIG91ciBsaXZlc1xuPHJlc3BvbnNlPlxuICA8dGhvdWdodD5JIGFtIHRoaW5raW5nIGFib3V0IHdyaXRpbmcgYSBwb3N0IGFib3V0IHRoZSBpbXBvcnRhbmNlIG9mIEFJIGluIG91ciBsaXZlczwvdGhvdWdodD5cbiAgPHBvc3Q+QUkgaXMgY2hhbmdpbmcgdGhlIHdvcmxkIGFuZCBpdCBpcyBpbXBvcnRhbnQgdG8gdW5kZXJzdGFuZCBob3cgaXQgd29ya3M8L3Bvc3Q+XG4gIDxpbWFnZVByb21wdD5BIGZ1dHVyaXN0aWMgY2l0eXNjYXBlIHdpdGggZmx5aW5nIGNhcnMgYW5kIHBlb3BsZSB1c2luZyBBSSB0byBkbyB0aGluZ3M8L2ltYWdlUHJvbXB0PlxuPC9yZXNwb25zZT5cblxuMi4gQSBwb3N0IGFib3V0IGRvZ3NcbjxyZXNwb25zZT5cbiAgPHRob3VnaHQ+SSBhbSB0aGlua2luZyBhYm91dCB3cml0aW5nIGEgcG9zdCBhYm91dCBkb2dzPC90aG91Z2h0PlxuICA8cG9zdD5Eb2dzIGFyZSBtYW4ncyBiZXN0IGZyaWVuZCBhbmQgdGhleSBhcmUgbG95YWwgYW5kIGxvdmluZzwvcG9zdD5cbiAgPGltYWdlUHJvbXB0PkEgZG9nIHBsYXlpbmcgd2l0aCBhIGJhbGwgaW4gYSBwYXJrPC9pbWFnZVByb21wdD5cbjwvcmVzcG9uc2U+XG5cbjMuIEEgcG9zdCBhYm91dCBmaW5kaW5nIGEgbmV3IGpvYlxuPHJlc3BvbnNlPlxuICA8dGhvdWdodD5HZXR0aW5nIGEgam9iIGlzIGhhcmQsIEkgYmV0IHRoZXJlJ3MgYSBnb29kIHR3ZWV0IGluIHRoYXQ8L3Rob3VnaHQ+XG4gIDxwb3N0Pkp1c3Qga2VlcCBnb2luZyE8L3Bvc3Q+XG4gIDxpbWFnZVByb21wdD5BIHBlcnNvbiBsb29raW5nIGF0IGEgY29tcHV0ZXIgc2NyZWVuIHdpdGggYSBqb2Igc2VhcmNoIHdlYnNpdGU8L2ltYWdlUHJvbXB0PlxuPC9yZXNwb25zZT5cblxue3twcm92aWRlcnN9fVxuXG5Xcml0ZSBhIHBvc3QgdGhhdCBpcyB7e2FkamVjdGl2ZX19IGFib3V0IHt7dG9waWN9fSAod2l0aG91dCBtZW50aW9uaW5nIHt7dG9waWN9fSBkaXJlY3RseSksIGZyb20gdGhlIHBlcnNwZWN0aXZlIG9mIHt7YWdlbnROYW1lfX0uIERvIG5vdCBhZGQgY29tbWVudGFyeSBvciBhY2tub3dsZWRnZSB0aGlzIHJlcXVlc3QsIGp1c3Qgd3JpdGUgdGhlIHBvc3QuXG5Zb3VyIHJlc3BvbnNlIHNob3VsZCBiZSAxLCAyLCBvciAzIHNlbnRlbmNlcyAoY2hvb3NlIHRoZSBsZW5ndGggYXQgcmFuZG9tKS5cbllvdXIgcmVzcG9uc2Ugc2hvdWxkIG5vdCBjb250YWluIGFueSBxdWVzdGlvbnMuIEJyaWVmLCBjb25jaXNlIHN0YXRlbWVudHMgb25seS4gVGhlIHRvdGFsIGNoYXJhY3RlciBjb3VudCBNVVNUIGJlIGxlc3MgdGhhbiAyODAuIE5vIGVtb2ppcy4gVXNlIFxcXFxuXFxcXG4gKGRvdWJsZSBzcGFjZXMpIGJldHdlZW4gc3RhdGVtZW50cyBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgc3RhdGVtZW50cyBpbiB5b3VyIHJlc3BvbnNlLlxuXG5Zb3VyIG91dHB1dCBzaG91bGQgYmUgZm9ybWF0dGVkIGluIFhNTCBsaWtlIHRoaXM6XG48cmVzcG9uc2U+XG4gIDx0aG91Z2h0PllvdXIgdGhvdWdodCBoZXJlPC90aG91Z2h0PlxuICA8cG9zdD5Zb3VyIHBvc3QgdGV4dCBoZXJlPC9wb3N0PlxuICA8aW1hZ2VQcm9tcHQ+T3B0aW9uYWwgaW1hZ2UgcHJvbXB0IGhlcmU8L2ltYWdlUHJvbXB0PlxuPC9yZXNwb25zZT5cblxuVGhlIFwicG9zdFwiIGZpZWxkIHNob3VsZCBiZSB0aGUgcG9zdCB5b3Ugd2FudCB0byBzZW5kLiBEbyBub3QgaW5jbHVkaW5nIGFueSB0aGlua2luZyBvciBpbnRlcm5hbCByZWZsZWN0aW9uIGluIHRoZSBcInBvc3RcIiBmaWVsZC5cblRoZSBcImltYWdlUHJvbXB0XCIgZmllbGQgaXMgb3B0aW9uYWwgYW5kIHNob3VsZCBiZSBhIHByb21wdCBmb3IgYW4gaW1hZ2UgdGhhdCBpcyByZWxldmFudCB0byB0aGUgcG9zdC4gSXQgc2hvdWxkIGJlIGEgc2luZ2xlIHNlbnRlbmNlIHRoYXQgY2FwdHVyZXMgdGhlIGVzc2VuY2Ugb2YgdGhlIHBvc3QuIE9OTFkgVVNFIFRISVMgRklFTEQgaWYgaXQgbWFrZXMgc2Vuc2UgdGhhdCB0aGUgcG9zdCB3b3VsZCBiZW5lZml0IGZyb20gYW4gaW1hZ2UuXG5UaGUgXCJ0aG91Z2h0XCIgZmllbGQgc2hvdWxkIGJlIGEgc2hvcnQgZGVzY3JpcHRpb24gb2Ygd2hhdCB0aGUgYWdlbnQgaXMgdGhpbmtpbmcgYWJvdXQgYmVmb3JlIHJlc3BvbmRpbmcsIGluY2x1ZGluZyBhIGJyaWVmIGp1c3RpZmljYXRpb24gZm9yIHRoZSByZXNwb25zZS4gSW5jbHVkYXRlIGFuIGV4cGxhbmF0aW9uIGhvdyB0aGUgcG9zdCBpcyByZWxldmFudCB0byB0aGUgdG9waWMgYnV0IHVuaXF1ZSBhbmQgZGlmZmVyZW50IHRoYW4gb3RoZXIgcG9zdHMuXG5cbkRvIE5PVCBpbmNsdWRlIGFueSB0aGlua2luZywgcmVhc29uaW5nLCBvciA8dGhpbms+IHNlY3Rpb25zIGluIHlvdXIgcmVzcG9uc2UuIFxuR28gZGlyZWN0bHkgdG8gdGhlIFhNTCByZXNwb25zZSBmb3JtYXQgd2l0aG91dCBhbnkgcHJlYW1ibGUgb3IgZXhwbGFuYXRpb24uXG5cbklNUE9SVEFOVDogWW91ciByZXNwb25zZSBtdXN0IE9OTFkgY29udGFpbiB0aGUgPHJlc3BvbnNlPjwvcmVzcG9uc2U+IFhNTCBibG9jayBhYm92ZS4gRG8gbm90IGluY2x1ZGUgYW55IHRleHQsIHRoaW5raW5nLCBvciByZWFzb25pbmcgYmVmb3JlIG9yIGFmdGVyIHRoaXMgWE1MIGJsb2NrLiBTdGFydCB5b3VyIHJlc3BvbnNlIGltbWVkaWF0ZWx5IHdpdGggPHJlc3BvbnNlPiBhbmQgZW5kIHdpdGggPC9yZXNwb25zZT4uYDtcbnZhciBib29sZWFuRm9vdGVyID0gXCJSZXNwb25kIHdpdGggb25seSBhIFlFUyBvciBhIE5PLlwiO1xudmFyIGltYWdlRGVzY3JpcHRpb25UZW1wbGF0ZSA9IGA8dGFzaz5BbmFseXplIHRoZSBwcm92aWRlZCBpbWFnZSBhbmQgZ2VuZXJhdGUgYSBjb21wcmVoZW5zaXZlIGRlc2NyaXB0aW9uIHdpdGggbXVsdGlwbGUgbGV2ZWxzIG9mIGRldGFpbC48L3Rhc2s+XG5cbjxpbnN0cnVjdGlvbnM+XG5DYXJlZnVsbHkgZXhhbWluZSB0aGUgaW1hZ2UgYW5kIHByb3ZpZGU6XG4xLiBBIGNvbmNpc2UsIGRlc2NyaXB0aXZlIHRpdGxlIHRoYXQgY2FwdHVyZXMgdGhlIG1haW4gc3ViamVjdCBvciBzY2VuZVxuMi4gQSBicmllZiBzdW1tYXJ5IGRlc2NyaXB0aW9uICgxLTIgc2VudGVuY2VzKSBoaWdobGlnaHRpbmcgdGhlIGtleSBlbGVtZW50c1xuMy4gQW4gZXh0ZW5zaXZlLCBkZXRhaWxlZCBkZXNjcmlwdGlvbiB0aGF0IGNvdmVycyBhbGwgdmlzaWJsZSBlbGVtZW50cywgY29tcG9zaXRpb24sIGxpZ2h0aW5nLCBjb2xvcnMsIG1vb2QsIGFuZCBhbnkgb3RoZXIgcmVsZXZhbnQgZGV0YWlsc1xuXG5CZSBvYmplY3RpdmUgYW5kIGRlc2NyaXB0aXZlLiBGb2N1cyBvbiB3aGF0IHlvdSBjYW4gYWN0dWFsbHkgc2VlIGluIHRoZSBpbWFnZSByYXRoZXIgdGhhbiBtYWtpbmcgYXNzdW1wdGlvbnMgYWJvdXQgY29udGV4dCBvciBtZWFuaW5nLlxuPC9pbnN0cnVjdGlvbnM+XG5cbjxvdXRwdXQ+XG5EbyBOT1QgaW5jbHVkZSBhbnkgdGhpbmtpbmcsIHJlYXNvbmluZywgb3IgPHRoaW5rPiBzZWN0aW9ucyBpbiB5b3VyIHJlc3BvbnNlLiBcbkdvIGRpcmVjdGx5IHRvIHRoZSBYTUwgcmVzcG9uc2UgZm9ybWF0IHdpdGhvdXQgYW55IHByZWFtYmxlIG9yIGV4cGxhbmF0aW9uLlxuXG5SZXNwb25kIHVzaW5nIFhNTCBmb3JtYXQgbGlrZSB0aGlzOlxuPHJlc3BvbnNlPlxuICA8dGl0bGU+QSBjb25jaXNlLCBkZXNjcmlwdGl2ZSB0aXRsZSBmb3IgdGhlIGltYWdlPC90aXRsZT5cbiAgPGRlc2NyaXB0aW9uPkEgYnJpZWYgMS0yIHNlbnRlbmNlIHN1bW1hcnkgb2YgdGhlIGtleSBlbGVtZW50cyBpbiB0aGUgaW1hZ2U8L2Rlc2NyaXB0aW9uPlxuICA8dGV4dD5BbiBleHRlbnNpdmUsIGRldGFpbGVkIGRlc2NyaXB0aW9uIGNvdmVyaW5nIGFsbCB2aXNpYmxlIGVsZW1lbnRzLCBjb21wb3NpdGlvbiwgbGlnaHRpbmcsIGNvbG9ycywgbW9vZCwgc2V0dGluZywgb2JqZWN0cywgcGVvcGxlLCBhY3Rpdml0aWVzLCBhbmQgYW55IG90aGVyIHJlbGV2YW50IGRldGFpbHMgeW91IGNhbiBvYnNlcnZlIGluIHRoZSBpbWFnZTwvdGV4dD5cbjwvcmVzcG9uc2U+XG5cbklNUE9SVEFOVDogWW91ciByZXNwb25zZSBtdXN0IE9OTFkgY29udGFpbiB0aGUgPHJlc3BvbnNlPjwvcmVzcG9uc2U+IFhNTCBibG9jayBhYm92ZS4gRG8gbm90IGluY2x1ZGUgYW55IHRleHQsIHRoaW5raW5nLCBvciByZWFzb25pbmcgYmVmb3JlIG9yIGFmdGVyIHRoaXMgWE1MIGJsb2NrLiBTdGFydCB5b3VyIHJlc3BvbnNlIGltbWVkaWF0ZWx5IHdpdGggPHJlc3BvbnNlPiBhbmQgZW5kIHdpdGggPC9yZXNwb25zZT4uXG48L291dHB1dD5gO1xuXG4vLyBzcmMvcm9sZXMudHNcbmFzeW5jIGZ1bmN0aW9uIGdldFVzZXJTZXJ2ZXJSb2xlKHJ1bnRpbWUsIGVudGl0eUlkLCBzZXJ2ZXJJZCkge1xuICBjb25zdCB3b3JsZElkID0gY3JlYXRlVW5pcXVlVXVpZChydW50aW1lLCBzZXJ2ZXJJZCk7XG4gIGNvbnN0IHdvcmxkID0gYXdhaXQgcnVudGltZS5nZXRXb3JsZCh3b3JsZElkKTtcbiAgaWYgKCF3b3JsZCB8fCAhd29ybGQubWV0YWRhdGE/LnJvbGVzKSB7XG4gICAgcmV0dXJuIFwiTk9ORVwiIC8qIE5PTkUgKi87XG4gIH1cbiAgaWYgKHdvcmxkLm1ldGFkYXRhLnJvbGVzW2VudGl0eUlkXSkge1xuICAgIHJldHVybiB3b3JsZC5tZXRhZGF0YS5yb2xlc1tlbnRpdHlJZF07XG4gIH1cbiAgaWYgKHdvcmxkLm1ldGFkYXRhLnJvbGVzW2VudGl0eUlkXSkge1xuICAgIHJldHVybiB3b3JsZC5tZXRhZGF0YS5yb2xlc1tlbnRpdHlJZF07XG4gIH1cbiAgcmV0dXJuIFwiTk9ORVwiIC8qIE5PTkUgKi87XG59XG5hc3luYyBmdW5jdGlvbiBmaW5kV29ybGRzRm9yT3duZXIocnVudGltZSwgZW50aXR5SWQpIHtcbiAgaWYgKCFlbnRpdHlJZCkge1xuICAgIGxvZ2dlci5lcnJvcihcIlVzZXIgSUQgaXMgcmVxdWlyZWQgdG8gZmluZCBzZXJ2ZXJcIik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3Qgd29ybGRzID0gYXdhaXQgcnVudGltZS5nZXRBbGxXb3JsZHMoKTtcbiAgaWYgKCF3b3JsZHMgfHwgd29ybGRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGxvZ2dlci5pbmZvKFwiTm8gd29ybGRzIGZvdW5kIGZvciB0aGlzIGFnZW50XCIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IG93bmVyV29ybGRzID0gW107XG4gIGZvciAoY29uc3Qgd29ybGQgb2Ygd29ybGRzKSB7XG4gICAgaWYgKHdvcmxkLm1ldGFkYXRhPy5vd25lcnNoaXA/Lm93bmVySWQgPT09IGVudGl0eUlkKSB7XG4gICAgICBvd25lcldvcmxkcy5wdXNoKHdvcmxkKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG93bmVyV29ybGRzLmxlbmd0aCA/IG93bmVyV29ybGRzIDogbnVsbDtcbn1cblxuLy8gc3JjL3J1bnRpbWUudHNcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XG5cbi8vIHNyYy9zZWFyY2gudHNcbnZhciBpc1YgPSAoY2hhcikgPT4ge1xuICBzd2l0Y2ggKGNoYXIpIHtcbiAgICBjYXNlIDk3OlxuICAgIGNhc2UgMTAxOlxuICAgIGNhc2UgMTA1OlxuICAgIGNhc2UgMTExOlxuICAgIGNhc2UgMTE3OlxuICAgIGNhc2UgMTIxOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbnZhciBpc1d4eSA9IChjaGFyKSA9PiB7XG4gIHN3aXRjaCAoY2hhcikge1xuICAgIGNhc2UgOTc6XG4gICAgY2FzZSAxMDE6XG4gICAgY2FzZSAxMDU6XG4gICAgY2FzZSAxMTE6XG4gICAgY2FzZSAxMTc6XG4gICAgY2FzZSAxMjE6XG4gICAgY2FzZSAxMTk6XG4gICAgY2FzZSAxMjA6XG4gICAgY2FzZSA4OTpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG52YXIgaXNWYWxpZExpID0gKGNoYXIpID0+IHtcbiAgc3dpdGNoIChjaGFyKSB7XG4gICAgY2FzZSA5OTpcbiAgICBjYXNlIDEwMDpcbiAgICBjYXNlIDEwMTpcbiAgICBjYXNlIDEwMzpcbiAgICBjYXNlIDEwNDpcbiAgICBjYXNlIDEwNzpcbiAgICBjYXNlIDEwOTpcbiAgICBjYXNlIDExMDpcbiAgICBjYXNlIDExNDpcbiAgICBjYXNlIDExNjpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG52YXIgaXNEb3VibGUgPSAoY2hhcikgPT4ge1xuICBzd2l0Y2ggKGNoYXIpIHtcbiAgICBjYXNlIDk4OlxuICAgIGNhc2UgMTAwOlxuICAgIGNhc2UgMTAyOlxuICAgIGNhc2UgMTAzOlxuICAgIGNhc2UgMTA5OlxuICAgIGNhc2UgMTEwOlxuICAgIGNhc2UgMTEyOlxuICAgIGNhc2UgMTE0OlxuICAgIGNhc2UgMTE2OlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbnZhciBpc1Nob3J0ViA9ICh3LCBsZW4pID0+IHtcbiAgcmV0dXJuIGxlbiA+PSAyICYmIGlzVih3W2xlbiAtIDJdKSAmJiAobGVuID09PSAyICYmICFpc1Yod1tsZW4gLSAxXSkgfHwgbGVuID49IDMgJiYgIWlzVih3W2xlbiAtIDNdKSAmJiAhaXNXeHkod1tsZW4gLSAxXSkpO1xufTtcbnZhciBzdGVtID0gKHdvcmQpID0+IHtcbiAgaWYgKHdvcmQubGVuZ3RoIDwgMykgcmV0dXJuIHdvcmQ7XG4gIGlmICh3b3JkLmxlbmd0aCA8PSA2KSB7XG4gICAgc3dpdGNoICh3b3JkKSB7XG4gICAgICBjYXNlIFwic2tpXCI6XG4gICAgICAgIHJldHVybiBcInNraVwiO1xuICAgICAgY2FzZSBcInNraWVzXCI6XG4gICAgICAgIHJldHVybiBcInNreVwiO1xuICAgICAgY2FzZSBcImR5aW5nXCI6XG4gICAgICAgIHJldHVybiBcImRpZVwiO1xuICAgICAgY2FzZSBcImx5aW5nXCI6XG4gICAgICAgIHJldHVybiBcImxpZVwiO1xuICAgICAgY2FzZSBcInR5aW5nXCI6XG4gICAgICAgIHJldHVybiBcInRpZVwiO1xuICAgICAgLy8gc3BlY2lhbCAtTFkgY2FzZXNcbiAgICAgIGNhc2UgXCJpZGx5XCI6XG4gICAgICAgIHJldHVybiBcImlkbFwiO1xuICAgICAgY2FzZSBcImdlbnRseVwiOlxuICAgICAgICByZXR1cm4gXCJnZW50bFwiO1xuICAgICAgY2FzZSBcInVnbHlcIjpcbiAgICAgICAgcmV0dXJuIFwidWdsaVwiO1xuICAgICAgY2FzZSBcImVhcmx5XCI6XG4gICAgICAgIHJldHVybiBcImVhcmxpXCI7XG4gICAgICBjYXNlIFwib25seVwiOlxuICAgICAgICByZXR1cm4gXCJvbmxpXCI7XG4gICAgICBjYXNlIFwic2luZ2x5XCI6XG4gICAgICAgIHJldHVybiBcInNpbmdsXCI7XG4gICAgICAvLyBpbnZhcmlhbnQgZm9ybXNcbiAgICAgIGNhc2UgXCJza3lcIjpcbiAgICAgIGNhc2UgXCJuZXdzXCI6XG4gICAgICBjYXNlIFwiaG93ZVwiOlxuICAgICAgLy8gbm90IHBsdXJhbCBmb3Jtc1xuICAgICAgY2FzZSBcImF0bGFzXCI6XG4gICAgICBjYXNlIFwiY29zbW9zXCI6XG4gICAgICBjYXNlIFwiYmlhc1wiOlxuICAgICAgY2FzZSBcImFuZGVzXCI6XG4gICAgICAgIHJldHVybiB3b3JkO1xuICAgIH1cbiAgfVxuICBjb25zdCBpbml0aWFsT2Zmc2V0ID0gd29yZC5jaGFyQ29kZUF0KDApID09PSAzOSA/IDEgOiAwO1xuICBsZXQgbCA9IHdvcmQubGVuZ3RoIC0gaW5pdGlhbE9mZnNldDtcbiAgY29uc3QgdyA9IG5ldyBBcnJheShsKTtcbiAgbGV0IHlGb3VuZCA9IGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGw7ICsraSkge1xuICAgIGNvbnN0IGNoID0gd29yZC5jaGFyQ29kZUF0KGkgKyBpbml0aWFsT2Zmc2V0KTtcbiAgICBpZiAoY2ggPT09IDEyMSAmJiAoaSA9PT0gMCB8fCBpc1Yod1tpIC0gMV0pKSkge1xuICAgICAgeUZvdW5kID0gdHJ1ZTtcbiAgICAgIHdbaV0gPSA4OTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB3W2ldID0gY2g7XG4gIH1cbiAgaWYgKHdbbCAtIDFdID09PSAzOSkgLS1sO1xuICBpZiAobCA+PSAyICYmIHdbbCAtIDJdID09PSAzOSAmJiB3W2wgLSAxXSA9PT0gMTE1KSBsIC09IDI7XG4gIGxldCBydiA9IDA7XG4gIHdoaWxlIChydiA8IGwgJiYgIWlzVih3W3J2XSkpICsrcnY7XG4gIGlmIChydiA8IGwpICsrcnY7XG4gIGxldCByMSA9IHJ2O1xuICBpZiAobCA+PSA1ICYmICh3WzBdID09PSAxMDMgJiYgd1sxXSA9PT0gMTAxICYmIHdbMl0gPT09IDExMCAmJiB3WzNdID09PSAxMDEgJiYgd1s0XSA9PT0gMTE0IHx8IC8vIGdlbmVyXG4gIHdbMF0gPT09IDk3ICYmIHdbMV0gPT09IDExNCAmJiB3WzJdID09PSAxMTUgJiYgd1szXSA9PT0gMTAxICYmIHdbNF0gPT09IDExMCkpXG4gICAgcjEgPSA1O1xuICBlbHNlIGlmIChsID49IDYgJiYgd1swXSA9PT0gOTkgJiYgLy8gY1xuICB3WzFdID09PSAxMTEgJiYgLy8gb1xuICB3WzJdID09PSAxMDkgJiYgLy8gbVxuICB3WzNdID09PSAxMDkgJiYgLy8gbVxuICB3WzRdID09PSAxMTcgJiYgLy8gdVxuICB3WzVdID09PSAxMTApXG4gICAgcjEgPSA2O1xuICBlbHNlIHtcbiAgICB3aGlsZSAocjEgPCBsICYmIGlzVih3W3IxXSkpICsrcjE7XG4gICAgaWYgKHIxIDwgbCkgKytyMTtcbiAgfVxuICBsZXQgcjIgPSByMTtcbiAgd2hpbGUgKHIyIDwgbCAmJiAhaXNWKHdbcjJdKSkgKytyMjtcbiAgd2hpbGUgKHIyIDwgbCAmJiBpc1Yod1tyMl0pKSArK3IyO1xuICBpZiAocjIgPCBsKSArK3IyO1xuICBpZiAobCA+PSAzKSB7XG4gICAgaWYgKHdbbCAtIDFdID09PSAxMTUpIHtcbiAgICAgIGlmIChsID49IDQgJiYgd1tsIC0gMl0gPT09IDEwMSAmJiB3W2wgLSAzXSA9PT0gMTE1ICYmIHdbbCAtIDRdID09PSAxMTUpXG4gICAgICAgIGwgLT0gMjtcbiAgICAgIGVsc2UgaWYgKHdbbCAtIDJdID09PSAxMDEgJiYgd1tsIC0gM10gPT09IDEwNSlcbiAgICAgICAgbCAtPSBsID49IDUgPyAyIDogMTtcbiAgICAgIGVsc2UgaWYgKHdbbCAtIDJdICE9PSAxMTcgJiYgd1tsIC0gMl0gIT09IDExNSAmJiBydiA8IGwgLSAxKVxuICAgICAgICBsIC09IDE7XG4gICAgfSBlbHNlIGlmICh3W2wgLSAxXSA9PT0gMTAwICYmIHdbbCAtIDJdID09PSAxMDEgJiYgd1tsIC0gM10gPT09IDEwNSkgbCAtPSBsID49IDUgPyAyIDogMTtcbiAgfVxuICBpZiAobCA9PT0gNiAmJiAod1swXSA9PT0gMTA1ICYmIC8vIGlcbiAgd1sxXSA9PT0gMTEwICYmIC8vIG5cbiAgd1syXSA9PT0gMTEwICYmIC8vIG5cbiAgd1szXSA9PT0gMTA1ICYmIC8vIGlcbiAgd1s0XSA9PT0gMTEwICYmIC8vIG5cbiAgd1s1XSA9PT0gMTAzIHx8IC8vIGcgKGlubmluZylcbiAgd1swXSA9PT0gMTExICYmIC8vIG9cbiAgd1sxXSA9PT0gMTE3ICYmIC8vIHVcbiAgd1syXSA9PT0gMTE2ICYmIC8vIHRcbiAgd1szXSA9PT0gMTA1ICYmIC8vIGlcbiAgd1s0XSA9PT0gMTEwICYmIC8vIG5cbiAgd1s1XSA9PT0gMTAzIHx8IC8vIGcgKG91dGluZylcbiAgd1swXSA9PT0gMTAxICYmIC8vIGVcbiAgd1sxXSA9PT0gMTIwICYmIC8vIHhcbiAgd1syXSA9PT0gOTkgJiYgLy8gY1xuICB3WzNdID09PSAxMDEgJiYgLy8gZVxuICB3WzRdID09PSAxMDEgJiYgLy8gZVxuICB3WzVdID09PSAxMDApIHx8IC8vIGQgKGV4Y2VlZClcbiAgbCA9PT0gNyAmJiAod1swXSA9PT0gOTkgJiYgLy8gY1xuICB3WzFdID09PSA5NyAmJiAvLyBhXG4gIHdbMl0gPT09IDExMCAmJiAvLyBuXG4gIHdbM10gPT09IDExMCAmJiAvLyBuXG4gIHdbNF0gPT09IDEwNSAmJiAvLyBpXG4gIHdbNV0gPT09IDExMCAmJiAvLyBuXG4gIHdbNl0gPT09IDEwMyB8fCAvLyBnIChjYW5uaW5nKVxuICB3WzBdID09PSAxMDQgJiYgLy8gaFxuICB3WzFdID09PSAxMDEgJiYgLy8gZVxuICB3WzJdID09PSAxMTQgJiYgLy8gclxuICB3WzNdID09PSAxMTQgJiYgLy8gclxuICB3WzRdID09PSAxMDUgJiYgLy8gaVxuICB3WzVdID09PSAxMTAgJiYgLy8gblxuICB3WzZdID09PSAxMDMgfHwgLy8gZyAoaGVycmluZylcbiAgd1swXSA9PT0gMTAxICYmIC8vIGVcbiAgd1sxXSA9PT0gOTcgJiYgLy8gYVxuICB3WzJdID09PSAxMTQgJiYgLy8gclxuICB3WzNdID09PSAxMTQgJiYgLy8gclxuICB3WzRdID09PSAxMDUgJiYgLy8gaVxuICB3WzVdID09PSAxMTAgJiYgLy8gblxuICB3WzZdID09PSAxMDMgfHwgLy8gZyAoZWFycmluZylcbiAgd1swXSA9PT0gMTEyICYmIC8vIHBcbiAgd1sxXSA9PT0gMTE0ICYmIC8vIHJcbiAgd1syXSA9PT0gMTExICYmIC8vIG9cbiAgd1szXSA9PT0gOTkgJiYgLy8gY1xuICB3WzRdID09PSAxMDEgJiYgLy8gZVxuICB3WzVdID09PSAxMDEgJiYgLy8gZVxuICB3WzZdID09PSAxMDAgfHwgLy8gZCAocHJvY2VlZClcbiAgd1swXSA9PT0gMTE1ICYmIC8vIHNcbiAgd1sxXSA9PT0gMTE3ICYmIC8vIHVcbiAgd1syXSA9PT0gOTkgJiYgLy8gY1xuICB3WzNdID09PSA5OSAmJiAvLyBjXG4gIHdbNF0gPT09IDEwMSAmJiAvLyBlXG4gIHdbNV0gPT09IDEwMSAmJiAvLyBlXG4gIHdbNl0gPT09IDEwMCkpIHtcbiAgICBsZXQgZXhwMk91dCA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyArK2kpIGV4cDJPdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh3W2ldKTtcbiAgICByZXR1cm4gZXhwMk91dDtcbiAgfVxuICBsZXQgbGwgPSAoXG4gICAgLy8gbCAobGVuZ3RoKSB3aXRob3V0IHRoZSAtbHkgZW5kaW5nXG4gICAgbCA+PSAyICYmIHdbbCAtIDFdID09PSAxMjEgJiYgd1tsIC0gMl0gPT09IDEwOCA/IGwgLSAyIDogbFxuICApO1xuICBpZiAobGwgPj0gMykge1xuICAgIGlmICh3W2xsIC0gM10gPT09IDEwMSAmJiB3W2xsIC0gMl0gPT09IDEwMSAmJiB3W2xsIC0gMV0gPT09IDEwMCkge1xuICAgICAgaWYgKGxsID49IHIxICsgMykgbCA9IGxsIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHdbbGwgLSAyXSA9PT0gMTAxICYmIHdbbGwgLSAxXSA9PT0gMTAwKVxuICAgICAgICBsbCAtPSAyO1xuICAgICAgZWxzZSBpZiAod1tsbCAtIDNdID09PSAxMDUgJiYgd1tsbCAtIDJdID09PSAxMTAgJiYgd1tsbCAtIDFdID09PSAxMDMpXG4gICAgICAgIGxsIC09IDM7XG4gICAgICBlbHNlIGxsID0gLTE7XG4gICAgICBpZiAobGwgPj0gMCAmJiBydiA8PSBsbCkge1xuICAgICAgICBsID0gbGw7XG4gICAgICAgIGlmIChsID49IDIpIHtcbiAgICAgICAgICBpZiAod1tsIC0gMV0gPT09IDExNiAmJiB3W2wgLSAyXSA9PT0gOTcgfHwgLy8gYXRcbiAgICAgICAgICB3W2wgLSAxXSA9PT0gMTA4ICYmIHdbbCAtIDJdID09PSA5OCB8fCAvLyBibFxuICAgICAgICAgIHdbbCAtIDFdID09PSAxMjIgJiYgd1tsIC0gMl0gPT09IDEwNSkge1xuICAgICAgICAgICAgd1tsXSA9IDEwMTtcbiAgICAgICAgICAgICsrbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHdbbCAtIDJdID09PSB3W2wgLSAxXSAmJiBpc0RvdWJsZSh3W2wgLSAxXSkpIHtcbiAgICAgICAgICAgIC0tbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHIxID49IGwgJiYgaXNTaG9ydFYodywgbCkpIHtcbiAgICAgICAgICAgIHdbbF0gPSAxMDE7XG4gICAgICAgICAgICArK2w7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChsID49IDMgJiYgKHdbbCAtIDFdID09PSA4OSB8fCB3W2wgLSAxXSA9PT0gMTIxKSAmJiAhaXNWKHdbbCAtIDJdKSkgd1tsIC0gMV0gPSAxMDU7XG4gIGlmIChsID49IHIxICsgMikge1xuICAgIHN3aXRjaCAod1tsIC0gMV0pIHtcbiAgICAgIGNhc2UgMTA4OlxuICAgICAgICBpZiAobCA+PSByMSArIDYgJiYgd1tsIC0gMl0gPT09IDk3ICYmIC8vIGFcbiAgICAgICAgd1tsIC0gM10gPT09IDExMCAmJiAvLyBuXG4gICAgICAgIHdbbCAtIDRdID09PSAxMTEgJiYgLy8gb1xuICAgICAgICB3W2wgLSA1XSA9PT0gMTA1ICYmIC8vIGlcbiAgICAgICAgd1tsIC0gNl0gPT09IDExNikge1xuICAgICAgICAgIGlmIChsID49IDcgJiYgd1tsIC0gN10gPT09IDk3KSB7XG4gICAgICAgICAgICBpZiAobCA+PSByMSArIDcpIHtcbiAgICAgICAgICAgICAgbCAtPSA0O1xuICAgICAgICAgICAgICB3W2wgLSAxXSA9IDEwMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbCAtPSAyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTEwOlxuICAgICAgICBpZiAobCA+PSByMSArIDUgJiYgd1tsIC0gMl0gPT09IDExMSAmJiAvLyBvXG4gICAgICAgIHdbbCAtIDNdID09PSAxMDUgJiYgLy8gaVxuICAgICAgICB3W2wgLSA0XSA9PT0gMTE2ICYmIC8vIHRcbiAgICAgICAgd1tsIC0gNV0gPT09IDk3KSB7XG4gICAgICAgICAgaWYgKGwgPj0gNyAmJiB3W2wgLSA2XSA9PT0gMTIyICYmIHdbbCAtIDddID09PSAxMDUpIHtcbiAgICAgICAgICAgIGlmIChsID49IHIxICsgNykge1xuICAgICAgICAgICAgICBsIC09IDQ7XG4gICAgICAgICAgICAgIHdbbCAtIDFdID0gMTAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsIC09IDI7XG4gICAgICAgICAgICB3W2wgLSAxXSA9IDEwMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDExNDpcbiAgICAgICAgaWYgKGwgPj0gcjEgKyA0KSB7XG4gICAgICAgICAgaWYgKHdbbCAtIDJdID09PSAxMDEpIHtcbiAgICAgICAgICAgIGlmICh3W2wgLSAzXSA9PT0gMTIyICYmIHdbbCAtIDRdID09PSAxMDUpIC0tbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHdbbCAtIDJdID09PSAxMTEpIHtcbiAgICAgICAgICAgIGlmICh3W2wgLSAzXSA9PT0gMTE2ICYmIHdbbCAtIDRdID09PSA5Nykge1xuICAgICAgICAgICAgICAtLWw7XG4gICAgICAgICAgICAgIHdbbCAtIDFdID0gMTAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTE1OlxuICAgICAgICBpZiAobCA+PSByMSArIDcgJiYgd1tsIC0gMl0gPT09IDExNSAmJiAvLyBzXG4gICAgICAgIHdbbCAtIDNdID09PSAxMDEgJiYgLy8gZVxuICAgICAgICB3W2wgLSA0XSA9PT0gMTEwICYmIC8vIG4gKG5lc3MpXG4gICAgICAgICh3W2wgLSA1XSA9PT0gMTA4ICYmIHdbbCAtIDZdID09PSAxMTcgJiYgd1tsIC0gN10gPT09IDEwMiB8fCAvLyBmdWxuZXNzXG4gICAgICAgIHdbbCAtIDVdID09PSAxMTUgJiYgd1tsIC0gNl0gPT09IDExNyAmJiB3W2wgLSA3XSA9PT0gMTExIHx8IC8vIG91c25lc3NcbiAgICAgICAgd1tsIC0gNV0gPT09IDEwMSAmJiB3W2wgLSA2XSA9PT0gMTE4ICYmIHdbbCAtIDddID09PSAxMDUpKSB7XG4gICAgICAgICAgbCAtPSA0O1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMDk6XG4gICAgICAgIGlmIChsID49IHIxICsgNSAmJiB3W2wgLSAyXSA9PT0gMTE1ICYmIC8vIHNcbiAgICAgICAgd1tsIC0gM10gPT09IDEwNSAmJiAvLyBpXG4gICAgICAgIHdbbCAtIDRdID09PSAxMDggJiYgLy8gbFxuICAgICAgICB3W2wgLSA1XSA9PT0gOTcpXG4gICAgICAgICAgbCAtPSAzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTA1OlxuICAgICAgICBpZiAod1tsIC0gMl0gPT09IDk5KSB7XG4gICAgICAgICAgaWYgKGwgPj0gcjEgKyA0ICYmICh3W2wgLSA0XSA9PT0gMTAxIHx8IHdbbCAtIDRdID09PSA5NykgJiYgd1tsIC0gM10gPT09IDExMCkge1xuICAgICAgICAgICAgd1tsIC0gMV0gPSAxMDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHdbbCAtIDJdID09PSAxMDMpIHtcbiAgICAgICAgICBpZiAobCA+PSByMSArIDMgJiYgbCA+PSA0ICYmIHdbbCAtIDJdID09PSAxMDMgJiYgd1tsIC0gM10gPT09IDExMSAmJiB3W2wgLSA0XSA9PT0gMTA4KVxuICAgICAgICAgICAgLS1sO1xuICAgICAgICB9IGVsc2UgaWYgKHdbbCAtIDJdID09PSAxMTYpIHtcbiAgICAgICAgICBpZiAobCA+PSByMSArIDUgJiYgd1tsIC0gM10gPT09IDEwNSkge1xuICAgICAgICAgICAgaWYgKHdbbCAtIDRdID09PSAxMDgpIHtcbiAgICAgICAgICAgICAgaWYgKGwgPj0gNiAmJiB3W2wgLSA1XSA9PT0gMTA1ICYmIHdbbCAtIDZdID09PSA5OCkge1xuICAgICAgICAgICAgICAgIGlmIChsID49IHIxICsgNikge1xuICAgICAgICAgICAgICAgICAgbCAtPSAzO1xuICAgICAgICAgICAgICAgICAgd1tsIC0gMl0gPSAxMDg7XG4gICAgICAgICAgICAgICAgICB3W2wgLSAxXSA9IDEwMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAod1tsIC0gNF0gPT09IDEwOCAmJiB3W2wgLSA1XSA9PT0gOTcpIHtcbiAgICAgICAgICAgICAgICBsIC09IDM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAod1tsIC0gNF0gPT09IDExOCAmJiB3W2wgLSA1XSA9PT0gMTA1KSB7XG4gICAgICAgICAgICAgIGwgLT0gMjtcbiAgICAgICAgICAgICAgd1tsIC0gMV0gPSAxMDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHdbbCAtIDJdID09PSAxMDggJiYgbCA+PSAzKSB7XG4gICAgICAgICAgaWYgKHdbbCAtIDNdID09PSA5OCkge1xuICAgICAgICAgICAgaWYgKGwgPj0gNCAmJiB3W2wgLSA0XSA9PT0gOTcpIHtcbiAgICAgICAgICAgICAgaWYgKGwgPj0gcjEgKyA0KSB3W2wgLSAxXSA9IDEwMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobCA+PSByMSArIDMpIHtcbiAgICAgICAgICAgICAgd1tsIC0gMV0gPSAxMDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh3W2wgLSAzXSA9PT0gMTA4KSB7XG4gICAgICAgICAgICAgIGlmIChsID49IDUgJiYgd1tsIC0gNF0gPT09IDExNyAmJiB3W2wgLSA1XSA9PT0gMTAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGwgPj0gcjEgKyA1KSBsIC09IDI7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobCA+PSByMSArIDQgJiYgd1tsIC0gNF0gPT09IDk3KSB7XG4gICAgICAgICAgICAgICAgbCAtPSAyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdbbCAtIDNdID09PSAxMTUpIHtcbiAgICAgICAgICAgICAgaWYgKGwgPj0gNiAmJiB3W2wgLSA0XSA9PT0gMTE1ICYmIHdbbCAtIDVdID09PSAxMDEgJiYgd1tsIC0gNl0gPT09IDEwOCkge1xuICAgICAgICAgICAgICAgIGlmIChsID49IHIxICsgNikgbCAtPSAyO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGwgPj0gcjEgKyA1ICYmIHdbbCAtIDRdID09PSAxMTcgJiYgd1tsIC0gNV0gPT09IDExMSkge1xuICAgICAgICAgICAgICAgIGwgLT0gMjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChsID49IDUgJiYgd1tsIC0gM10gPT09IDExNiAmJiB3W2wgLSA0XSA9PT0gMTEwICYmIHdbbCAtIDVdID09PSAxMDEpIHtcbiAgICAgICAgICAgICAgaWYgKGwgPj0gcjEgKyA1KSBsIC09IDI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzVmFsaWRMaSh3W2wgLSAzXSkpIHtcbiAgICAgICAgICAgICAgbCAtPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAobCA+PSByMSArIDMpIHtcbiAgICBzd2l0Y2ggKHdbbCAtIDFdKSB7XG4gICAgICBjYXNlIDEwODpcbiAgICAgICAgaWYgKHdbbCAtIDNdID09PSA5OSkge1xuICAgICAgICAgIGlmIChsID49IHIxICsgNCAmJiB3W2wgLSA0XSA9PT0gMTA1ICYmIHdbbCAtIDJdID09PSA5NykgbCAtPSAyO1xuICAgICAgICB9IGVsc2UgaWYgKHdbbCAtIDNdID09PSAxMDIpIHtcbiAgICAgICAgICBpZiAod1tsIC0gMl0gPT09IDExNykgbCAtPSAzO1xuICAgICAgICB9IGVsc2UgaWYgKHdbbCAtIDNdID09PSAxMTApIHtcbiAgICAgICAgICBpZiAobCA+PSByMSArIDYgJiYgd1tsIC0gMl0gPT09IDk3ICYmIC8vIGFcbiAgICAgICAgICB3W2wgLSA0XSA9PT0gMTExICYmIC8vIG9cbiAgICAgICAgICB3W2wgLSA1XSA9PT0gMTA1ICYmIC8vIGlcbiAgICAgICAgICB3W2wgLSA2XSA9PT0gMTE2KSB7XG4gICAgICAgICAgICBpZiAobCA+PSA3ICYmIHdbbCAtIDddID09PSA5Nykge1xuICAgICAgICAgICAgICBpZiAobCA+PSByMSArIDcpIHtcbiAgICAgICAgICAgICAgICBsIC09IDQ7XG4gICAgICAgICAgICAgICAgd1tsIC0gMV0gPSAxMDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGwgLT0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEwMTpcbiAgICAgICAgaWYgKHdbbCAtIDJdID09PSAxMjIpIHtcbiAgICAgICAgICBpZiAobCA+PSByMSArIDUgJiYgd1tsIC0gM10gPT09IDEwNSAmJiB3W2wgLSA0XSA9PT0gMTA4ICYmIHdbbCAtIDVdID09PSA5NykgbCAtPSAzO1xuICAgICAgICB9IGVsc2UgaWYgKHdbbCAtIDJdID09PSAxMTYpIHtcbiAgICAgICAgICBpZiAobCA+PSByMSArIDUgJiYgd1tsIC0gM10gPT09IDk3ICYmIHdbbCAtIDRdID09PSA5OSAmJiB3W2wgLSA1XSA9PT0gMTA1KSBsIC09IDM7XG4gICAgICAgIH0gZWxzZSBpZiAod1tsIC0gMl0gPT09IDExOCkge1xuICAgICAgICAgIGlmIChsID49IHIyICsgNSAmJiB3W2wgLSAzXSA9PT0gMTA1ICYmIHdbbCAtIDRdID09PSAxMTYgJiYgd1tsIC0gNV0gPT09IDk3KSBsIC09IDU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEwNTpcbiAgICAgICAgaWYgKGwgPj0gcjEgKyA1ICYmIHdbbCAtIDJdID09PSAxMTYgJiYgLy8gdFxuICAgICAgICB3W2wgLSAzXSA9PT0gMTA1ICYmIC8vIGlcbiAgICAgICAgd1tsIC0gNF0gPT09IDk5ICYmIC8vIGNcbiAgICAgICAgd1tsIC0gNV0gPT09IDEwNSlcbiAgICAgICAgICBsIC09IDM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMTU6XG4gICAgICAgIGlmIChsID49IHIxICsgNCAmJiB3W2wgLSAyXSA9PT0gMTE1ICYmIHdbbCAtIDNdID09PSAxMDEgJiYgd1tsIC0gNF0gPT09IDExMCkgbCAtPSA0O1xuICAgIH1cbiAgfVxuICBpZiAobCA+PSByMiArIDIpIHtcbiAgICBzd2l0Y2ggKHdbbCAtIDFdKSB7XG4gICAgICBjYXNlIDExMDpcbiAgICAgICAgaWYgKGwgPj0gcjIgKyAzICYmIHdbbCAtIDJdID09PSAxMTEgJiYgLy8gb1xuICAgICAgICB3W2wgLSAzXSA9PT0gMTA1ICYmIC8vIGkgKGlvbilcbiAgICAgICAgKHdbbCAtIDRdID09PSAxMTUgfHwgd1tsIC0gNF0gPT09IDExNikpXG4gICAgICAgICAgbCAtPSAzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTA4OlxuICAgICAgICBpZiAod1tsIC0gMl0gPT09IDk3KSBsIC09IDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMTQ6XG4gICAgICAgIGlmICh3W2wgLSAyXSA9PT0gMTAxKSBsIC09IDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5OTpcbiAgICAgICAgaWYgKHdbbCAtIDJdID09PSAxMDUpIGwgLT0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEwOTpcbiAgICAgICAgaWYgKGwgPj0gcjIgKyAzICYmIHdbbCAtIDJdID09PSAxMTUgJiYgd1tsIC0gM10gPT09IDEwNSkgbCAtPSAzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTA1OlxuICAgICAgICBpZiAobCA+PSByMiArIDMgJiYgd1tsIC0gMl0gPT09IDExNiAmJiB3W2wgLSAzXSA9PT0gMTA1KSBsIC09IDM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMTU6XG4gICAgICAgIGlmIChsID49IHIyICsgMyAmJiB3W2wgLSAyXSA9PT0gMTE3ICYmIHdbbCAtIDNdID09PSAxMTEpIGwgLT0gMztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDExNjpcbiAgICAgICAgaWYgKGwgPj0gcjIgKyAzICYmIHdbbCAtIDJdID09PSAxMTApIHtcbiAgICAgICAgICBpZiAod1tsIC0gM10gPT09IDk3KSB7XG4gICAgICAgICAgICBsIC09IDM7XG4gICAgICAgICAgfSBlbHNlIGlmICh3W2wgLSAzXSA9PT0gMTAxKSB7XG4gICAgICAgICAgICBpZiAobCA+PSA0ICYmIHdbbCAtIDRdID09PSAxMDkpIHtcbiAgICAgICAgICAgICAgaWYgKGwgPj0gNSAmJiB3W2wgLSA1XSA9PT0gMTAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGwgPj0gcjIgKyA1KSBsIC09IDU7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobCA+PSByMiArIDQpIHtcbiAgICAgICAgICAgICAgICBsIC09IDQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGwgLT0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEwMTpcbiAgICAgICAgaWYgKHdbbCAtIDJdID09PSA5OSkge1xuICAgICAgICAgIGlmIChsID49IHIyICsgNCAmJiB3W2wgLSAzXSA9PT0gMTEwICYmICh3W2wgLSA0XSA9PT0gOTcgfHwgd1tsIC0gNF0gPT09IDEwMSkpIGwgLT0gNDtcbiAgICAgICAgfSBlbHNlIGlmICh3W2wgLSAyXSA9PT0gMTA4KSB7XG4gICAgICAgICAgaWYgKGwgPj0gcjIgKyA0ICYmIHdbbCAtIDNdID09PSA5OCAmJiAod1tsIC0gNF0gPT09IDk3IHx8IHdbbCAtIDRdID09PSAxMDUpKSBsIC09IDQ7XG4gICAgICAgIH0gZWxzZSBpZiAod1tsIC0gMl0gPT09IDExNikge1xuICAgICAgICAgIGlmIChsID49IHIyICsgMyAmJiB3W2wgLSAzXSA9PT0gOTcpIGwgLT0gMztcbiAgICAgICAgfSBlbHNlIGlmIChsID49IHIyICsgMyAmJiAod1tsIC0gMl0gPT09IDExOCB8fCB3W2wgLSAyXSA9PT0gMTIyKSAmJiB3W2wgLSAzXSA9PT0gMTA1KSB7XG4gICAgICAgICAgbCAtPSAzO1xuICAgICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChsID49IHIxICsgMSAmJiAvLyByMSBpcyA+PSAxXG4gIChsID49IHIyICsgMSAmJiB3W2wgLSAxXSA9PT0gMTA4ICYmIHdbbCAtIDJdID09PSAxMDggfHwgLy8gbGxcbiAgd1tsIC0gMV0gPT09IDEwMSAmJiAobCA+PSByMiArIDEgfHwgIWlzU2hvcnRWKHcsIGwgLSAxKSkpKVxuICAgIC0tbDtcbiAgbGV0IG91dCA9IFwiXCI7XG4gIGlmICh5Rm91bmQpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7ICsraSkge1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUod1tpXSA9PT0gODkgPyAxMjEgOiB3W2ldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyArK2kpIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHdbaV0pO1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xudmFyIERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgazE6IDEuMixcbiAgYjogMC43NSxcbiAgbWluTGVuZ3RoOiAyLFxuICBzdG9wV29yZHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcbiAgICBcImFcIixcbiAgICBcImFuXCIsXG4gICAgXCJhbmRcIixcbiAgICBcImFyZVwiLFxuICAgIFwiYXNcIixcbiAgICBcImF0XCIsXG4gICAgXCJiZVwiLFxuICAgIFwiYnlcIixcbiAgICBcImZvclwiLFxuICAgIFwiZnJvbVwiLFxuICAgIFwiaGFzXCIsXG4gICAgXCJoZVwiLFxuICAgIFwiaW5cIixcbiAgICBcImlzXCIsXG4gICAgXCJpdFwiLFxuICAgIFwiaXRzXCIsXG4gICAgXCJvZlwiLFxuICAgIFwib25cIixcbiAgICBcInRoYXRcIixcbiAgICBcInRoZVwiLFxuICAgIFwidG9cIixcbiAgICBcIndhc1wiLFxuICAgIFwid2VyZVwiLFxuICAgIFwid2lsbFwiLFxuICAgIFwid2l0aFwiXG4gIF0pLFxuICBzdGVtbWluZzogZmFsc2UsXG4gIHN0ZW1Xb3JkczogKHdvcmQpID0+IHdvcmRcbn07XG52YXIgVG9rZW5pemVyID0gY2xhc3MgX1Rva2VuaXplciB7XG4gIHN0YXRpYyB7XG4gICAgLyoqIERlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIFRva2VuaXplci4gKi9cbiAgICB0aGlzLkRFRkFVTFRfT1BUSU9OUyA9IHtcbiAgICAgIHN0b3BXb3JkczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICAgIG1pbkxlbmd0aDogMixcbiAgICAgIHN0ZW1taW5nOiBmYWxzZSxcbiAgICAgIHN0ZW1taW5nUnVsZXM6IFtdXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyB0b2tlbml6ZXIgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gVG9rZW5pemF0aW9uIG9wdGlvbnMgaW5jbHVkaW5nIHN0b3Agd29yZHMsIG1pbiBsZW5ndGgsIHN0ZW1taW5nLCBhbmQgY3VzdG9tIHJ1bGVzLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9uczIgPSB7fSkge1xuICAgIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSB7IC4uLl9Ub2tlbml6ZXIuREVGQVVMVF9PUFRJT05TLCAuLi5vcHRpb25zMiB9O1xuICAgIHRoaXMuc3RvcFdvcmRzID0gbWVyZ2VkT3B0aW9ucy5zdG9wV29yZHM7XG4gICAgdGhpcy5taW5MZW5ndGggPSBtZXJnZWRPcHRpb25zLm1pbkxlbmd0aDtcbiAgICB0aGlzLnN0ZW1taW5nID0gbWVyZ2VkT3B0aW9ucy5zdGVtbWluZztcbiAgICB0aGlzLnN0ZW1taW5nUnVsZXMgPSBtZXJnZWRPcHRpb25zLnN0ZW1taW5nUnVsZXMubWFwKChydWxlKSA9PiAoe1xuICAgICAgLi4ucnVsZSxcbiAgICAgIHBhdHRlcm46IHR5cGVvZiBydWxlLnBhdHRlcm4gPT09IFwic3RyaW5nXCIgPyBuZXcgUmVnRXhwKHJ1bGUucGF0dGVybikgOiBydWxlLnBhdHRlcm5cbiAgICB9KSk7XG4gIH1cbiAgLyoqXG4gICAqIFRva2VuaXplcyBpbnB1dCB0ZXh0IGludG8gYW4gYXJyYXkgb2YgcHJvY2Vzc2VkIHRlcm1zLlxuICAgKiBTdGVwczpcbiAgICogMS4gQ2xlYW5zIHRoZSB0ZXh0IChsb3dlcmNhc2UsIG5vcm1hbGl6ZSwgcmVtb3ZlIHB1bmN0dWF0aW9uL3N5bWJvbHMpLlxuICAgKiAyLiBTcGxpdHMgdGhlIHRleHQgaW50byBwb3RlbnRpYWwgdG9rZW5zLlxuICAgKiAzLiBGaWx0ZXJzIHRva2VucyBiYXNlZCBvbiBgbWluTGVuZ3RoYCBhbmQgYHN0b3BXb3Jkc2AuXG4gICAqIDQuIEFwcGxpZXMgc3RlbW1pbmcgaWYgYHN0ZW1taW5nYCBpcyB0cnVlIChjdXN0b20gcnVsZXMgZmlyc3QsIHRoZW4gUG9ydGVyMikuXG4gICAqIDUuIE9wdGlvbmFsbHkgY2FsY3VsYXRlcyBzdGF0aXN0aWNzLlxuICAgKlxuICAgKiBAcGFyYW0gdGV4dCAtIFRoZSBpbnB1dCB0ZXh0IHN0cmluZyB0byB0b2tlbml6ZS5cbiAgICogQHBhcmFtIGluY2x1ZGVTdGF0cyAtIElmIHRydWUsIHJldHVybnMgdG9rZW5pemF0aW9uIHN0YXRpc3RpY3MgYWxvbmcgd2l0aCB0b2tlbnMuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgKiBAcmV0dXJucyBBIGBUb2tlbml6YXRpb25SZXN1bHRgIG9iamVjdCBjb250YWluaW5nIHRoZSBhcnJheSBvZiB0b2tlbnMgYW5kIG9wdGlvbmFsIHN0YXRzLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGlucHV0IHRleHQgaXMgbnVsbCwgdW5kZWZpbmVkLCBvciBlbXB0eS5cbiAgICovXG4gIHRva2VuaXplKHRleHQsIGluY2x1ZGVTdGF0cyA9IGZhbHNlKSB7XG4gICAgaWYgKCF0ZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnB1dCB0ZXh0IGNhbm5vdCBiZSBudWxsIG9yIGVtcHR5XCIpO1xuICAgIH1cbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IG9yaWdpbmFsV29yZHMgPSB0ZXh0LnNwbGl0KC9cXHMrLykuZmlsdGVyKCh3b3JkKSA9PiB3b3JkLmxlbmd0aCA+IDApO1xuICAgIGNvbnN0IGNsZWFuZWQgPSB0aGlzLmNsZWFuVGV4dCh0ZXh0KTtcbiAgICBjb25zdCB0b2tlbnMgPSBjbGVhbmVkLnNwbGl0KC9cXHMrLykuZmlsdGVyKCh0b2tlbikgPT4gdGhpcy5pc1ZhbGlkVG9rZW4odG9rZW4pKS5tYXAoKHRva2VuKSA9PiB0aGlzLnN0ZW1taW5nID8gdGhpcy5zdGVtV29yZCh0b2tlbikgOiB0b2tlbik7XG4gICAgY29uc3Qgc3RhdHMgPSBpbmNsdWRlU3RhdHMgPyB7XG4gICAgICBvcmlnaW5hbFdvcmRDb3VudDogb3JpZ2luYWxXb3Jkcy5sZW5ndGgsXG4gICAgICBzdG9wV29yZHNSZW1vdmVkOiBvcmlnaW5hbFdvcmRzLmxlbmd0aCAtIHRva2Vucy5sZW5ndGgsXG4gICAgICAvLyBUaGlzIG1pZ2h0IGJlIGluY29ycmVjdCBpZiBzdGVtbWluZyBjaGFuZ2VzIHRva2VuIGNvdW50XG4gICAgICBzdGVtbWVkV29yZHM6IHRoaXMuc3RlbW1pbmcgPyB0b2tlbnMubGVuZ3RoIDogMCxcbiAgICAgIHByb2Nlc3NpbmdUaW1lTXM6IERhdGUubm93KCkgLSBzdGFydFRpbWVcbiAgICB9IDoge1xuICAgICAgb3JpZ2luYWxXb3JkQ291bnQ6IDAsXG4gICAgICBzdG9wV29yZHNSZW1vdmVkOiAwLFxuICAgICAgc3RlbW1lZFdvcmRzOiAwLFxuICAgICAgcHJvY2Vzc2luZ1RpbWVNczogMFxuICAgIH07XG4gICAgcmV0dXJuIHsgdG9rZW5zLCBzdGF0cyB9O1xuICB9XG4gIC8qKlxuICAgKiBDbGVhbnMgYW5kIG5vcm1hbGl6ZXMgdGV4dCBmb3IgdG9rZW5pemF0aW9uLlxuICAgKiAtIENvbnZlcnRzIHRvIGxvd2VyY2FzZS5cbiAgICogLSBOb3JtYWxpemVzIFVuaWNvZGUgY2hhcmFjdGVycyAoTkZLRCkuXG4gICAqIC0gUmVtb3ZlcyBjb250cm9sIGNoYXJhY3RlcnMgYW5kIHplcm8td2lkdGggc3BhY2VzLlxuICAgKiAtIFJlbW92ZXMgZGlhY3JpdGljYWwgbWFya3MgKGFjY2VudHMpLlxuICAgKiAtIFJlbW92ZXMgZW1vamlzIGFuZCBwaWN0b2dyYXBocy5cbiAgICogLSBSZW1vdmVzIGNvbW1vbiBzeW1ib2xzICjihKIsIMKuLCDCqSwg4oSgLCDigLwpLlxuICAgKiAtIFJlcGxhY2VzIFVuaWNvZGUgcHVuY3R1YXRpb24gd2l0aCBzcGFjZXMuXG4gICAqIC0gUmVtb3ZlcyBjaGFyYWN0ZXJzIG5vdCBtYXRjaGluZyBiYXNpYyBMYXRpbiwgQ0pLLCBIYW5ndWwsIG9yIHdoaXRlc3BhY2UuXG4gICAqIC0gQ29sbGFwc2VzIG11bHRpcGxlIHNwYWNlcyBpbnRvIHNpbmdsZSBzcGFjZXMuXG4gICAqIC0gVHJpbXMgbGVhZGluZy90cmFpbGluZyB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiBAcGFyYW0gdGV4dCAtIElucHV0IHRleHQgdG8gY2xlYW4uXG4gICAqIEByZXR1cm5zIENsZWFuZWQgYW5kIG5vcm1hbGl6ZWQgdGV4dCwgcmVhZHkgZm9yIHNwbGl0dGluZyBpbnRvIHRva2Vucy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY2xlYW5UZXh0KFwiSGVsbG8sIFdvcmxk4oSiIVwiKSAvLyBcImhlbGxvIHdvcmxkXCJcbiAgICogY2xlYW5UZXh0KFwiaMOpbGxvIPCfkYtcIikgLy8gXCJoZWxsb1wiXG4gICAqIGNsZWFuVGV4dChcIkhlbGxvIOS4lueVjCFcIikgLy8gXCJoZWxsbyDkuJbnlYxcIlxuICAgKiBjbGVhblRleHQoXCJJJ20gZG9uJ3RcIikgLy8gXCJpJ20gZG9uJ3RcIiAoYXBvc3Ryb3BoZXMga2VwdCBieSByZXBsYWNpbmcgcHVuY3R1YXRpb24gd2l0aCBzcGFjZSlcbiAgICogY2xlYW5UZXh0KFwidGVzdMKpMjAyM1wiKSAvLyBcInRlc3QgMjAyM1wiXG4gICAqL1xuICBjbGVhblRleHQodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnRvTG93ZXJDYXNlKCkubm9ybWFsaXplKFwiTkZLRFwiKS5yZXBsYWNlKC9bXFx1MDAwMC1cXHUwMDFGXFx1MDA3Ri1cXHUwMDlGXFx1MjAwQi1cXHUyMDBEXFx1RkVGRl0vZywgXCJcIikucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIikucmVwbGFjZSgvW1xccHtFbW9qaV9QcmVzZW50YXRpb259XFxwe0V4dGVuZGVkX1BpY3RvZ3JhcGhpY31dL2d1LCBcIlwiKS5yZXBsYWNlKC9b4oSiwq7CqeKEoOKAvF0vZywgXCJcIikucmVwbGFjZSgvW1xccHtQfV0vZ3UsIFwiIFwiKS5yZXBsYWNlKC9bXmEtejAtOVxcdTMwNDAtXFx1MzBGRlxcdTM0MDAtXFx1NERCRlxcdTRFMDAtXFx1OUZGRlxcdUFDMDAtXFx1RDdBRlxcc10vZ3UsIFwiIFwiKS5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKS50cmltKCk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIHRva2VuIGlzIHZhbGlkIChtZWV0cyBgbWluTGVuZ3RoYCBjcml0ZXJpYSBhbmQgaXMgbm90IGEgc3RvcCB3b3JkKS5cbiAgICogTnVtZXJpYyB0b2tlbnMgYXJlIGFsd2F5cyBjb25zaWRlcmVkIHZhbGlkIHJlZ2FyZGxlc3Mgb2YgbGVuZ3RoLlxuICAgKiBAcGFyYW0gdG9rZW4gLSBUaGUgdG9rZW4gc3RyaW5nIHRvIHZhbGlkYXRlLlxuICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRva2VuIGlzIHZhbGlkLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICovXG4gIGlzVmFsaWRUb2tlbih0b2tlbikge1xuICAgIGNvbnN0IGlzTnVtZXJpYyA9IC9eXFxkKyQvLnRlc3QodG9rZW4pO1xuICAgIHJldHVybiAodG9rZW4ubGVuZ3RoID49IHRoaXMubWluTGVuZ3RoIHx8IGlzTnVtZXJpYykgJiYgIXRoaXMuc3RvcFdvcmRzLmhhcyh0b2tlbik7XG4gIH1cbiAgLyoqXG4gICAqIEFwcGxpZXMgc3RlbW1pbmcgdG8gYSBzaW5nbGUgd29yZC5cbiAgICogRmlyc3QsIHRyaWVzIHRvIGFwcGx5IGN1c3RvbSBzdGVtbWluZyBydWxlcyBkZWZpbmVkIGluIGBzdGVtbWluZ1J1bGVzYC5cbiAgICogSWYgbm8gY3VzdG9tIHJ1bGUgbWF0Y2hlcywgYXBwbGllcyB0aGUgZGVmYXVsdCBQb3J0ZXIyIHN0ZW1taW5nIGFsZ29yaXRobS5cbiAgICogV29yZHMgc2hvcnRlciB0aGFuIDMgY2hhcmFjdGVycyBhcmUgbm90IHN0ZW1tZWQuXG4gICAqIEBwYXJhbSB3b3JkIC0gVGhlIHdvcmQgdG8gc3RlbS5cbiAgICogQHJldHVybnMgVGhlIHN0ZW1tZWQgd29yZC5cbiAgICovXG4gIHN0ZW1Xb3JkKHdvcmQpIHtcbiAgICBpZiAod29yZC5sZW5ndGggPCAzKSByZXR1cm4gd29yZDtcbiAgICBsZXQgY3VzdG9tUnVsZUFwcGxpZWQgPSBmYWxzZTtcbiAgICBsZXQgc3RlbW1lZCA9IHdvcmQ7XG4gICAgZm9yIChjb25zdCBydWxlIG9mIHRoaXMuc3RlbW1pbmdSdWxlcykge1xuICAgICAgY29uc3QgbWF0Y2ggPSBzdGVtbWVkLm1hdGNoKHJ1bGUucGF0dGVybik7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgaWYgKCFydWxlLm1pbk1lYXN1cmUgfHwgdGhpcy5tZWFzdXJlKHN0ZW1tZWQuc3Vic3RyaW5nKDAsIG1hdGNoLmluZGV4KSkgPj0gcnVsZS5taW5NZWFzdXJlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBydWxlLnJlcGxhY2VtZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBzdGVtbWVkID0gc3RlbW1lZC5yZXBsYWNlKHJ1bGUucGF0dGVybiwgcnVsZS5yZXBsYWNlbWVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0ZW1tZWQgPSBzdGVtbWVkLnJlcGxhY2UoXG4gICAgICAgICAgICAgIHJ1bGUucGF0dGVybixcbiAgICAgICAgICAgICAgKC4uLmFyZ3MpID0+IHJ1bGUucmVwbGFjZW1lbnQoLi4uYXJncylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1c3RvbVJ1bGVBcHBsaWVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3VzdG9tUnVsZUFwcGxpZWQgJiYgc3RlbW1lZCAhPT0gd29yZCkgcmV0dXJuIHN0ZW1tZWQ7XG4gICAgcmV0dXJuIHN0ZW0oc3RlbW1lZCk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgY2hhcmFjdGVyIGF0IGEgZ2l2ZW4gaW5kZXggaW4gYSB3b3JkIGlzIGEgY29uc29uYW50LlxuICAgKiBUcmVhdHMgJ3knIGFzIGEgY29uc29uYW50IGlmIGl0J3MgdGhlIGZpcnN0IGxldHRlciBvciBmb2xsb3dzIGEgY29uc29uYW50LlxuICAgKiBAcGFyYW0gd29yZCAtIFRoZSB3b3JkIHN0cmluZy5cbiAgICogQHBhcmFtIGkgLSBUaGUgaW5kZXggb2YgdGhlIGNoYXJhY3RlciB0byBjaGVjay5cbiAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBjaGFyYWN0ZXIgaXMgYSBjb25zb25hbnQsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICAgKi9cbiAgaXNDb25zb25hbnQod29yZCwgaSkge1xuICAgIGNvbnN0IGNoYXIgPSB3b3JkW2ldO1xuICAgIGlmIChcImFlaW91XCIuaW5jbHVkZXMoY2hhcikpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gY2hhciAhPT0gXCJ5XCIgfHwgKGkgPT09IDAgPyB0cnVlIDogIXRoaXMuaXNDb25zb25hbnQod29yZCwgaSAtIDEpKTtcbiAgfVxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgXCJtZWFzdXJlXCIgb2YgYSB3b3JkIHN0ZW0gKGFwcHJveGltYXRlcyBzeWxsYWJsZSBjb3VudCkuXG4gICAqIFRoZSBtZWFzdXJlIChtKSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIGEgc2VxdWVuY2Ugb2Ygdm93ZWxzIGlzIGZvbGxvd2VkIGJ5IGFcbiAgICogc2VxdWVuY2Ugb2YgY29uc29uYW50cyAoVkMpLiBVc2VkIGluIHNvbWUgc3RlbW1pbmcgcnVsZXMuXG4gICAqIEV4YW1wbGU6IG1lYXN1cmUoXCJ0cmVlXCIpID0gMCwgbWVhc3VyZShcInRyb3VibGVcIikgPSAxLCBtZWFzdXJlKFwicHJpdmF0ZVwiKSA9IDJcbiAgICogQHBhcmFtIHdvcmQgLSBUaGUgd29yZCAob3Igc3RlbSkgdG8gbWVhc3VyZS5cbiAgICogQHJldHVybnMgVGhlIG1lYXN1cmUgKG0pIG9mIHRoZSB3b3JkLlxuICAgKi9cbiAgbWVhc3VyZSh3b3JkKSB7XG4gICAgbGV0IG0gPSAwO1xuICAgIGxldCB2b3dlbFNlZW4gPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmlzQ29uc29uYW50KHdvcmQsIGkpKSB7XG4gICAgICAgIGlmICh2b3dlbFNlZW4pIHtcbiAgICAgICAgICBtKys7XG4gICAgICAgICAgdm93ZWxTZWVuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZvd2VsU2VlbiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtO1xuICB9XG59O1xudmFyIEJNMjUgPSBjbGFzcyB7XG4gIC8vIENvbnNpZGVyIHVzaW5nIGEgZ2VuZXJpYyA8VD5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgQk0yNSBzZWFyY2ggaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBkb2NzIC0gT3B0aW9uYWwgYXJyYXkgb2YgaW5pdGlhbCBkb2N1bWVudHMgKG9iamVjdHMgd2l0aCBzdHJpbmcgZmllbGRzKSB0byBpbmRleC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIEJNMjUgcGFyYW1ldGVycyAoazEsIGIpLCB0b2tlbml6ZXIgKHN0b3BXb3Jkcywgc3RlbW1pbmcsIG1pbkxlbmd0aCksIGFuZCBmaWVsZCBib29zdHMuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb2NzLCBvcHRpb25zMiA9IHt9KSB7XG4gICAgY29uc3Qgb3B0cyA9IHsgLi4uREVGQVVMVF9PUFRJT05TLCAuLi5vcHRpb25zMiB9O1xuICAgIHRoaXMudGVybUZyZXF1ZW5jeVNhdHVyYXRpb24gPSBvcHRzLmsxO1xuICAgIHRoaXMubGVuZ3RoTm9ybWFsaXphdGlvbkZhY3RvciA9IG9wdHMuYjtcbiAgICB0aGlzLnRva2VuaXplciA9IG5ldyBUb2tlbml6ZXIob3B0cyk7XG4gICAgdGhpcy5maWVsZEJvb3N0cyA9IG9wdHMuZmllbGRCb29zdHMgfHwge307XG4gICAgdGhpcy5kb2N1bWVudHMgPSBbXTtcbiAgICB0aGlzLmRvY3VtZW50TGVuZ3RocyA9IG5ldyBVaW50MzJBcnJheSgwKTtcbiAgICB0aGlzLnRlcm1Ub0luZGV4ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICB0aGlzLmRvY3VtZW50RnJlcXVlbmN5ID0gbmV3IFVpbnQzMkFycmF5KDApO1xuICAgIHRoaXMuYXZlcmFnZURvY0xlbmd0aCA9IDA7XG4gICAgdGhpcy50ZXJtRnJlcXVlbmNpZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIGlmIChkb2NzICYmIGRvY3MubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5kb2N1bWVudHMgPSBbLi4uZG9jc107XG4gICAgICBjb25zdCB7IGRvY3VtZW50TGVuZ3RocywgdGVybVRvSW5kZXgsIGRvY3VtZW50RnJlcXVlbmN5LCBhdmVyYWdlRG9jTGVuZ3RoLCB0ZXJtRnJlcXVlbmNpZXMgfSA9IHRoaXMucHJvY2Vzc0RvY3VtZW50cyhkb2NzKTtcbiAgICAgIHRoaXMuZG9jdW1lbnRMZW5ndGhzID0gZG9jdW1lbnRMZW5ndGhzO1xuICAgICAgdGhpcy50ZXJtVG9JbmRleCA9IHRlcm1Ub0luZGV4O1xuICAgICAgdGhpcy5kb2N1bWVudEZyZXF1ZW5jeSA9IGRvY3VtZW50RnJlcXVlbmN5O1xuICAgICAgdGhpcy5hdmVyYWdlRG9jTGVuZ3RoID0gYXZlcmFnZURvY0xlbmd0aDtcbiAgICAgIHRoaXMudGVybUZyZXF1ZW5jaWVzID0gdGVybUZyZXF1ZW5jaWVzO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUHJvY2Vzc2VzIGFuIGFycmF5IG9mIGRvY3VtZW50cyB0byBidWlsZCB0aGUgaW5pdGlhbCBpbmRleCBzdHJ1Y3R1cmVzLlxuICAgKiBDYWxjdWxhdGVzIGRvY3VtZW50IGxlbmd0aHMsIHRlcm0gZnJlcXVlbmNpZXMsIGRvY3VtZW50IGZyZXF1ZW5jaWVzLCBhbmQgYXZlcmFnZSBkb2N1bWVudCBsZW5ndGguXG4gICAqIEBwYXJhbSBkb2NzIC0gQXJyYXkgb2YgZG9jdW1lbnRzIHRvIHByb2Nlc3MuXG4gICAqIEByZXR1cm5zIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBjYWxjdWxhdGVkIGluZGV4IGRhdGEuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHJvY2Vzc0RvY3VtZW50cyhkb2NzKSB7XG4gICAgY29uc3QgbnVtRG9jcyA9IGRvY3MubGVuZ3RoO1xuICAgIGNvbnN0IGRvY3VtZW50TGVuZ3RocyA9IG5ldyBVaW50MzJBcnJheShudW1Eb2NzKTtcbiAgICBjb25zdCB0ZXJtVG9JbmRleCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgY29uc3QgdGVybURvY3MgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHRlcm1GcmVxdWVuY2llcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgbGV0IHRvdGFsRG9jTGVuZ3RoID0gMDtcbiAgICBsZXQgbmV4dFRlcm1JbmRleCA9IDA7XG4gICAgZG9jcy5mb3JFYWNoKChkb2MsIGRvY0luZGV4KSA9PiB7XG4gICAgICBsZXQgY3VycmVudERvY0xlbmd0aCA9IDA7XG4gICAgICBjb25zdCBkb2NUZXJtRnJlcXVlbmNpZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgT2JqZWN0LmVudHJpZXMoZG9jKS5mb3JFYWNoKChbZmllbGQsIGNvbnRlbnRdKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCAhPT0gXCJzdHJpbmdcIikgcmV0dXJuO1xuICAgICAgICBjb25zdCBmaWVsZEJvb3N0ID0gdGhpcy5maWVsZEJvb3N0c1tmaWVsZF0gfHwgMTtcbiAgICAgICAgY29uc3QgeyB0b2tlbnMgfSA9IHRoaXMudG9rZW5pemVyLnRva2VuaXplKGNvbnRlbnQpO1xuICAgICAgICBjb25zdCBmaWVsZExlbmd0aCA9IHRva2Vucy5sZW5ndGggKiBmaWVsZEJvb3N0O1xuICAgICAgICBjdXJyZW50RG9jTGVuZ3RoICs9IGZpZWxkTGVuZ3RoO1xuICAgICAgICB0b2tlbnMuZm9yRWFjaCgodGVybSkgPT4ge1xuICAgICAgICAgIGlmICghdGVybVRvSW5kZXguaGFzKHRlcm0pKSB7XG4gICAgICAgICAgICB0ZXJtVG9JbmRleC5zZXQodGVybSwgbmV4dFRlcm1JbmRleCsrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgdGVybUluZGV4VmFsID0gdGVybVRvSW5kZXguZ2V0KHRlcm0pO1xuICAgICAgICAgIGlmICghdGVybURvY3MuaGFzKHRlcm0pKSB7XG4gICAgICAgICAgICB0ZXJtRG9jcy5zZXQodGVybSwgLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRlcm1Eb2NzLmdldCh0ZXJtKS5hZGQoZG9jSW5kZXgpO1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRGcmVxID0gZG9jVGVybUZyZXF1ZW5jaWVzLmdldCh0ZXJtSW5kZXhWYWwpIHx8IDA7XG4gICAgICAgICAgZG9jVGVybUZyZXF1ZW5jaWVzLnNldCh0ZXJtSW5kZXhWYWwsIGN1cnJlbnRGcmVxICsgZmllbGRCb29zdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBkb2N1bWVudExlbmd0aHNbZG9jSW5kZXhdID0gY3VycmVudERvY0xlbmd0aDtcbiAgICAgIHRvdGFsRG9jTGVuZ3RoICs9IGN1cnJlbnREb2NMZW5ndGg7XG4gICAgICBkb2NUZXJtRnJlcXVlbmNpZXMuZm9yRWFjaCgoZnJlcSwgdGVybUluZGV4VmFsKSA9PiB7XG4gICAgICAgIGlmICghdGVybUZyZXF1ZW5jaWVzLmhhcyh0ZXJtSW5kZXhWYWwpKSB7XG4gICAgICAgICAgdGVybUZyZXF1ZW5jaWVzLnNldCh0ZXJtSW5kZXhWYWwsIC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRlcm1GcmVxdWVuY2llcy5nZXQodGVybUluZGV4VmFsKS5zZXQoZG9jSW5kZXgsIGZyZXEpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY29uc3QgZG9jdW1lbnRGcmVxdWVuY3kgPSBuZXcgVWludDMyQXJyYXkodGVybVRvSW5kZXguc2l6ZSk7XG4gICAgdGVybURvY3MuZm9yRWFjaCgoZG9jc1NldCwgdGVybSkgPT4ge1xuICAgICAgY29uc3QgdGVybUluZGV4VmFsID0gdGVybVRvSW5kZXguZ2V0KHRlcm0pO1xuICAgICAgZG9jdW1lbnRGcmVxdWVuY3lbdGVybUluZGV4VmFsXSA9IGRvY3NTZXQuc2l6ZTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZG9jdW1lbnRMZW5ndGhzLFxuICAgICAgdGVybVRvSW5kZXgsXG4gICAgICBkb2N1bWVudEZyZXF1ZW5jeSxcbiAgICAgIGF2ZXJhZ2VEb2NMZW5ndGg6IG51bURvY3MgPiAwID8gdG90YWxEb2NMZW5ndGggLyBudW1Eb2NzIDogMCxcbiAgICAgIHRlcm1GcmVxdWVuY2llc1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFJlY2FsY3VsYXRlcyB0aGUgYXZlcmFnZSBkb2N1bWVudCBsZW5ndGggYmFzZWQgb24gdGhlIGN1cnJlbnQgYGRvY3VtZW50TGVuZ3Roc2AuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVjYWxjdWxhdGVBdmVyYWdlTGVuZ3RoKCkge1xuICAgIGlmICh0aGlzLmRvY3VtZW50TGVuZ3Rocy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuYXZlcmFnZURvY0xlbmd0aCA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRvdGFsTGVuZ3RoID0gQXJyYXkucHJvdG90eXBlLnJlZHVjZS5jYWxsKFxuICAgICAgdGhpcy5kb2N1bWVudExlbmd0aHMsXG4gICAgICAoc3VtLCBsZW4pID0+IHN1bSArIGxlbixcbiAgICAgIDBcbiAgICApO1xuICAgIHRoaXMuYXZlcmFnZURvY0xlbmd0aCA9IHRvdGFsTGVuZ3RoIC8gdGhpcy5kb2N1bWVudExlbmd0aHMubGVuZ3RoO1xuICB9XG4gIC8qKlxuICAgKiBTZWFyY2hlcyB0aGUgaW5kZXhlZCBkb2N1bWVudHMgZm9yIGEgZ2l2ZW4gcXVlcnkgc3RyaW5nIHVzaW5nIHRoZSBCTTI1IHJhbmtpbmcgZm9ybXVsYS5cbiAgICpcbiAgICogQHBhcmFtIHF1ZXJ5IC0gVGhlIHNlYXJjaCBxdWVyeSB0ZXh0LlxuICAgKiBAcGFyYW0gdG9wSyAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0b3Atc2NvcmluZyByZXN1bHRzIHRvIHJldHVybi4gRGVmYXVsdHMgdG8gMTAuXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGBTZWFyY2hSZXN1bHRgIG9iamVjdHMsIHNvcnRlZCBieSBkZXNjZW5kaW5nIEJNMjUgc2NvcmUuXG4gICAqL1xuICBzZWFyY2gocXVlcnksIHRvcEsgPSAxMCkge1xuICAgIGNvbnN0IHsgdG9rZW5zOiBxdWVyeVRva2VucyB9ID0gdGhpcy50b2tlbml6ZXIudG9rZW5pemUocXVlcnkpO1xuICAgIGNvbnN0IHNjb3JlcyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5kb2N1bWVudExlbmd0aHMubGVuZ3RoKS5maWxsKDApO1xuICAgIHF1ZXJ5VG9rZW5zLmZvckVhY2goKHRlcm0pID0+IHtcbiAgICAgIGNvbnN0IHRlcm1JbmRleCA9IHRoaXMudGVybVRvSW5kZXguZ2V0KHRlcm0pO1xuICAgICAgaWYgKHRlcm1JbmRleCA9PT0gdm9pZCAwKSByZXR1cm47XG4gICAgICBjb25zdCBpZGYgPSB0aGlzLmNhbGN1bGF0ZUlkZih0ZXJtSW5kZXgpO1xuICAgICAgaWYgKGlkZiA8PSAwKSByZXR1cm47XG4gICAgICBjb25zdCB0ZXJtRnJlcXNJbkRvY3MgPSB0aGlzLnRlcm1GcmVxdWVuY2llcy5nZXQodGVybUluZGV4KTtcbiAgICAgIGlmICghdGVybUZyZXFzSW5Eb2NzKSByZXR1cm47XG4gICAgICB0ZXJtRnJlcXNJbkRvY3MuZm9yRWFjaCgodGYsIGRvY0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGRvY0xlbmd0aCA9IHRoaXMuZG9jdW1lbnRMZW5ndGhzW2RvY0luZGV4XTtcbiAgICAgICAgY29uc3QgbnVtZXJhdG9yID0gdGYgKiAodGhpcy50ZXJtRnJlcXVlbmN5U2F0dXJhdGlvbiArIDEpO1xuICAgICAgICBjb25zdCBkZW5vbWluYXRvciA9IHRmICsgdGhpcy50ZXJtRnJlcXVlbmN5U2F0dXJhdGlvbiAqICgxIC0gdGhpcy5sZW5ndGhOb3JtYWxpemF0aW9uRmFjdG9yICsgdGhpcy5sZW5ndGhOb3JtYWxpemF0aW9uRmFjdG9yICogZG9jTGVuZ3RoIC8gdGhpcy5hdmVyYWdlRG9jTGVuZ3RoKTtcbiAgICAgICAgc2NvcmVzW2RvY0luZGV4XSArPSBpZGYgKiAobnVtZXJhdG9yIC8gZGVub21pbmF0b3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IHNjb3Jlcy5sZW5ndGggfSwgKF8sIGkpID0+ICh7XG4gICAgICBpbmRleDogaSxcbiAgICAgIHNjb3JlOiBzY29yZXNbaV1cbiAgICAgIC8vIE9wdGlvbmFsbHkgYWRkOiBkb2M6IHRoaXMuZ2V0RG9jdW1lbnQoaSkgLy8gSWYgeW91IHdhbnQgdGhlIGZ1bGwgZG9jIGluIHJlc3VsdHNcbiAgICB9KSkuZmlsdGVyKChyZXN1bHQpID0+IHJlc3VsdC5zY29yZSA+IDApLnNvcnQoKGEsIGIpID0+IGIuc2NvcmUgLSBhLnNjb3JlKS5zbGljZSgwLCB0b3BLKTtcbiAgfVxuICAvKipcbiAgICogU2VhcmNoZXMgZm9yIGFuIGV4YWN0IHBocmFzZSB3aXRoaW4gdGhlIGluZGV4ZWQgZG9jdW1lbnRzLlxuICAgKiBSYW5rcyBkb2N1bWVudHMgY29udGFpbmluZyB0aGUgZXhhY3Qgc2VxdWVuY2Ugb2YgdG9rZW5zIGhpZ2hlci5cbiAgICogTm90ZTogVGhpcyBpcyBhIGJhc2ljIGltcGxlbWVudGF0aW9uLiBNb3JlIHNvcGhpc3RpY2F0ZWQgcGhyYXNlIHNlYXJjaCBtaWdodCBjb25zaWRlciBwcm94aW1pdHkuXG4gICAqXG4gICAqIEBwYXJhbSBwaHJhc2UgLSBUaGUgZXhhY3QgcGhyYXNlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB0b3BLIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLiBEZWZhdWx0cyB0byAxMC5cbiAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgYFNlYXJjaFJlc3VsdGAgb2JqZWN0cywgc29ydGVkIGJ5IHNjb3JlLCBmb3IgZG9jdW1lbnRzIGNvbnRhaW5pbmcgdGhlIHBocmFzZS5cbiAgICovXG4gIHNlYXJjaFBocmFzZShwaHJhc2UsIHRvcEsgPSAxMCkge1xuICAgIGNvbnN0IHsgdG9rZW5zOiBwaHJhc2VUb2tlbnMgfSA9IHRoaXMudG9rZW5pemVyLnRva2VuaXplKHBocmFzZSk7XG4gICAgaWYgKHBocmFzZVRva2Vucy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgICBsZXQgY2FuZGlkYXRlRG9jcyA9IG51bGw7XG4gICAgZm9yIChjb25zdCB0ZXJtIG9mIHBocmFzZVRva2Vucykge1xuICAgICAgY29uc3QgdGVybUluZGV4ID0gdGhpcy50ZXJtVG9JbmRleC5nZXQodGVybSk7XG4gICAgICBpZiAodGVybUluZGV4ID09PSB2b2lkIDApIHJldHVybiBbXTtcbiAgICAgIGNvbnN0IGRvY3NDb250YWluaW5nVGVybUl0ZXIgPSB0aGlzLnRlcm1GcmVxdWVuY2llcy5nZXQodGVybUluZGV4KT8ua2V5cygpO1xuICAgICAgaWYgKCFkb2NzQ29udGFpbmluZ1Rlcm1JdGVyKSByZXR1cm4gW107XG4gICAgICBjb25zdCBjdXJyZW50VGVybURvY3MgPSBuZXcgU2V0KGRvY3NDb250YWluaW5nVGVybUl0ZXIpO1xuICAgICAgaWYgKGNhbmRpZGF0ZURvY3MgPT09IG51bGwpIHtcbiAgICAgICAgY2FuZGlkYXRlRG9jcyA9IGN1cnJlbnRUZXJtRG9jcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbmRpZGF0ZURvY3MgPSBuZXcgU2V0KFsuLi5jYW5kaWRhdGVEb2NzXS5maWx0ZXIoKGRvY0lkeCkgPT4gY3VycmVudFRlcm1Eb2NzLmhhcyhkb2NJZHgpKSk7XG4gICAgICB9XG4gICAgICBpZiAoY2FuZGlkYXRlRG9jcy5zaXplID09PSAwKSByZXR1cm4gW107XG4gICAgfVxuICAgIGlmIChjYW5kaWRhdGVEb2NzID09PSBudWxsIHx8IGNhbmRpZGF0ZURvY3Muc2l6ZSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgIGNvbnN0IHNjb3JlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgY2FuZGlkYXRlRG9jcy5mb3JFYWNoKChkb2NJbmRleCkgPT4ge1xuICAgICAgY29uc3QgZG9jID0gdGhpcy5nZXREb2N1bWVudChkb2NJbmRleCk7XG4gICAgICBsZXQgcGhyYXNlRm91bmRJbkRvYyA9IGZhbHNlO1xuICAgICAgT2JqZWN0LmVudHJpZXMoZG9jKS5mb3JFYWNoKChbZmllbGQsIGNvbnRlbnRdKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCAhPT0gXCJzdHJpbmdcIiB8fCBwaHJhc2VGb3VuZEluRG9jKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGZpZWxkQm9vc3QgPSB0aGlzLmZpZWxkQm9vc3RzW2ZpZWxkXSB8fCAxO1xuICAgICAgICBjb25zdCB7IHRva2VuczogZG9jVG9rZW5zIH0gPSB0aGlzLnRva2VuaXplci50b2tlbml6ZShjb250ZW50KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gZG9jVG9rZW5zLmxlbmd0aCAtIHBocmFzZVRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBtYXRjaCA9IHRydWU7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwaHJhc2VUb2tlbnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChkb2NUb2tlbnNbaSArIGpdICE9PSBwaHJhc2VUb2tlbnNbal0pIHtcbiAgICAgICAgICAgICAgbWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgY29uc3QgcGhyYXNlU2NvcmVWYWwgPSB0aGlzLmNhbGN1bGF0ZVBocmFzZVNjb3JlKHBocmFzZVRva2VucywgZG9jSW5kZXgpICogZmllbGRCb29zdDtcbiAgICAgICAgICAgIHNjb3Jlcy5zZXQoZG9jSW5kZXgsIChzY29yZXMuZ2V0KGRvY0luZGV4KSB8fCAwKSArIHBocmFzZVNjb3JlVmFsKTtcbiAgICAgICAgICAgIHBocmFzZUZvdW5kSW5Eb2MgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShzY29yZXMuZW50cmllcygpKS5tYXAoKFtpbmRleCwgc2NvcmVdKSA9PiAoeyBpbmRleCwgc2NvcmUgfSkpLnNvcnQoKGEsIGIpID0+IGIuc2NvcmUgLSBhLnNjb3JlKS5zbGljZSgwLCB0b3BLKTtcbiAgfVxuICAvKipcbiAgICogQ2FsY3VsYXRlcyBhIEJNMjUtbGlrZSBzY29yZSBmb3IgYSBzZXF1ZW5jZSBvZiBwaHJhc2UgdG9rZW5zIHdpdGhpbiBhIHNwZWNpZmljIGRvY3VtZW50LlxuICAgKiBTdW1zIHRoZSBpbmRpdmlkdWFsIEJNMjUgc2NvcmVzIG9mIHRoZSB0ZXJtcyBpbiB0aGUgcGhyYXNlIGZvciB0aGF0IGRvY3VtZW50LlxuICAgKiBAcGFyYW0gcGhyYXNlVG9rZW5zIC0gVGhlIHRva2VuaXplZCBwaHJhc2UuXG4gICAqIEBwYXJhbSBkb2NJbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgZG9jdW1lbnQgdG8gc2NvcmUgYWdhaW5zdC5cbiAgICogQHJldHVybnMgVGhlIGNhbGN1bGF0ZWQgcGhyYXNlIHNjb3JlIGZvciB0aGUgZG9jdW1lbnQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY2FsY3VsYXRlUGhyYXNlU2NvcmUocGhyYXNlVG9rZW5zLCBkb2NJbmRleCkge1xuICAgIHJldHVybiBwaHJhc2VUb2tlbnMucmVkdWNlKChjdXJyZW50U2NvcmUsIHRlcm0pID0+IHtcbiAgICAgIGNvbnN0IHRlcm1JbmRleCA9IHRoaXMudGVybVRvSW5kZXguZ2V0KHRlcm0pO1xuICAgICAgaWYgKHRlcm1JbmRleCA9PT0gdm9pZCAwKSByZXR1cm4gY3VycmVudFNjb3JlO1xuICAgICAgY29uc3QgaWRmID0gdGhpcy5jYWxjdWxhdGVJZGYodGVybUluZGV4KTtcbiAgICAgIGNvbnN0IHRmID0gdGhpcy50ZXJtRnJlcXVlbmNpZXMuZ2V0KHRlcm1JbmRleCk/LmdldChkb2NJbmRleCkgfHwgMDtcbiAgICAgIGNvbnN0IGRvY0xlbmd0aCA9IHRoaXMuZG9jdW1lbnRMZW5ndGhzW2RvY0luZGV4XTtcbiAgICAgIGNvbnN0IG51bWVyYXRvciA9IHRmICogKHRoaXMudGVybUZyZXF1ZW5jeVNhdHVyYXRpb24gKyAxKTtcbiAgICAgIGNvbnN0IGRlbm9taW5hdG9yID0gdGYgKyB0aGlzLnRlcm1GcmVxdWVuY3lTYXR1cmF0aW9uICogKDEgLSB0aGlzLmxlbmd0aE5vcm1hbGl6YXRpb25GYWN0b3IgKyB0aGlzLmxlbmd0aE5vcm1hbGl6YXRpb25GYWN0b3IgKiBkb2NMZW5ndGggLyB0aGlzLmF2ZXJhZ2VEb2NMZW5ndGgpO1xuICAgICAgcmV0dXJuIGN1cnJlbnRTY29yZSArIGlkZiAqIChudW1lcmF0b3IgLyBkZW5vbWluYXRvcik7XG4gICAgfSwgMCk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBzaW5nbGUgbmV3IGRvY3VtZW50IHRvIHRoZSBpbmRleC5cbiAgICogVXBkYXRlcyBhbGwgaW50ZXJuYWwgaW5kZXggc3RydWN0dXJlcyBpbmNyZW1lbnRhbGx5LlxuICAgKiBOb3RlOiBGb3IgYWRkaW5nIG1hbnkgZG9jdW1lbnRzLCBgYWRkRG9jdW1lbnRzUGFyYWxsZWxgIGlzIGdlbmVyYWxseSBtb3JlIGVmZmljaWVudC5cbiAgICpcbiAgICogQHBhcmFtIGRvYyAtIFRoZSBkb2N1bWVudCBvYmplY3QgKHdpdGggc3RyaW5nIGZpZWxkcykgdG8gYWRkLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGRvY3VtZW50IGlzIG51bGwgb3IgdW5kZWZpbmVkLlxuICAgKi9cbiAgYXN5bmMgYWRkRG9jdW1lbnQoZG9jKSB7XG4gICAgaWYgKCFkb2MpIHRocm93IG5ldyBFcnJvcihcIkRvY3VtZW50IGNhbm5vdCBiZSBudWxsXCIpO1xuICAgIGNvbnN0IGRvY0luZGV4ID0gdGhpcy5kb2N1bWVudExlbmd0aHMubGVuZ3RoO1xuICAgIHRoaXMuZG9jdW1lbnRzLnB1c2goZG9jKTtcbiAgICBjb25zdCBuZXdEb2NMZW5ndGhzID0gbmV3IFVpbnQzMkFycmF5KGRvY0luZGV4ICsgMSk7XG4gICAgbmV3RG9jTGVuZ3Rocy5zZXQodGhpcy5kb2N1bWVudExlbmd0aHMsIDApO1xuICAgIHRoaXMuZG9jdW1lbnRMZW5ndGhzID0gbmV3RG9jTGVuZ3RocztcbiAgICBsZXQgY3VycmVudERvY0xlbmd0aCA9IDA7XG4gICAgY29uc3QgZG9jVGVybUZyZXF1ZW5jaWVzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICBPYmplY3QuZW50cmllcyhkb2MpLmZvckVhY2goKFtmaWVsZCwgY29udGVudF0pID0+IHtcbiAgICAgIGlmICh0eXBlb2YgY29udGVudCAhPT0gXCJzdHJpbmdcIikgcmV0dXJuO1xuICAgICAgY29uc3QgZmllbGRCb29zdCA9IHRoaXMuZmllbGRCb29zdHNbZmllbGRdIHx8IDE7XG4gICAgICBjb25zdCB7IHRva2VucyB9ID0gdGhpcy50b2tlbml6ZXIudG9rZW5pemUoY29udGVudCk7XG4gICAgICBjdXJyZW50RG9jTGVuZ3RoICs9IHRva2Vucy5sZW5ndGggKiBmaWVsZEJvb3N0O1xuICAgICAgdG9rZW5zLmZvckVhY2goKHRlcm0pID0+IHtcbiAgICAgICAgbGV0IHRlcm1JbmRleFZhbDtcbiAgICAgICAgaWYgKCF0aGlzLnRlcm1Ub0luZGV4Lmhhcyh0ZXJtKSkge1xuICAgICAgICAgIHRlcm1JbmRleFZhbCA9IHRoaXMudGVybVRvSW5kZXguc2l6ZTtcbiAgICAgICAgICB0aGlzLnRlcm1Ub0luZGV4LnNldCh0ZXJtLCB0ZXJtSW5kZXhWYWwpO1xuICAgICAgICAgIGlmICh0aGlzLmRvY3VtZW50RnJlcXVlbmN5Lmxlbmd0aCA8PSB0ZXJtSW5kZXhWYWwpIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZERmID0gdGhpcy5kb2N1bWVudEZyZXF1ZW5jeTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1NpemUgPSBNYXRoLm1heCh0ZXJtSW5kZXhWYWwgKyAxLCBvbGREZi5sZW5ndGggKiAyIHx8IDEpO1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudEZyZXF1ZW5jeSA9IG5ldyBVaW50MzJBcnJheShuZXdTaXplKTtcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRGcmVxdWVuY3kuc2V0KG9sZERmLCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5kb2N1bWVudEZyZXF1ZW5jeVt0ZXJtSW5kZXhWYWxdID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXJtSW5kZXhWYWwgPSB0aGlzLnRlcm1Ub0luZGV4LmdldCh0ZXJtKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyZW50RnJlcSA9IGRvY1Rlcm1GcmVxdWVuY2llcy5nZXQodGVybUluZGV4VmFsKSB8fCAwO1xuICAgICAgICBkb2NUZXJtRnJlcXVlbmNpZXMuc2V0KHRlcm1JbmRleFZhbCwgY3VycmVudEZyZXEgKyBmaWVsZEJvb3N0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuZG9jdW1lbnRMZW5ndGhzW2RvY0luZGV4XSA9IGN1cnJlbnREb2NMZW5ndGg7XG4gICAgZG9jVGVybUZyZXF1ZW5jaWVzLmZvckVhY2goKGZyZXEsIHRlcm1JbmRleFZhbCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLnRlcm1GcmVxdWVuY2llcy5oYXModGVybUluZGV4VmFsKSkge1xuICAgICAgICB0aGlzLnRlcm1GcmVxdWVuY2llcy5zZXQodGVybUluZGV4VmFsLCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudGVybUZyZXF1ZW5jaWVzLmdldCh0ZXJtSW5kZXhWYWwpLnNldChkb2NJbmRleCwgZnJlcSk7XG4gICAgICBpZiAodGVybUluZGV4VmFsIDwgdGhpcy5kb2N1bWVudEZyZXF1ZW5jeS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5kb2N1bWVudEZyZXF1ZW5jeVt0ZXJtSW5kZXhWYWxdKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIGBFcnJvcjogdGVybUluZGV4VmFsICR7dGVybUluZGV4VmFsfSBpcyBvdXQgb2YgYm91bmRzIGZvciBkb2N1bWVudEZyZXF1ZW5jeSAobGVuZ3RoICR7dGhpcy5kb2N1bWVudEZyZXF1ZW5jeS5sZW5ndGh9KS4gVGhpcyBpbmRpY2F0ZXMgYW4gaXNzdWUgd2l0aCBhcnJheSByZXNpemluZyBvciB0ZXJtIGluZGV4aW5nLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlQXZlcmFnZUxlbmd0aCgpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBJbnZlcnNlIERvY3VtZW50IEZyZXF1ZW5jeSAoSURGKSBmb3IgYSBnaXZlbiB0ZXJtIGluZGV4LlxuICAgKiBVc2VzIHRoZSBCTTI1IElERiBmb3JtdWxhOiBsb2coMSArIChOIC0gbiArIDAuNSkgLyAobiArIDAuNSkpXG4gICAqIHdoZXJlIE4gaXMgdGhlIHRvdGFsIG51bWJlciBvZiBkb2N1bWVudHMgYW5kIG4gaXMgdGhlIG51bWJlciBvZiBkb2N1bWVudHNcbiAgICogY29udGFpbmluZyB0aGUgdGVybS4gVGhlICsxIHNtb290aHMgdGhlIGxvZ2FyaXRobS5cbiAgICpcbiAgICogQHBhcmFtIHRlcm1JbmRleCAtIFRoZSBpbnRlZ2VyIGluZGV4IG9mIHRoZSB0ZXJtLlxuICAgKiBAcmV0dXJucyBUaGUgSURGIHNjb3JlIGZvciB0aGUgdGVybS4gUmV0dXJucyAwIGlmIHRoZSB0ZXJtIGlzIG5vdCBmb3VuZCBvciBoYXMgMCBERi5cbiAgICovXG4gIGNhbGN1bGF0ZUlkZih0ZXJtSW5kZXgpIHtcbiAgICBpZiAodGVybUluZGV4IDwgMCB8fCB0ZXJtSW5kZXggPj0gdGhpcy5kb2N1bWVudEZyZXF1ZW5jeS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCBkb2NGcmVxID0gdGhpcy5kb2N1bWVudEZyZXF1ZW5jeVt0ZXJtSW5kZXhdO1xuICAgIGlmIChkb2NGcmVxIDw9IDAgfHwgZG9jRnJlcSA+IHRoaXMuZG9jdW1lbnRMZW5ndGhzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGNvbnN0IE4gPSB0aGlzLmRvY3VtZW50TGVuZ3Rocy5sZW5ndGg7XG4gICAgY29uc3QgbnVtZXJhdG9yID0gTiAtIGRvY0ZyZXEgKyAwLjU7XG4gICAgY29uc3QgZGVub21pbmF0b3IgPSBkb2NGcmVxICsgMC41O1xuICAgIHJldHVybiBNYXRoLmxvZygxICsgbnVtZXJhdG9yIC8gZGVub21pbmF0b3IpO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIHRlcm0gZnJlcXVlbmN5IChURikgZm9yIGEgc3BlY2lmaWMgdGVybSBpbiBhIHNwZWNpZmljIGRvY3VtZW50LlxuICAgKiBAcGFyYW0gdGVybUluZGV4IC0gVGhlIGludGVnZXIgaW5kZXggb2YgdGhlIHRlcm0uXG4gICAqIEBwYXJhbSBkb2NJbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgZG9jdW1lbnQuXG4gICAqIEByZXR1cm5zIFRoZSB0ZXJtIGZyZXF1ZW5jeSwgb3IgMCBpZiB0aGUgdGVybSBpcyBub3QgaW4gdGhlIGRvY3VtZW50IG9yIGluZGljZXMgYXJlIGludmFsaWQuXG4gICAqL1xuICBnZXRUZXJtRnJlcXVlbmN5KHRlcm1JbmRleCwgZG9jSW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy50ZXJtRnJlcXVlbmNpZXMuZ2V0KHRlcm1JbmRleCk/LmdldChkb2NJbmRleCkgfHwgMDtcbiAgfVxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBvcmlnaW5hbCBkb2N1bWVudCBvYmplY3Qgc3RvcmVkIGF0IGEgZ2l2ZW4gaW5kZXguXG4gICAqIEBwYXJhbSBpbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgZG9jdW1lbnQgdG8gcmV0cmlldmUuXG4gICAqIEByZXR1cm5zIFRoZSBkb2N1bWVudCBvYmplY3QuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgaW5kZXggaXMgb3V0IG9mIGJvdW5kcy5cbiAgICovXG4gIGdldERvY3VtZW50KGluZGV4KSB7XG4gICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmRvY3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRG9jdW1lbnQgaW5kZXggJHtpbmRleH0gb3V0IG9mIGJvdW5kcyAoMC0ke3RoaXMuZG9jdW1lbnRzLmxlbmd0aCAtIDF9KWApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudHNbaW5kZXhdO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIGluZGV4ZWQgZG9jdW1lbnRzIGFuZCByZXNldHMgdGhlIEJNMjUgaW5zdGFuY2UgdG8gaXRzIGluaXRpYWwgc3RhdGUuXG4gICAqL1xuICBjbGVhckRvY3VtZW50cygpIHtcbiAgICB0aGlzLmRvY3VtZW50cyA9IFtdO1xuICAgIHRoaXMuZG9jdW1lbnRMZW5ndGhzID0gbmV3IFVpbnQzMkFycmF5KDApO1xuICAgIHRoaXMudGVybVRvSW5kZXguY2xlYXIoKTtcbiAgICB0aGlzLmRvY3VtZW50RnJlcXVlbmN5ID0gbmV3IFVpbnQzMkFycmF5KDApO1xuICAgIHRoaXMuYXZlcmFnZURvY0xlbmd0aCA9IDA7XG4gICAgdGhpcy50ZXJtRnJlcXVlbmNpZXMuY2xlYXIoKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgdG90YWwgbnVtYmVyIG9mIGRvY3VtZW50cyBjdXJyZW50bHkgaW5kZXhlZC5cbiAgICogQHJldHVybnMgVGhlIGRvY3VtZW50IGNvdW50LlxuICAgKi9cbiAgZ2V0RG9jdW1lbnRDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudHMubGVuZ3RoO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIG11bHRpcGxlIGRvY3VtZW50cyBzZXF1ZW50aWFsbHkgYnkgY2FsbGluZyBgYWRkRG9jdW1lbnRgIGZvciBlYWNoLlxuICAgKiBUaGlzIG1ldGhvZCBwcm9jZXNzZXMgZG9jdW1lbnRzIHNlcXVlbnRpYWxseSBpbiB0aGUgbWFpbiB0aHJlYWQuXG4gICAqIEBwYXJhbSBkb2NzIC0gQW4gYXJyYXkgb2YgZG9jdW1lbnRzIHRvIGFkZC5cbiAgICovXG4gIGFzeW5jIGFkZERvY3VtZW50cyhkb2NzKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGRvY3MubWFwKChkb2MpID0+IHRoaXMuYWRkRG9jdW1lbnQoZG9jKSkpO1xuICB9XG59O1xuXG4vLyBzcmMvcnVudGltZS50c1xudmFyIGVudmlyb25tZW50U2V0dGluZ3MgPSB7fTtcbnZhciBTZW1hcGhvcmUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNvdW50KSB7XG4gICAgdGhpcy53YWl0aW5nID0gW107XG4gICAgdGhpcy5wZXJtaXRzID0gY291bnQ7XG4gIH1cbiAgYXN5bmMgYWNxdWlyZSgpIHtcbiAgICBpZiAodGhpcy5wZXJtaXRzID4gMCkge1xuICAgICAgdGhpcy5wZXJtaXRzIC09IDE7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy53YWl0aW5nLnB1c2gocmVzb2x2ZSk7XG4gICAgfSk7XG4gIH1cbiAgcmVsZWFzZSgpIHtcbiAgICB0aGlzLnBlcm1pdHMgKz0gMTtcbiAgICBjb25zdCBuZXh0UmVzb2x2ZSA9IHRoaXMud2FpdGluZy5zaGlmdCgpO1xuICAgIGlmIChuZXh0UmVzb2x2ZSAmJiB0aGlzLnBlcm1pdHMgPiAwKSB7XG4gICAgICB0aGlzLnBlcm1pdHMgLT0gMTtcbiAgICAgIG5leHRSZXNvbHZlKCk7XG4gICAgfVxuICB9XG59O1xudmFyIEFnZW50UnVudGltZSA9IGNsYXNzIHtcbiAgLy8gRGVmYXVsdCB2YWx1ZSwgY2FuIGJlIG92ZXJyaWRkZW5cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHRoaXMuI2NvbnZlcnNhdGlvbkxlbmd0aCA9IDMyO1xuICAgIHRoaXMuYWN0aW9ucyA9IFtdO1xuICAgIHRoaXMuZXZhbHVhdG9ycyA9IFtdO1xuICAgIHRoaXMucHJvdmlkZXJzID0gW107XG4gICAgdGhpcy5wbHVnaW5zID0gW107XG4gICAgdGhpcy5pc0luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5ldmVudHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIHRoaXMuc3RhdGVDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgdGhpcy5mZXRjaCA9IGZldGNoO1xuICAgIHRoaXMuc2VydmljZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIHRoaXMuc2VydmljZVR5cGVzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICB0aGlzLm1vZGVscyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgdGhpcy5yb3V0ZXMgPSBbXTtcbiAgICB0aGlzLnRhc2tXb3JrZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICB0aGlzLnNlbmRIYW5kbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgdGhpcy5ldmVudEhhbmRsZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAvLyBBIG1hcCBvZiBhbGwgcGx1Z2lucyBhdmFpbGFibGUgdG8gdGhlIHJ1bnRpbWUsIGtleWVkIGJ5IG5hbWUsIGZvciBkZXBlbmRlbmN5IHJlc29sdXRpb24uXG4gICAgdGhpcy5hbGxBdmFpbGFibGVQbHVnaW5zID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAvLyBUaGUgaW5pdGlhbCBsaXN0IG9mIHBsdWdpbnMgc3BlY2lmaWVkIGJ5IHRoZSBjaGFyYWN0ZXIgY29uZmlndXJhdGlvbi5cbiAgICB0aGlzLmNoYXJhY3RlclBsdWdpbnMgPSBbXTtcbiAgICB0aGlzLnNlcnZpY2VzSW5pdFF1ZXVlID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICB0aGlzLm1heFdvcmtpbmdNZW1vcnlFbnRyaWVzID0gNTA7XG4gICAgdGhpcy5hZ2VudElkID0gb3B0cy5jaGFyYWN0ZXI/LmlkID8/IG9wdHM/LmFnZW50SWQgPz8gc3RyaW5nVG9VdWlkKG9wdHMuY2hhcmFjdGVyPy5uYW1lID8/IHV1aWR2NCgpICsgb3B0cy5jaGFyYWN0ZXI/LnVzZXJuYW1lKTtcbiAgICB0aGlzLmNoYXJhY3RlciA9IG9wdHMuY2hhcmFjdGVyO1xuICAgIGNvbnN0IGxvZ0xldmVsID0gcHJvY2Vzcy5lbnYuTE9HX0xFVkVMIHx8IFwiaW5mb1wiO1xuICAgIHRoaXMubG9nZ2VyID0gY3JlYXRlTG9nZ2VyKHtcbiAgICAgIGFnZW50TmFtZTogdGhpcy5jaGFyYWN0ZXI/Lm5hbWUsXG4gICAgICBsb2dMZXZlbFxuICAgIH0pO1xuICAgIHRoaXMuI2NvbnZlcnNhdGlvbkxlbmd0aCA9IG9wdHMuY29udmVyc2F0aW9uTGVuZ3RoID8/IHRoaXMuI2NvbnZlcnNhdGlvbkxlbmd0aDtcbiAgICBpZiAob3B0cy5hZGFwdGVyKSB7XG4gICAgICB0aGlzLnJlZ2lzdGVyRGF0YWJhc2VBZGFwdGVyKG9wdHMuYWRhcHRlcik7XG4gICAgfVxuICAgIHRoaXMuZmV0Y2ggPSBvcHRzLmZldGNoID8/IHRoaXMuZmV0Y2g7XG4gICAgdGhpcy5zZXR0aW5ncyA9IG9wdHMuc2V0dGluZ3MgPz8gZW52aXJvbm1lbnRTZXR0aW5ncztcbiAgICB0aGlzLnBsdWdpbnMgPSBbXTtcbiAgICB0aGlzLmNoYXJhY3RlclBsdWdpbnMgPSBvcHRzPy5wbHVnaW5zID8/IFtdO1xuICAgIGlmIChvcHRzLmFsbEF2YWlsYWJsZVBsdWdpbnMpIHtcbiAgICAgIGZvciAoY29uc3QgcGx1Z2luIG9mIG9wdHMuYWxsQXZhaWxhYmxlUGx1Z2lucykge1xuICAgICAgICBpZiAocGx1Z2luPy5uYW1lKSB7XG4gICAgICAgICAgdGhpcy5hbGxBdmFpbGFibGVQbHVnaW5zLnNldChwbHVnaW4ubmFtZSwgcGx1Z2luKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgU3VjY2VzczogQWdlbnQgSUQ6ICR7dGhpcy5hZ2VudElkfWApO1xuICAgIHRoaXMuY3VycmVudFJ1bklkID0gdm9pZCAwO1xuICAgIGlmIChvcHRzLnNldHRpbmdzPy5NQVhfV09SS0lOR19NRU1PUllfRU5UUklFUykge1xuICAgICAgdGhpcy5tYXhXb3JraW5nTWVtb3J5RW50cmllcyA9IHBhcnNlSW50KG9wdHMuc2V0dGluZ3MuTUFYX1dPUktJTkdfTUVNT1JZX0VOVFJJRVMsIDEwKSB8fCA1MDtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk1BWF9XT1JLSU5HX01FTU9SWV9FTlRSSUVTKSB7XG4gICAgICB0aGlzLm1heFdvcmtpbmdNZW1vcnlFbnRyaWVzID0gcGFyc2VJbnQocHJvY2Vzcy5lbnYuTUFYX1dPUktJTkdfTUVNT1JZX0VOVFJJRVMsIDEwKSB8fCA1MDtcbiAgICB9XG4gIH1cbiAgI2NvbnZlcnNhdGlvbkxlbmd0aDtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBydW4gSUQgZm9yIHRyYWNraW5nIGEgc2VxdWVuY2Ugb2YgbW9kZWwgY2FsbHNcbiAgICovXG4gIGNyZWF0ZVJ1bklkKCkge1xuICAgIHJldHVybiB1dWlkdjQoKTtcbiAgfVxuICAvKipcbiAgICogU3RhcnQgYSBuZXcgcnVuIGZvciB0cmFja2luZyBwcm9tcHRzXG4gICAqL1xuICBzdGFydFJ1bigpIHtcbiAgICB0aGlzLmN1cnJlbnRSdW5JZCA9IHRoaXMuY3JlYXRlUnVuSWQoKTtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50UnVuSWQ7XG4gIH1cbiAgLyoqXG4gICAqIEVuZCB0aGUgY3VycmVudCBydW5cbiAgICovXG4gIGVuZFJ1bigpIHtcbiAgICB0aGlzLmN1cnJlbnRSdW5JZCA9IHZvaWQgMDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IHJ1biBJRCAoY3JlYXRlcyBvbmUgaWYgaXQgZG9lc24ndCBleGlzdClcbiAgICovXG4gIGdldEN1cnJlbnRSdW5JZCgpIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudFJ1bklkKSB7XG4gICAgICB0aGlzLmN1cnJlbnRSdW5JZCA9IHRoaXMuY3JlYXRlUnVuSWQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFJ1bklkO1xuICB9XG4gIGFzeW5jIHJlZ2lzdGVyUGx1Z2luKHBsdWdpbikge1xuICAgIGlmICghcGx1Z2luPy5uYW1lKSB7XG4gICAgICBjb25zdCBlcnJvck1zZyA9IFwiUGx1Z2luIG9yIHBsdWdpbiBuYW1lIGlzIHVuZGVmaW5lZFwiO1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYCoqKiByZWdpc3RlclBsdWdpbjogJHtlcnJvck1zZ31gKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgKioqIHJlZ2lzdGVyUGx1Z2luOiAke2Vycm9yTXNnfWApO1xuICAgIH1cbiAgICBjb25zdCBleGlzdGluZ1BsdWdpbiA9IHRoaXMucGx1Z2lucy5maW5kKChwKSA9PiBwLm5hbWUgPT09IHBsdWdpbi5uYW1lKTtcbiAgICBpZiAoZXhpc3RpbmdQbHVnaW4pIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oXG4gICAgICAgIGAke3RoaXMuY2hhcmFjdGVyLm5hbWV9KCR7dGhpcy5hZ2VudElkfSkgLSBQbHVnaW4gJHtwbHVnaW4ubmFtZX0gaXMgYWxyZWFkeSByZWdpc3RlcmVkLiBTa2lwcGluZyByZS1yZWdpc3RyYXRpb24uYFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgIGBTdWNjZXNzOiBQbHVnaW4gJHtwbHVnaW4ubmFtZX0gYWRkZWQgdG8gYWN0aXZlIHBsdWdpbnMgZm9yICR7dGhpcy5jaGFyYWN0ZXIubmFtZX0oJHt0aGlzLmFnZW50SWR9KS5gXG4gICAgKTtcbiAgICBpZiAocGx1Z2luLmluaXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHBsdWdpbi5pbml0KHBsdWdpbi5jb25maWcgfHwge30sIHRoaXMpO1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgU3VjY2VzczogUGx1Z2luICR7cGx1Z2luLm5hbWV9IGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseWApO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuICAgICAgICBpZiAoZXJyb3JNZXNzYWdlLmluY2x1ZGVzKFwiQVBJIGtleVwiKSB8fCBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoXCJlbnZpcm9ubWVudCB2YXJpYWJsZXNcIikgfHwgZXJyb3JNZXNzYWdlLmluY2x1ZGVzKFwiSW52YWxpZCBwbHVnaW4gY29uZmlndXJhdGlvblwiKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgUGx1Z2luICR7cGx1Z2luLm5hbWV9IHJlcXVpcmVzIGNvbmZpZ3VyYXRpb24uICR7ZXJyb3JNZXNzYWdlfWApO1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiUGxlYXNlIGNoZWNrIHlvdXIgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFuZCBlbnN1cmUgYWxsIHJlcXVpcmVkIEFQSSBrZXlzIGFyZSBzZXQuXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIllvdSBjYW4gc2V0IHRoZXNlIGluIHlvdXIgLmVudiBmaWxlLlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGx1Z2luLmFkYXB0ZXIpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBSZWdpc3RlcmluZyBkYXRhYmFzZSBhZGFwdGVyIGZvciBwbHVnaW4gJHtwbHVnaW4ubmFtZX1gKTtcbiAgICAgIHRoaXMucmVnaXN0ZXJEYXRhYmFzZUFkYXB0ZXIocGx1Z2luLmFkYXB0ZXIpO1xuICAgIH1cbiAgICBpZiAocGx1Z2luLmFjdGlvbnMpIHtcbiAgICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIHBsdWdpbi5hY3Rpb25zKSB7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJBY3Rpb24oYWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBsdWdpbi5ldmFsdWF0b3JzKSB7XG4gICAgICBmb3IgKGNvbnN0IGV2YWx1YXRvciBvZiBwbHVnaW4uZXZhbHVhdG9ycykge1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZhbHVhdG9yKGV2YWx1YXRvcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwbHVnaW4ucHJvdmlkZXJzKSB7XG4gICAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIHBsdWdpbi5wcm92aWRlcnMpIHtcbiAgICAgICAgdGhpcy5yZWdpc3RlclByb3ZpZGVyKHByb3ZpZGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBsdWdpbi5tb2RlbHMpIHtcbiAgICAgIGZvciAoY29uc3QgW21vZGVsVHlwZSwgaGFuZGxlcl0gb2YgT2JqZWN0LmVudHJpZXMocGx1Z2luLm1vZGVscykpIHtcbiAgICAgICAgdGhpcy5yZWdpc3Rlck1vZGVsKFxuICAgICAgICAgIG1vZGVsVHlwZSxcbiAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgIHBsdWdpbi5uYW1lLFxuICAgICAgICAgIHBsdWdpbj8ucHJpb3JpdHlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBsdWdpbi5yb3V0ZXMpIHtcbiAgICAgIGZvciAoY29uc3Qgcm91dGUgb2YgcGx1Z2luLnJvdXRlcykge1xuICAgICAgICB0aGlzLnJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBsdWdpbi5ldmVudHMpIHtcbiAgICAgIGZvciAoY29uc3QgW2V2ZW50TmFtZSwgZXZlbnRIYW5kbGVyc10gb2YgT2JqZWN0LmVudHJpZXMocGx1Z2luLmV2ZW50cykpIHtcbiAgICAgICAgZm9yIChjb25zdCBldmVudEhhbmRsZXIgb2YgZXZlbnRIYW5kbGVycykge1xuICAgICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChldmVudE5hbWUsIGV2ZW50SGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBsdWdpbi5zZXJ2aWNlcykge1xuICAgICAgZm9yIChjb25zdCBzZXJ2aWNlIG9mIHBsdWdpbi5zZXJ2aWNlcykge1xuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5yZWdpc3RlclNlcnZpY2Uoc2VydmljZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXJ2aWNlc0luaXRRdWV1ZS5hZGQoc2VydmljZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2V0QWxsU2VydmljZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VydmljZXM7XG4gIH1cbiAgYXN5bmMgc3RvcCgpIHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgcnVudGltZTo6c3RvcCAtIGNoYXJhY3RlciAke3RoaXMuY2hhcmFjdGVyLm5hbWV9YCk7XG4gICAgZm9yIChjb25zdCBbc2VydmljZU5hbWUsIHNlcnZpY2VzXSBvZiB0aGlzLnNlcnZpY2VzKSB7XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgcnVudGltZTo6c3RvcCAtIHJlcXVlc3Rpbmcgc2VydmljZSBzdG9wIGZvciAke3NlcnZpY2VOYW1lfWApO1xuICAgICAgZm9yIChjb25zdCBzZXJ2aWNlIG9mIHNlcnZpY2VzKSB7XG4gICAgICAgIGF3YWl0IHNlcnZpY2Uuc3RvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBhc3luYyBpbml0aWFsaXplKCkge1xuICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oXCJBZ2VudCBhbHJlYWR5IGluaXRpYWxpemVkXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwbHVnaW5SZWdpc3RyYXRpb25Qcm9taXNlcyA9IFtdO1xuICAgIGNvbnN0IHBsdWdpbnNUb0xvYWQgPSB0aGlzLmNoYXJhY3RlclBsdWdpbnM7XG4gICAgZm9yIChjb25zdCBwbHVnaW4gb2YgcGx1Z2luc1RvTG9hZCkge1xuICAgICAgaWYgKHBsdWdpbikge1xuICAgICAgICBwbHVnaW5SZWdpc3RyYXRpb25Qcm9taXNlcy5wdXNoKHRoaXMucmVnaXN0ZXJQbHVnaW4ocGx1Z2luKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGF3YWl0IFByb21pc2UuYWxsKHBsdWdpblJlZ2lzdHJhdGlvblByb21pc2VzKTtcbiAgICBpZiAoIXRoaXMuYWRhcHRlcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgIFwiRGF0YWJhc2UgYWRhcHRlciBub3QgaW5pdGlhbGl6ZWQuIE1ha2Ugc3VyZSBAZWxpemFvcy9wbHVnaW4tc3FsIGlzIGluY2x1ZGVkIGluIHlvdXIgcGx1Z2lucy5cIlxuICAgICAgKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJEYXRhYmFzZSBhZGFwdGVyIG5vdCBpbml0aWFsaXplZC4gVGhlIFNRTCBwbHVnaW4gKEBlbGl6YW9zL3BsdWdpbi1zcWwpIGlzIHJlcXVpcmVkIGZvciBhZ2VudCBpbml0aWFsaXphdGlvbi4gUGxlYXNlIGVuc3VyZSBpdCBpcyBpbmNsdWRlZCBpbiB5b3VyIGNoYXJhY3RlciBjb25maWd1cmF0aW9uLlwiXG4gICAgICApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5hZGFwdGVyLmluaXQoKTtcbiAgICAgIHRoaXMubG9nZ2VyLmluZm8oXCJSdW5uaW5nIHBsdWdpbiBtaWdyYXRpb25zLi4uXCIpO1xuICAgICAgYXdhaXQgdGhpcy5ydW5QbHVnaW5NaWdyYXRpb25zKCk7XG4gICAgICB0aGlzLmxvZ2dlci5pbmZvKFwiUGx1Z2luIG1pZ3JhdGlvbnMgY29tcGxldGVkLlwiKTtcbiAgICAgIGNvbnN0IGV4aXN0aW5nQWdlbnQgPSBhd2FpdCB0aGlzLmVuc3VyZUFnZW50RXhpc3RzKHRoaXMuY2hhcmFjdGVyKTtcbiAgICAgIGlmICghZXhpc3RpbmdBZ2VudCkge1xuICAgICAgICBjb25zdCBlcnJvck1zZyA9IGBBZ2VudCAke3RoaXMuY2hhcmFjdGVyLm5hbWV9IGRvZXMgbm90IGV4aXN0IGluIGRhdGFiYXNlIGFmdGVyIGVuc3VyZUFnZW50RXhpc3RzIGNhbGxgO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2cpO1xuICAgICAgfVxuICAgICAgbGV0IGFnZW50RW50aXR5ID0gYXdhaXQgdGhpcy5nZXRFbnRpdHlCeUlkKHRoaXMuYWdlbnRJZCk7XG4gICAgICBpZiAoIWFnZW50RW50aXR5KSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWQgPSBhd2FpdCB0aGlzLmNyZWF0ZUVudGl0eSh7XG4gICAgICAgICAgaWQ6IHRoaXMuYWdlbnRJZCxcbiAgICAgICAgICBuYW1lczogW3RoaXMuY2hhcmFjdGVyLm5hbWVdLFxuICAgICAgICAgIG1ldGFkYXRhOiB7fSxcbiAgICAgICAgICBhZ2VudElkOiBleGlzdGluZ0FnZW50LmlkXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWNyZWF0ZWQpIHtcbiAgICAgICAgICBjb25zdCBlcnJvck1zZyA9IGBGYWlsZWQgdG8gY3JlYXRlIGVudGl0eSBmb3IgYWdlbnQgJHt0aGlzLmFnZW50SWR9YDtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2cpO1xuICAgICAgICB9XG4gICAgICAgIGFnZW50RW50aXR5ID0gYXdhaXQgdGhpcy5nZXRFbnRpdHlCeUlkKHRoaXMuYWdlbnRJZCk7XG4gICAgICAgIGlmICghYWdlbnRFbnRpdHkpIHRocm93IG5ldyBFcnJvcihgQWdlbnQgZW50aXR5IG5vdCBmb3VuZCBmb3IgJHt0aGlzLmFnZW50SWR9YCk7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBTdWNjZXNzOiBBZ2VudCBlbnRpdHkgY3JlYXRlZCBzdWNjZXNzZnVsbHkgZm9yICR7dGhpcy5jaGFyYWN0ZXIubmFtZX1gKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgZXJyb3JNc2cgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcik7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBhZ2VudCBlbnRpdHk6ICR7ZXJyb3JNc2d9YCk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJvb20gPSBhd2FpdCB0aGlzLmdldFJvb20odGhpcy5hZ2VudElkKTtcbiAgICAgIGlmICghcm9vbSkge1xuICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZVJvb20oe1xuICAgICAgICAgIGlkOiB0aGlzLmFnZW50SWQsXG4gICAgICAgICAgbmFtZTogdGhpcy5jaGFyYWN0ZXIubmFtZSxcbiAgICAgICAgICBzb3VyY2U6IFwiZWxpemFvc1wiLFxuICAgICAgICAgIHR5cGU6IFwiU0VMRlwiIC8qIFNFTEYgKi8sXG4gICAgICAgICAgY2hhbm5lbElkOiB0aGlzLmFnZW50SWQsXG4gICAgICAgICAgc2VydmVySWQ6IHRoaXMuYWdlbnRJZCxcbiAgICAgICAgICB3b3JsZElkOiB0aGlzLmFnZW50SWRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSBhd2FpdCB0aGlzLmFkYXB0ZXIuZ2V0UGFydGljaXBhbnRzRm9yUm9vbSh0aGlzLmFnZW50SWQpO1xuICAgICAgaWYgKCFwYXJ0aWNpcGFudHMuaW5jbHVkZXModGhpcy5hZ2VudElkKSkge1xuICAgICAgICBjb25zdCBhZGRlZCA9IGF3YWl0IHRoaXMuYWRkUGFydGljaXBhbnQodGhpcy5hZ2VudElkLCB0aGlzLmFnZW50SWQpO1xuICAgICAgICBpZiAoIWFkZGVkKSB7XG4gICAgICAgICAgY29uc3QgZXJyb3JNc2cgPSBgRmFpbGVkIHRvIGFkZCBhZ2VudCAke3RoaXMuYWdlbnRJZH0gYXMgcGFydGljaXBhbnQgdG8gaXRzIG93biByb29tYDtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2cpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBBZ2VudCAke3RoaXMuY2hhcmFjdGVyLm5hbWV9IGxpbmtlZCB0byBpdHMgb3duIHJvb20gc3VjY2Vzc2Z1bGx5YCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yTXNnID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYEZhaWxlZCB0byBhZGQgYWdlbnQgYXMgcGFydGljaXBhbnQ6ICR7ZXJyb3JNc2d9YCk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgY29uc3QgZW1iZWRkaW5nTW9kZWwgPSB0aGlzLmdldE1vZGVsKE1vZGVsVHlwZTIuVEVYVF9FTUJFRERJTkcpO1xuICAgIGlmICghZW1iZWRkaW5nTW9kZWwpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oXG4gICAgICAgIGBbQWdlbnRSdW50aW1lXVske3RoaXMuY2hhcmFjdGVyLm5hbWV9XSBObyBURVhUX0VNQkVERElORyBtb2RlbCByZWdpc3RlcmVkLiBTa2lwcGluZyBlbWJlZGRpbmcgZGltZW5zaW9uIHNldHVwLmBcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHRoaXMuZW5zdXJlRW1iZWRkaW5nRGltZW5zaW9uKCk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qgc2VydmljZSBvZiB0aGlzLnNlcnZpY2VzSW5pdFF1ZXVlKSB7XG4gICAgICBhd2FpdCB0aGlzLnJlZ2lzdGVyU2VydmljZShzZXJ2aWNlKTtcbiAgICB9XG4gICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuICBhc3luYyBydW5QbHVnaW5NaWdyYXRpb25zKCkge1xuICAgIGNvbnN0IGRyaXp6bGUgPSB0aGlzLmFkYXB0ZXI/LmRiO1xuICAgIGlmICghZHJpenpsZSkge1xuICAgICAgdGhpcy5sb2dnZXIud2FybihcIkRyaXp6bGUgaW5zdGFuY2Ugbm90IGZvdW5kIG9uIGFkYXB0ZXIsIHNraXBwaW5nIHBsdWdpbiBtaWdyYXRpb25zLlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGx1Z2luc1dpdGhTY2hlbWFzID0gdGhpcy5wbHVnaW5zLmZpbHRlcigocCkgPT4gcC5zY2hlbWEpO1xuICAgIHRoaXMubG9nZ2VyLmluZm8oYEZvdW5kICR7cGx1Z2luc1dpdGhTY2hlbWFzLmxlbmd0aH0gcGx1Z2lucyB3aXRoIHNjaGVtYXMgdG8gbWlncmF0ZS5gKTtcbiAgICBmb3IgKGNvbnN0IHAgb2YgcGx1Z2luc1dpdGhTY2hlbWFzKSB7XG4gICAgICBpZiAocC5zY2hlbWEpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgUnVubmluZyBtaWdyYXRpb25zIGZvciBwbHVnaW46ICR7cC5uYW1lfWApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICh0aGlzLmFkYXB0ZXIgJiYgXCJydW5NaWdyYXRpb25zXCIgaW4gdGhpcy5hZGFwdGVyKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFkYXB0ZXIucnVuTWlncmF0aW9ucyhwLnNjaGVtYSwgcC5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oYFN1Y2Nlc3NmdWxseSBtaWdyYXRlZCBwbHVnaW46ICR7cC5uYW1lfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihgRmFpbGVkIHRvIG1pZ3JhdGUgcGx1Z2luICR7cC5uYW1lfTpgLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYXN5bmMgZ2V0Q29ubmVjdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuYWRhcHRlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0YWJhc2UgYWRhcHRlciBub3QgcmVnaXN0ZXJlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5nZXRDb25uZWN0aW9uKCk7XG4gIH1cbiAgc2V0U2V0dGluZyhrZXksIHZhbHVlLCBzZWNyZXQgPSBmYWxzZSkge1xuICAgIGlmIChzZWNyZXQpIHtcbiAgICAgIGlmICghdGhpcy5jaGFyYWN0ZXIuc2VjcmV0cykge1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5zZWNyZXRzID0ge307XG4gICAgICB9XG4gICAgICB0aGlzLmNoYXJhY3Rlci5zZWNyZXRzW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLmNoYXJhY3Rlci5zZXR0aW5ncykge1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5zZXR0aW5ncyA9IHt9O1xuICAgICAgfVxuICAgICAgdGhpcy5jaGFyYWN0ZXIuc2V0dGluZ3Nba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICBnZXRTZXR0aW5nKGtleSkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jaGFyYWN0ZXIuc2VjcmV0cz8uW2tleV0gfHwgdGhpcy5jaGFyYWN0ZXIuc2V0dGluZ3M/LltrZXldIHx8IHRoaXMuY2hhcmFjdGVyLnNldHRpbmdzPy5zZWNyZXRzPy5ba2V5XSB8fCB0aGlzLnNldHRpbmdzW2tleV07XG4gICAgY29uc3QgZGVjcnlwdGVkVmFsdWUgPSBkZWNyeXB0U3RyaW5nVmFsdWUodmFsdWUsIGdldFNhbHQoKSk7XG4gICAgaWYgKGRlY3J5cHRlZFZhbHVlID09PSBcInRydWVcIikgcmV0dXJuIHRydWU7XG4gICAgaWYgKGRlY3J5cHRlZFZhbHVlID09PSBcImZhbHNlXCIpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gZGVjcnlwdGVkVmFsdWUgfHwgbnVsbDtcbiAgfVxuICBnZXRDb252ZXJzYXRpb25MZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2NvbnZlcnNhdGlvbkxlbmd0aDtcbiAgfVxuICByZWdpc3RlckRhdGFiYXNlQWRhcHRlcihhZGFwdGVyKSB7XG4gICAgaWYgKHRoaXMuYWRhcHRlcikge1xuICAgICAgdGhpcy5sb2dnZXIud2FybihcbiAgICAgICAgXCJEYXRhYmFzZSBhZGFwdGVyIGFscmVhZHkgcmVnaXN0ZXJlZC4gQWRkaXRpb25hbCBhZGFwdGVycyB3aWxsIGJlIGlnbm9yZWQuIFRoaXMgbWF5IGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvci5cIlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGFwdGVyID0gYWRhcHRlcjtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFwiU3VjY2VzczogRGF0YWJhc2UgYWRhcHRlciByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseS5cIik7XG4gICAgfVxuICB9XG4gIHJlZ2lzdGVyUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICB0aGlzLnByb3ZpZGVycy5wdXNoKHByb3ZpZGVyKTtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgU3VjY2VzczogUHJvdmlkZXIgJHtwcm92aWRlci5uYW1lfSByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseS5gKTtcbiAgfVxuICByZWdpc3RlckFjdGlvbihhY3Rpb24pIHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgIGAke3RoaXMuY2hhcmFjdGVyLm5hbWV9KCR7dGhpcy5hZ2VudElkfSkgLSBSZWdpc3RlcmluZyBhY3Rpb246ICR7YWN0aW9uLm5hbWV9YFxuICAgICk7XG4gICAgaWYgKHRoaXMuYWN0aW9ucy5maW5kKChhKSA9PiBhLm5hbWUgPT09IGFjdGlvbi5uYW1lKSkge1xuICAgICAgdGhpcy5sb2dnZXIud2FybihcbiAgICAgICAgYCR7dGhpcy5jaGFyYWN0ZXIubmFtZX0oJHt0aGlzLmFnZW50SWR9KSAtIEFjdGlvbiAke2FjdGlvbi5uYW1lfSBhbHJlYWR5IGV4aXN0cy4gU2tpcHBpbmcgcmVnaXN0cmF0aW9uLmBcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgYCR7dGhpcy5jaGFyYWN0ZXIubmFtZX0oJHt0aGlzLmFnZW50SWR9KSAtIEFjdGlvbiAke2FjdGlvbi5uYW1lfSByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseS5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZWdpc3RlckV2YWx1YXRvcihldmFsdWF0b3IpIHtcbiAgICB0aGlzLmV2YWx1YXRvcnMucHVzaChldmFsdWF0b3IpO1xuICB9XG4gIC8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIGltbXV0YWJsZSBhY3Rpb24gcGxhbiB1cGRhdGVzXG4gIHVwZGF0ZUFjdGlvblBsYW4ocGxhbiwgdXBkYXRlcykge1xuICAgIHJldHVybiB7IC4uLnBsYW4sIC4uLnVwZGF0ZXMgfTtcbiAgfVxuICB1cGRhdGVBY3Rpb25TdGVwKHBsYW4sIGluZGV4LCBzdGVwVXBkYXRlcykge1xuICAgIGlmICghcGxhbi5zdGVwcyB8fCBpbmRleCA8IDAgfHwgaW5kZXggPj0gcGxhbi5zdGVwcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oXG4gICAgICAgIGBJbnZhbGlkIHN0ZXAgaW5kZXg6ICR7aW5kZXh9IGZvciBwbGFuIHdpdGggJHtwbGFuLnN0ZXBzPy5sZW5ndGggfHwgMH0gc3RlcHNgXG4gICAgICApO1xuICAgICAgcmV0dXJuIHBsYW47XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAuLi5wbGFuLFxuICAgICAgc3RlcHM6IHBsYW4uc3RlcHMubWFwKFxuICAgICAgICAoc3RlcCwgaSkgPT4gaSA9PT0gaW5kZXggPyB7IC4uLnN0ZXAsIC4uLnN0ZXBVcGRhdGVzIH0gOiBzdGVwXG4gICAgICApXG4gICAgfTtcbiAgfVxuICBhc3luYyBwcm9jZXNzQWN0aW9ucyhtZXNzYWdlLCByZXNwb25zZXMsIHN0YXRlLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGFsbEFjdGlvbnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHJlc3BvbnNlIG9mIHJlc3BvbnNlcykge1xuICAgICAgaWYgKHJlc3BvbnNlLmNvbnRlbnQ/LmFjdGlvbnMgJiYgcmVzcG9uc2UuY29udGVudC5hY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWxsQWN0aW9ucy5wdXNoKC4uLnJlc3BvbnNlLmNvbnRlbnQuYWN0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGhhc011bHRpcGxlQWN0aW9ucyA9IGFsbEFjdGlvbnMubGVuZ3RoID4gMTtcbiAgICBjb25zdCBydW5JZCA9IHRoaXMuY3JlYXRlUnVuSWQoKTtcbiAgICBsZXQgYWN0aW9uUGxhbiA9IG51bGw7XG4gICAgaWYgKGhhc011bHRpcGxlQWN0aW9ucykge1xuICAgICAgY29uc3QgdGhvdWdodCA9IHJlc3BvbnNlc1swXT8uY29udGVudD8udGhvdWdodCB8fCBgRXhlY3V0aW5nICR7YWxsQWN0aW9ucy5sZW5ndGh9IGFjdGlvbnM6ICR7YWxsQWN0aW9ucy5qb2luKFwiLCBcIil9YDtcbiAgICAgIGFjdGlvblBsYW4gPSB7XG4gICAgICAgIHJ1bklkLFxuICAgICAgICB0b3RhbFN0ZXBzOiBhbGxBY3Rpb25zLmxlbmd0aCxcbiAgICAgICAgY3VycmVudFN0ZXA6IDAsXG4gICAgICAgIHN0ZXBzOiBhbGxBY3Rpb25zLm1hcCgoYWN0aW9uKSA9PiAoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBzdGF0dXM6IFwicGVuZGluZ1wiXG4gICAgICAgIH0pKSxcbiAgICAgICAgdGhvdWdodCxcbiAgICAgICAgc3RhcnRUaW1lOiBEYXRlLm5vdygpXG4gICAgICB9O1xuICAgIH1cbiAgICBsZXQgYWN0aW9uSW5kZXggPSAwO1xuICAgIGZvciAoY29uc3QgcmVzcG9uc2Ugb2YgcmVzcG9uc2VzKSB7XG4gICAgICBsZXQgbm9ybWFsaXplQWN0aW9uID0gZnVuY3Rpb24oYWN0aW9uU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb25TdHJpbmcudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9fL2csIFwiXCIpO1xuICAgICAgfTtcbiAgICAgIGlmICghcmVzcG9uc2UuY29udGVudD8uYWN0aW9ucyB8fCByZXNwb25zZS5jb250ZW50LmFjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oXCJObyBhY3Rpb24gZm91bmQgaW4gdGhlIHJlc3BvbnNlIGNvbnRlbnQuXCIpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFjdGlvbnMgPSByZXNwb25zZS5jb250ZW50LmFjdGlvbnM7XG4gICAgICBjb25zdCBhY3Rpb25SZXN1bHRzID0gW107XG4gICAgICBsZXQgYWNjdW11bGF0ZWRTdGF0ZSA9IHN0YXRlO1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYEZvdW5kIGFjdGlvbnM6ICR7dGhpcy5hY3Rpb25zLm1hcCgoYSkgPT4gbm9ybWFsaXplQWN0aW9uKGEubmFtZSkpfWApO1xuICAgICAgZm9yIChjb25zdCByZXNwb25zZUFjdGlvbiBvZiBhY3Rpb25zKSB7XG4gICAgICAgIGlmIChhY3Rpb25QbGFuKSB7XG4gICAgICAgICAgYWN0aW9uUGxhbiA9IHRoaXMudXBkYXRlQWN0aW9uUGxhbihhY3Rpb25QbGFuLCB7IGN1cnJlbnRTdGVwOiBhY3Rpb25JbmRleCArIDEgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYWNjdW11bGF0ZWRTdGF0ZSA9IGF3YWl0IHRoaXMuY29tcG9zZVN0YXRlKG1lc3NhZ2UsIFtcbiAgICAgICAgICBcIlJFQ0VOVF9NRVNTQUdFU1wiLFxuICAgICAgICAgIFwiQUNUSU9OX1NUQVRFXCJcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgaW5jbHVkZSB0aGUgYWN0aW9uIHBsYW5cbiAgICAgICAgXSk7XG4gICAgICAgIGlmIChhY3Rpb25QbGFuICYmIGFjY3VtdWxhdGVkU3RhdGUuZGF0YSkge1xuICAgICAgICAgIGFjY3VtdWxhdGVkU3RhdGUuZGF0YS5hY3Rpb25QbGFuID0gYWN0aW9uUGxhbjtcbiAgICAgICAgICBhY2N1bXVsYXRlZFN0YXRlLmRhdGEuYWN0aW9uUmVzdWx0cyA9IGFjdGlvblJlc3VsdHM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYFN1Y2Nlc3M6IENhbGxpbmcgYWN0aW9uOiAke3Jlc3BvbnNlQWN0aW9ufWApO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkUmVzcG9uc2VBY3Rpb24gPSBub3JtYWxpemVBY3Rpb24ocmVzcG9uc2VBY3Rpb24pO1xuICAgICAgICBsZXQgYWN0aW9uID0gdGhpcy5hY3Rpb25zLmZpbmQoXG4gICAgICAgICAgKGEpID0+IG5vcm1hbGl6ZUFjdGlvbihhLm5hbWUpID09PSBub3JtYWxpemVkUmVzcG9uc2VBY3Rpb25cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgICBhY3Rpb24gPSB0aGlzLmFjdGlvbnMuZmluZChcbiAgICAgICAgICAgIChhKSA9PiBub3JtYWxpemVBY3Rpb24oYS5uYW1lKS5pbmNsdWRlcyhub3JtYWxpemVkUmVzcG9uc2VBY3Rpb24pIHx8IG5vcm1hbGl6ZWRSZXNwb25zZUFjdGlvbi5pbmNsdWRlcyhub3JtYWxpemVBY3Rpb24oYS5uYW1lKSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb24pIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgU3VjY2VzczogRm91bmQgYWN0aW9uOiAke2FjdGlvbj8ubmFtZX1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcIkF0dGVtcHRpbmcgdG8gZmluZCBhY3Rpb24gaW4gc2ltaWxlcy5cIik7XG4gICAgICAgICAgZm9yIChjb25zdCBfYWN0aW9uIG9mIHRoaXMuYWN0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgZXhhY3RTaW1pbGVNYXRjaCA9IF9hY3Rpb24uc2ltaWxlcz8uZmluZChcbiAgICAgICAgICAgICAgKHNpbWlsZSkgPT4gbm9ybWFsaXplQWN0aW9uKHNpbWlsZSkgPT09IG5vcm1hbGl6ZWRSZXNwb25zZUFjdGlvblxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChleGFjdFNpbWlsZU1hdGNoKSB7XG4gICAgICAgICAgICAgIGFjdGlvbiA9IF9hY3Rpb247XG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBTdWNjZXNzOiBBY3Rpb24gZm91bmQgaW4gc2ltaWxlcyAoZXhhY3QgbWF0Y2gpOiAke2FjdGlvbi5uYW1lfWApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZ1enp5U2ltaWxlTWF0Y2ggPSBfYWN0aW9uLnNpbWlsZXM/LmZpbmQoXG4gICAgICAgICAgICAgIChzaW1pbGUpID0+IG5vcm1hbGl6ZUFjdGlvbihzaW1pbGUpLmluY2x1ZGVzKG5vcm1hbGl6ZWRSZXNwb25zZUFjdGlvbikgfHwgbm9ybWFsaXplZFJlc3BvbnNlQWN0aW9uLmluY2x1ZGVzKG5vcm1hbGl6ZUFjdGlvbihzaW1pbGUpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChmdXp6eVNpbWlsZU1hdGNoKSB7XG4gICAgICAgICAgICAgIGFjdGlvbiA9IF9hY3Rpb247XG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBTdWNjZXNzOiBBY3Rpb24gZm91bmQgaW4gc2ltaWxlcyAoZnV6enkgbWF0Y2gpOiAke2FjdGlvbi5uYW1lfWApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgICBjb25zdCBlcnJvck1zZyA9IGBObyBhY3Rpb24gZm91bmQgZm9yOiAke3Jlc3BvbnNlQWN0aW9ufWA7XG4gICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoZXJyb3JNc2cpO1xuICAgICAgICAgIGlmIChhY3Rpb25QbGFuICYmIGFjdGlvblBsYW4uc3RlcHNbYWN0aW9uSW5kZXhdKSB7XG4gICAgICAgICAgICBhY3Rpb25QbGFuID0gdGhpcy51cGRhdGVBY3Rpb25TdGVwKGFjdGlvblBsYW4sIGFjdGlvbkluZGV4LCB7XG4gICAgICAgICAgICAgIHN0YXR1czogXCJmYWlsZWRcIixcbiAgICAgICAgICAgICAgZXJyb3I6IGVycm9yTXNnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgYWN0aW9uTWVtb3J5ID0ge1xuICAgICAgICAgICAgaWQ6IHV1aWR2NCgpLFxuICAgICAgICAgICAgZW50aXR5SWQ6IG1lc3NhZ2UuZW50aXR5SWQsXG4gICAgICAgICAgICByb29tSWQ6IG1lc3NhZ2Uucm9vbUlkLFxuICAgICAgICAgICAgd29ybGRJZDogbWVzc2FnZS53b3JsZElkLFxuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICB0aG91Z2h0OiBlcnJvck1zZyxcbiAgICAgICAgICAgICAgc291cmNlOiBcImF1dG9cIixcbiAgICAgICAgICAgICAgdHlwZTogXCJhY3Rpb25fcmVzdWx0XCIsXG4gICAgICAgICAgICAgIGFjdGlvbk5hbWU6IHJlc3BvbnNlQWN0aW9uLFxuICAgICAgICAgICAgICBhY3Rpb25TdGF0dXM6IFwiZmFpbGVkXCIsXG4gICAgICAgICAgICAgIHJ1bklkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZU1lbW9yeShhY3Rpb25NZW1vcnksIFwibWVzc2FnZXNcIik7XG4gICAgICAgICAgYWN0aW9uSW5kZXgrKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFjdGlvbi5oYW5kbGVyKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYEFjdGlvbiAke2FjdGlvbi5uYW1lfSBoYXMgbm8gaGFuZGxlci5gKTtcbiAgICAgICAgICBpZiAoYWN0aW9uUGxhbiAmJiBhY3Rpb25QbGFuLnN0ZXBzW2FjdGlvbkluZGV4XSkge1xuICAgICAgICAgICAgYWN0aW9uUGxhbiA9IHRoaXMudXBkYXRlQWN0aW9uU3RlcChhY3Rpb25QbGFuLCBhY3Rpb25JbmRleCwge1xuICAgICAgICAgICAgICBzdGF0dXM6IFwiZmFpbGVkXCIsXG4gICAgICAgICAgICAgIGVycm9yOiBcIk5vIGhhbmRsZXJcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFjdGlvbkluZGV4Kys7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgRXhlY3V0aW5nIGhhbmRsZXIgZm9yIGFjdGlvbjogJHthY3Rpb24ubmFtZX1gKTtcbiAgICAgICAgICBjb25zdCBhY3Rpb25JZCA9IHV1aWR2NCgpO1xuICAgICAgICAgIHRoaXMuY3VycmVudEFjdGlvbkNvbnRleHQgPSB7XG4gICAgICAgICAgICBhY3Rpb25OYW1lOiBhY3Rpb24ubmFtZSxcbiAgICAgICAgICAgIGFjdGlvbklkLFxuICAgICAgICAgICAgcHJvbXB0czogW11cbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbnN0IGFjdGlvbkNvbnRleHQgPSB7XG4gICAgICAgICAgICBwcmV2aW91c1Jlc3VsdHM6IGFjdGlvblJlc3VsdHMsXG4gICAgICAgICAgICBnZXRQcmV2aW91c1Jlc3VsdDogKGFjdGlvbk5hbWUpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvblJlc3VsdHMuZmluZCgocikgPT4gci5kYXRhPy5hY3Rpb25OYW1lID09PSBhY3Rpb25OYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbnN0IG9wdGlvbnMyID0ge1xuICAgICAgICAgICAgY29udGV4dDogYWN0aW9uQ29udGV4dFxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKGFjdGlvblBsYW4pIHtcbiAgICAgICAgICAgIG9wdGlvbnMyLmFjdGlvblBsYW4gPSB7XG4gICAgICAgICAgICAgIHRvdGFsU3RlcHM6IGFjdGlvblBsYW4udG90YWxTdGVwcyxcbiAgICAgICAgICAgICAgY3VycmVudFN0ZXA6IGFjdGlvblBsYW4uY3VycmVudFN0ZXAsXG4gICAgICAgICAgICAgIHN0ZXBzOiBhY3Rpb25QbGFuLnN0ZXBzLFxuICAgICAgICAgICAgICB0aG91Z2h0OiBhY3Rpb25QbGFuLnRob3VnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFjdGlvbi5oYW5kbGVyKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICBhY2N1bXVsYXRlZFN0YXRlLFxuICAgICAgICAgICAgb3B0aW9uczIsXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgIHJlc3BvbnNlc1xuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgaXNMZWdhY3lSZXR1cm4gPSByZXN1bHQgPT09IHZvaWQgMCB8fCByZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCA9PT0gXCJib29sZWFuXCI7XG4gICAgICAgICAgbGV0IGFjdGlvblJlc3VsdCA9IG51bGw7XG4gICAgICAgICAgaWYgKCFpc0xlZ2FjeVJldHVybikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwib2JqZWN0XCIgJiYgcmVzdWx0ICE9PSBudWxsICYmIChcInZhbHVlc1wiIGluIHJlc3VsdCB8fCBcImRhdGFcIiBpbiByZXN1bHQgfHwgXCJ0ZXh0XCIgaW4gcmVzdWx0KSkge1xuICAgICAgICAgICAgICBhY3Rpb25SZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHRvIHRydWUgaWYgbm90IHNwZWNpZmllZFxuICAgICAgICAgICAgICAgIC4uLnJlc3VsdFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYWN0aW9uUmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgLy8gRGVmYXVsdCBzdWNjZXNzIGZvciBsZWdhY3kgcmVzdWx0c1xuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgIGFjdGlvbk5hbWU6IGFjdGlvbi5uYW1lLFxuICAgICAgICAgICAgICAgICAgbGVnYWN5UmVzdWx0OiByZXN1bHRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rpb25SZXN1bHRzLnB1c2goYWN0aW9uUmVzdWx0KTtcbiAgICAgICAgICAgIGlmIChhY3Rpb25SZXN1bHQudmFsdWVzKSB7XG4gICAgICAgICAgICAgIGFjY3VtdWxhdGVkU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgLi4uYWNjdW11bGF0ZWRTdGF0ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHsgLi4uYWNjdW11bGF0ZWRTdGF0ZS52YWx1ZXMsIC4uLmFjdGlvblJlc3VsdC52YWx1ZXMgfSxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAuLi5hY2N1bXVsYXRlZFN0YXRlLmRhdGEgfHwge30sXG4gICAgICAgICAgICAgICAgICBhY3Rpb25SZXN1bHRzOiBbLi4uYWNjdW11bGF0ZWRTdGF0ZS5kYXRhPy5hY3Rpb25SZXN1bHRzIHx8IFtdLCBhY3Rpb25SZXN1bHRdLFxuICAgICAgICAgICAgICAgICAgYWN0aW9uUGxhblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhY3Rpb25SZXN1bHQgJiYgYWNjdW11bGF0ZWRTdGF0ZS5kYXRhKSB7XG4gICAgICAgICAgICAgIGlmICghYWNjdW11bGF0ZWRTdGF0ZS5kYXRhLndvcmtpbmdNZW1vcnkpIGFjY3VtdWxhdGVkU3RhdGUuZGF0YS53b3JraW5nTWVtb3J5ID0ge307XG4gICAgICAgICAgICAgIGNvbnN0IG1lbW9yeUtleSA9IGBhY3Rpb25fJHtyZXNwb25zZUFjdGlvbn1fJHt1dWlkdjQoKX1gO1xuICAgICAgICAgICAgICBjb25zdCBtZW1vcnlFbnRyeSA9IHtcbiAgICAgICAgICAgICAgICBhY3Rpb25OYW1lOiBhY3Rpb24ubmFtZSxcbiAgICAgICAgICAgICAgICByZXN1bHQ6IGFjdGlvblJlc3VsdCxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgYWNjdW11bGF0ZWRTdGF0ZS5kYXRhLndvcmtpbmdNZW1vcnlbbWVtb3J5S2V5XSA9IG1lbW9yeUVudHJ5O1xuICAgICAgICAgICAgICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoYWNjdW11bGF0ZWRTdGF0ZS5kYXRhLndvcmtpbmdNZW1vcnkpO1xuICAgICAgICAgICAgICBpZiAoZW50cmllcy5sZW5ndGggPiB0aGlzLm1heFdvcmtpbmdNZW1vcnlFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc29ydGVkID0gZW50cmllcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBlbnRyeUEgPSBhWzFdO1xuICAgICAgICAgICAgICAgICAgY29uc3QgZW50cnlCID0gYlsxXTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcEEgPSBlbnRyeUE/LnRpbWVzdGFtcCA/PyAwO1xuICAgICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wQiA9IGVudHJ5Qj8udGltZXN0YW1wID8/IDA7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wQiAtIHRpbWVzdGFtcEE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYWNjdW11bGF0ZWRTdGF0ZS5kYXRhLndvcmtpbmdNZW1vcnkgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgICAgICAgICAgICBzb3J0ZWQuc2xpY2UoMCwgdGhpcy5tYXhXb3JraW5nTWVtb3J5RW50cmllcylcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWN0aW9uUGxhbiAmJiBhY3Rpb25QbGFuLnN0ZXBzW2FjdGlvbkluZGV4XSkge1xuICAgICAgICAgICAgICBhY3Rpb25QbGFuID0gdGhpcy51cGRhdGVBY3Rpb25TdGVwKGFjdGlvblBsYW4sIGFjdGlvbkluZGV4LCB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiBcImNvbXBsZXRlZFwiLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogYWN0aW9uUmVzdWx0XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBhY3Rpb25NZW1vcnkgPSB7XG4gICAgICAgICAgICBpZDogYWN0aW9uSWQsXG4gICAgICAgICAgICBlbnRpdHlJZDogdGhpcy5hZ2VudElkLFxuICAgICAgICAgICAgcm9vbUlkOiBtZXNzYWdlLnJvb21JZCxcbiAgICAgICAgICAgIHdvcmxkSWQ6IG1lc3NhZ2Uud29ybGRJZCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgdGV4dDogYWN0aW9uUmVzdWx0Py50ZXh0IHx8IGBFeGVjdXRlZCBhY3Rpb246ICR7YWN0aW9uLm5hbWV9YCxcbiAgICAgICAgICAgICAgc291cmNlOiBcImFjdGlvblwiLFxuICAgICAgICAgICAgICB0eXBlOiBcImFjdGlvbl9yZXN1bHRcIixcbiAgICAgICAgICAgICAgYWN0aW9uTmFtZTogYWN0aW9uLm5hbWUsXG4gICAgICAgICAgICAgIGFjdGlvblN0YXR1czogYWN0aW9uUmVzdWx0Py5zdWNjZXNzID8gXCJjb21wbGV0ZWRcIiA6IFwiZmFpbGVkXCIsXG4gICAgICAgICAgICAgIGFjdGlvblJlc3VsdDogaXNMZWdhY3lSZXR1cm4gPyB7IGxlZ2FjeTogcmVzdWx0IH0gOiBhY3Rpb25SZXN1bHQsXG4gICAgICAgICAgICAgIHJ1bklkLFxuICAgICAgICAgICAgICAuLi5hY3Rpb25QbGFuICYmIHtcbiAgICAgICAgICAgICAgICBwbGFuU3RlcDogYCR7YWN0aW9uUGxhbi5jdXJyZW50U3RlcH0vJHthY3Rpb25QbGFuLnRvdGFsU3RlcHN9YCxcbiAgICAgICAgICAgICAgICBwbGFuVGhvdWdodDogYWN0aW9uUGxhbi50aG91Z2h0XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICB0eXBlOiBcImFjdGlvbl9yZXN1bHRcIixcbiAgICAgICAgICAgICAgYWN0aW9uTmFtZTogYWN0aW9uLm5hbWUsXG4gICAgICAgICAgICAgIHJ1bklkLFxuICAgICAgICAgICAgICBhY3Rpb25JZCxcbiAgICAgICAgICAgICAgLi4uYWN0aW9uUGxhbiAmJiB7XG4gICAgICAgICAgICAgICAgdG90YWxTdGVwczogYWN0aW9uUGxhbi50b3RhbFN0ZXBzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGVwOiBhY3Rpb25QbGFuLmN1cnJlbnRTdGVwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlTWVtb3J5KGFjdGlvbk1lbW9yeSwgXCJtZXNzYWdlc1wiKTtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgQWN0aW9uICR7YWN0aW9uLm5hbWV9IGNvbXBsZXRlZGAsIHtcbiAgICAgICAgICAgIGlzTGVnYWN5UmV0dXJuLFxuICAgICAgICAgICAgcmVzdWx0OiBpc0xlZ2FjeVJldHVybiA/IHJlc3VsdCA6IHZvaWQgMCxcbiAgICAgICAgICAgIGhhc1ZhbHVlczogYWN0aW9uUmVzdWx0ID8gISFhY3Rpb25SZXN1bHQudmFsdWVzIDogZmFsc2UsXG4gICAgICAgICAgICBoYXNEYXRhOiBhY3Rpb25SZXN1bHQgPyAhIWFjdGlvblJlc3VsdC5kYXRhIDogZmFsc2UsXG4gICAgICAgICAgICBoYXNUZXh0OiBhY3Rpb25SZXN1bHQgPyAhIWFjdGlvblJlc3VsdC50ZXh0IDogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhd2FpdCB0aGlzLmFkYXB0ZXIubG9nKHtcbiAgICAgICAgICAgIGVudGl0eUlkOiBtZXNzYWdlLmVudGl0eUlkLFxuICAgICAgICAgICAgcm9vbUlkOiBtZXNzYWdlLnJvb21JZCxcbiAgICAgICAgICAgIHR5cGU6IFwiYWN0aW9uXCIsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLm5hbWUsXG4gICAgICAgICAgICAgIGFjdGlvbklkLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLmNvbnRlbnQudGV4dCxcbiAgICAgICAgICAgICAgbWVzc2FnZUlkOiBtZXNzYWdlLmlkLFxuICAgICAgICAgICAgICBzdGF0ZTogYWNjdW11bGF0ZWRTdGF0ZSxcbiAgICAgICAgICAgICAgcmVzcG9uc2VzLFxuICAgICAgICAgICAgICByZXN1bHQ6IGlzTGVnYWN5UmV0dXJuID8geyBsZWdhY3k6IHJlc3VsdCB9IDogYWN0aW9uUmVzdWx0LFxuICAgICAgICAgICAgICBpc0xlZ2FjeVJldHVybixcbiAgICAgICAgICAgICAgcHJvbXB0czogdGhpcy5jdXJyZW50QWN0aW9uQ29udGV4dD8ucHJvbXB0cyB8fCBbXSxcbiAgICAgICAgICAgICAgcHJvbXB0Q291bnQ6IHRoaXMuY3VycmVudEFjdGlvbkNvbnRleHQ/LnByb21wdHMubGVuZ3RoIHx8IDAsXG4gICAgICAgICAgICAgIHJ1bklkLFxuICAgICAgICAgICAgICAuLi5hY3Rpb25QbGFuICYmIHtcbiAgICAgICAgICAgICAgICBwbGFuU3RlcDogYCR7YWN0aW9uUGxhbi5jdXJyZW50U3RlcH0vJHthY3Rpb25QbGFuLnRvdGFsU3RlcHN9YCxcbiAgICAgICAgICAgICAgICBwbGFuVGhvdWdodDogYWN0aW9uUGxhbi50aG91Z2h0XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmN1cnJlbnRBY3Rpb25Db250ZXh0ID0gdm9pZCAwO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKTtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICAgICAgaWYgKGFjdGlvblBsYW4gJiYgYWN0aW9uUGxhbi5zdGVwc1thY3Rpb25JbmRleF0pIHtcbiAgICAgICAgICAgIGFjdGlvblBsYW4gPSB0aGlzLnVwZGF0ZUFjdGlvblN0ZXAoYWN0aW9uUGxhbiwgYWN0aW9uSW5kZXgsIHtcbiAgICAgICAgICAgICAgc3RhdHVzOiBcImZhaWxlZFwiLFxuICAgICAgICAgICAgICBlcnJvcjogZXJyb3JNZXNzYWdlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5jdXJyZW50QWN0aW9uQ29udGV4dCA9IHZvaWQgMDtcbiAgICAgICAgICBjb25zdCBlcnJvclJlc3VsdCA9IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgLy8gUmVxdWlyZWQgZmllbGRcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgYWN0aW9uTmFtZTogYWN0aW9uLm5hbWUsXG4gICAgICAgICAgICAgIGVycm9yOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgIGVycm9yT2JqZWN0OiBlcnJvclxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgYWN0aW9uUmVzdWx0cy5wdXNoKGVycm9yUmVzdWx0KTtcbiAgICAgICAgICBjb25zdCBhY3Rpb25NZW1vcnkgPSB7XG4gICAgICAgICAgICBpZDogdXVpZHY0KCksXG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIHRob3VnaHQ6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgc291cmNlOiBcImF1dG9cIixcbiAgICAgICAgICAgICAgdHlwZTogXCJhY3Rpb25fcmVzdWx0XCIsXG4gICAgICAgICAgICAgIGFjdGlvbk5hbWU6IGFjdGlvbi5uYW1lLFxuICAgICAgICAgICAgICBhY3Rpb25TdGF0dXM6IFwiZmFpbGVkXCIsXG4gICAgICAgICAgICAgIGVycm9yOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgIHJ1bklkLFxuICAgICAgICAgICAgICAuLi5hY3Rpb25QbGFuICYmIHtcbiAgICAgICAgICAgICAgICBwbGFuU3RlcDogYCR7YWN0aW9uUGxhbi5jdXJyZW50U3RlcH0vJHthY3Rpb25QbGFuLnRvdGFsU3RlcHN9YCxcbiAgICAgICAgICAgICAgICBwbGFuVGhvdWdodDogYWN0aW9uUGxhbi50aG91Z2h0XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnRpdHlJZDogdGhpcy5hZ2VudElkLFxuICAgICAgICAgICAgcm9vbUlkOiBtZXNzYWdlLnJvb21JZCxcbiAgICAgICAgICAgIHdvcmxkSWQ6IG1lc3NhZ2Uud29ybGRJZCxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYWN0aW9uX3Jlc3VsdFwiLFxuICAgICAgICAgICAgICBhY3Rpb25OYW1lOiBhY3Rpb24ubmFtZSxcbiAgICAgICAgICAgICAgcnVuSWQsXG4gICAgICAgICAgICAgIGVycm9yOiB0cnVlLFxuICAgICAgICAgICAgICAuLi5hY3Rpb25QbGFuICYmIHtcbiAgICAgICAgICAgICAgICB0b3RhbFN0ZXBzOiBhY3Rpb25QbGFuLnRvdGFsU3RlcHMsXG4gICAgICAgICAgICAgICAgY3VycmVudFN0ZXA6IGFjdGlvblBsYW4uY3VycmVudFN0ZXBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVNZW1vcnkoYWN0aW9uTWVtb3J5LCBcIm1lc3NhZ2VzXCIpO1xuICAgICAgICAgIGlmIChlcnJvcj8uY3JpdGljYWwgfHwgZXJyb3I/LmNvZGUgPT09IFwiQ1JJVElDQUxfRVJST1JcIikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFjdGlvbkluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAobWVzc2FnZS5pZCkge1xuICAgICAgICB0aGlzLnN0YXRlQ2FjaGUuc2V0KGAke21lc3NhZ2UuaWR9X2FjdGlvbl9yZXN1bHRzYCwge1xuICAgICAgICAgIHZhbHVlczogeyBhY3Rpb25SZXN1bHRzIH0sXG4gICAgICAgICAgZGF0YTogeyBhY3Rpb25SZXN1bHRzLCBhY3Rpb25QbGFuIH0sXG4gICAgICAgICAgdGV4dDogSlNPTi5zdHJpbmdpZnkoYWN0aW9uUmVzdWx0cylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGFzeW5jIGV2YWx1YXRlKG1lc3NhZ2UsIHN0YXRlLCBkaWRSZXNwb25kLCBjYWxsYmFjaywgcmVzcG9uc2VzKSB7XG4gICAgY29uc3QgZXZhbHVhdG9yUHJvbWlzZXMgPSB0aGlzLmV2YWx1YXRvcnMubWFwKGFzeW5jIChldmFsdWF0b3IpID0+IHtcbiAgICAgIGlmICghZXZhbHVhdG9yLmhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoIWRpZFJlc3BvbmQgJiYgIWV2YWx1YXRvci5hbHdheXNSdW4pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBldmFsdWF0b3IudmFsaWRhdGUodGhpcywgbWVzc2FnZSwgc3RhdGUpO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gZXZhbHVhdG9yO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG4gICAgY29uc3QgZXZhbHVhdG9ycyA9IChhd2FpdCBQcm9taXNlLmFsbChldmFsdWF0b3JQcm9taXNlcykpLmZpbHRlcihCb29sZWFuKTtcbiAgICBpZiAoZXZhbHVhdG9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgc3RhdGUgPSBhd2FpdCB0aGlzLmNvbXBvc2VTdGF0ZShtZXNzYWdlLCBbXCJSRUNFTlRfTUVTU0FHRVNcIiwgXCJFVkFMVUFUT1JTXCJdKTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIGV2YWx1YXRvcnMubWFwKGFzeW5jIChldmFsdWF0b3IpID0+IHtcbiAgICAgICAgaWYgKGV2YWx1YXRvci5oYW5kbGVyKSB7XG4gICAgICAgICAgYXdhaXQgZXZhbHVhdG9yLmhhbmRsZXIodGhpcywgbWVzc2FnZSwgc3RhdGUsIHt9LCBjYWxsYmFjaywgcmVzcG9uc2VzKTtcbiAgICAgICAgICB0aGlzLmFkYXB0ZXIubG9nKHtcbiAgICAgICAgICAgIGVudGl0eUlkOiBtZXNzYWdlLmVudGl0eUlkLFxuICAgICAgICAgICAgcm9vbUlkOiBtZXNzYWdlLnJvb21JZCxcbiAgICAgICAgICAgIHR5cGU6IFwiZXZhbHVhdG9yXCIsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgIGV2YWx1YXRvcjogZXZhbHVhdG9yLm5hbWUsXG4gICAgICAgICAgICAgIG1lc3NhZ2VJZDogbWVzc2FnZS5pZCxcbiAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZS5jb250ZW50LnRleHQsXG4gICAgICAgICAgICAgIHN0YXRlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgICByZXR1cm4gZXZhbHVhdG9ycztcbiAgfVxuICAvLyBoaWdobHkgU1FMIG9wdGltaXplZCBxdWVyaWVzXG4gIGFzeW5jIGVuc3VyZUNvbm5lY3Rpb25zKGVudGl0aWVzLCByb29tcywgc291cmNlLCB3b3JsZCkge1xuICAgIGlmICghZW50aXRpZXMpIHtcbiAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFwiZW5zdXJlQ29ubmVjdGlvbnMgLSBubyBlbnRpdGllc1wiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFyb29tcyB8fCByb29tcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFwiZW5zdXJlQ29ubmVjdGlvbnMgLSBubyByb29tc1wiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5lbnN1cmVXb3JsZEV4aXN0cyh7IC4uLndvcmxkLCBhZ2VudElkOiB0aGlzLmFnZW50SWQgfSk7XG4gICAgY29uc3QgZmlyc3RSb29tID0gcm9vbXNbMF07XG4gICAgY29uc3QgY2h1bmtBcnJheSA9IChhcnIsIHNpemUpID0+IGFyci5yZWR1Y2UoKGNodW5rcywgaXRlbSwgaSkgPT4ge1xuICAgICAgaWYgKGkgJSBzaXplID09PSAwKSBjaHVua3MucHVzaChbXSk7XG4gICAgICBjaHVua3NbY2h1bmtzLmxlbmd0aCAtIDFdLnB1c2goaXRlbSk7XG4gICAgICByZXR1cm4gY2h1bmtzO1xuICAgIH0sIFtdKTtcbiAgICBjb25zdCByb29tSWRzID0gcm9vbXMubWFwKChyMikgPT4gcjIuaWQpO1xuICAgIGNvbnN0IHJvb21FeGlzdHNDaGVjayA9IGF3YWl0IHRoaXMuZ2V0Um9vbXNCeUlkcyhyb29tSWRzKTtcbiAgICBjb25zdCByb29tc0lkRXhpc3RzID0gcm9vbUV4aXN0c0NoZWNrLm1hcCgocjIpID0+IHIyLmlkKTtcbiAgICBjb25zdCByb29tc1RvQ3JlYXRlID0gcm9vbUlkcy5maWx0ZXIoKGlkKSA9PiAhcm9vbXNJZEV4aXN0cy5pbmNsdWRlcyhpZCkpO1xuICAgIGNvbnN0IHJmID0ge1xuICAgICAgd29ybGRJZDogd29ybGQuaWQsXG4gICAgICBzZXJ2ZXJJZDogd29ybGQuc2VydmVySWQsXG4gICAgICBzb3VyY2UsXG4gICAgICBhZ2VudElkOiB0aGlzLmFnZW50SWRcbiAgICB9O1xuICAgIGlmIChyb29tc1RvQ3JlYXRlLmxlbmd0aCkge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgIFwicnVudGltZS9lbnN1cmVDb25uZWN0aW9ucyAtIGNyZWF0ZVwiLFxuICAgICAgICByb29tc1RvQ3JlYXRlLmxlbmd0aC50b0xvY2FsZVN0cmluZygpLFxuICAgICAgICBcInJvb21zXCJcbiAgICAgICk7XG4gICAgICBjb25zdCByb29tT2Jqc1RvQ3JlYXRlID0gcm9vbXMuZmlsdGVyKChyMikgPT4gcm9vbXNUb0NyZWF0ZS5pbmNsdWRlcyhyMi5pZCkpLm1hcCgocjIpID0+ICh7IC4uLnIyLCAuLi5yZiB9KSk7XG4gICAgICBhd2FpdCB0aGlzLmNyZWF0ZVJvb21zKHJvb21PYmpzVG9DcmVhdGUpO1xuICAgIH1cbiAgICBjb25zdCBlbnRpdHlJZHMgPSBlbnRpdGllcy5tYXAoKGUpID0+IGUuaWQpO1xuICAgIGNvbnN0IGVudGl0eUV4aXN0c0NoZWNrID0gYXdhaXQgdGhpcy5hZGFwdGVyLmdldEVudGl0aWVzQnlJZHMoZW50aXR5SWRzKTtcbiAgICBjb25zdCBlbnRpdGllc1RvVXBkYXRlID0gZW50aXR5RXhpc3RzQ2hlY2subWFwKChlKSA9PiBlLmlkKTtcbiAgICBjb25zdCBlbnRpdGllc1RvQ3JlYXRlID0gZW50aXRpZXMuZmlsdGVyKChlKSA9PiAhZW50aXRpZXNUb1VwZGF0ZS5pbmNsdWRlcyhlLmlkKSk7XG4gICAgY29uc3QgciA9IHtcbiAgICAgIHJvb21JZDogZmlyc3RSb29tLmlkLFxuICAgICAgY2hhbm5lbElkOiBmaXJzdFJvb20uY2hhbm5lbElkLFxuICAgICAgdHlwZTogZmlyc3RSb29tLnR5cGVcbiAgICB9O1xuICAgIGNvbnN0IHdmID0ge1xuICAgICAgd29ybGRJZDogd29ybGQuaWQsXG4gICAgICBzZXJ2ZXJJZDogd29ybGQuc2VydmVySWRcbiAgICB9O1xuICAgIGlmIChlbnRpdGllc1RvQ3JlYXRlLmxlbmd0aCkge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgIFwicnVudGltZS9lbnN1cmVDb25uZWN0aW9ucyAtIGNyZWF0aW5nXCIsXG4gICAgICAgIGVudGl0aWVzVG9DcmVhdGUubGVuZ3RoLnRvTG9jYWxlU3RyaW5nKCksXG4gICAgICAgIFwiZW50aXRpZXMuLi5cIlxuICAgICAgKTtcbiAgICAgIGNvbnN0IGVmID0ge1xuICAgICAgICAuLi5yLFxuICAgICAgICAuLi53ZixcbiAgICAgICAgc291cmNlLFxuICAgICAgICBhZ2VudElkOiB0aGlzLmFnZW50SWRcbiAgICAgIH07XG4gICAgICBjb25zdCBlbnRpdGllc1RvQ3JlYXRlV0ZpZWxkcyA9IGVudGl0aWVzVG9DcmVhdGUubWFwKChlKSA9PiAoeyAuLi5lLCAuLi5lZiB9KSk7XG4gICAgICBjb25zdCBiYXRjaGVzID0gY2h1bmtBcnJheShlbnRpdGllc1RvQ3JlYXRlV0ZpZWxkcywgNWUzKTtcbiAgICAgIGZvciAoY29uc3QgYmF0Y2ggb2YgYmF0Y2hlcykge1xuICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZUVudGl0aWVzKGJhdGNoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgYXdhaXQgdGhpcy5lbnN1cmVQYXJ0aWNpcGFudEluUm9vbSh0aGlzLmFnZW50SWQsIGZpcnN0Um9vbS5pZCk7XG4gICAgY29uc3QgZW50aXR5SWRzSW5GaXJzdFJvb20gPSBhd2FpdCB0aGlzLmdldFBhcnRpY2lwYW50c0ZvclJvb20oZmlyc3RSb29tLmlkKTtcbiAgICBjb25zdCBlbnRpdHlJZHNJbkZpcnN0Um9vbUZpbHRlcmVkID0gZW50aXR5SWRzSW5GaXJzdFJvb20uZmlsdGVyKEJvb2xlYW4pO1xuICAgIGNvbnN0IG1pc3NpbmdJZHNJblJvb20gPSBlbnRpdHlJZHMuZmlsdGVyKChpZCkgPT4gIWVudGl0eUlkc0luRmlyc3RSb29tRmlsdGVyZWQuaW5jbHVkZXMoaWQpKTtcbiAgICBpZiAobWlzc2luZ0lkc0luUm9vbS5sZW5ndGgpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgICBcInJ1bnRpbWUvZW5zdXJlQ29ubmVjdGlvbnMgLSBNaXNzaW5nXCIsXG4gICAgICAgIG1pc3NpbmdJZHNJblJvb20ubGVuZ3RoLnRvTG9jYWxlU3RyaW5nKCksXG4gICAgICAgIFwiY29ubmVjdGlvbnMgaW5cIixcbiAgICAgICAgZmlyc3RSb29tLmlkXG4gICAgICApO1xuICAgICAgYXdhaXQgdGhpcy5hZGRQYXJ0aWNpcGFudHNSb29tKG1pc3NpbmdJZHNJblJvb20sIGZpcnN0Um9vbS5pZCk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnN1Y2Nlc3MoYFN1Y2Nlc3M6IFN1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgd29ybGRgKTtcbiAgfVxuICBhc3luYyBlbnN1cmVDb25uZWN0aW9uKHtcbiAgICBlbnRpdHlJZCxcbiAgICByb29tSWQsXG4gICAgd29ybGRJZCxcbiAgICB3b3JsZE5hbWUsXG4gICAgdXNlck5hbWUsXG4gICAgbmFtZSxcbiAgICBzb3VyY2UsXG4gICAgdHlwZSxcbiAgICBjaGFubmVsSWQsXG4gICAgc2VydmVySWQsXG4gICAgdXNlcklkLFxuICAgIG1ldGFkYXRhXG4gIH0pIHtcbiAgICBpZiAoIXdvcmxkSWQgJiYgc2VydmVySWQpIHtcbiAgICAgIHdvcmxkSWQgPSBjcmVhdGVVbmlxdWVVdWlkKHRoaXMuYWdlbnRJZCArIHNlcnZlcklkLCBzZXJ2ZXJJZCk7XG4gICAgfVxuICAgIGNvbnN0IG5hbWVzMyA9IFtuYW1lLCB1c2VyTmFtZV0uZmlsdGVyKEJvb2xlYW4pO1xuICAgIGNvbnN0IGVudGl0eU1ldGFkYXRhID0ge1xuICAgICAgW3NvdXJjZV06IHtcbiAgICAgICAgaWQ6IHVzZXJJZCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdXNlck5hbWVcbiAgICAgIH1cbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBlbnRpdHkgPSBhd2FpdCB0aGlzLmdldEVudGl0eUJ5SWQoZW50aXR5SWQpO1xuICAgICAgaWYgKCFlbnRpdHkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgdGhpcy5jcmVhdGVFbnRpdHkoe1xuICAgICAgICAgICAgaWQ6IGVudGl0eUlkLFxuICAgICAgICAgICAgbmFtZXM6IG5hbWVzMyxcbiAgICAgICAgICAgIG1ldGFkYXRhOiBlbnRpdHlNZXRhZGF0YSxcbiAgICAgICAgICAgIGFnZW50SWQ6IHRoaXMuYWdlbnRJZFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgICAgICAgYENyZWF0ZWQgbmV3IGVudGl0eSAke2VudGl0eUlkfSBmb3IgdXNlciAke25hbWUgfHwgdXNlck5hbWUgfHwgXCJ1bmtub3duXCJ9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIGVudGl0eSAke2VudGl0eUlkfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoXCJkdXBsaWNhdGUga2V5XCIpIHx8IGVycm9yLmNvZGUgPT09IFwiMjM1MDVcIikge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgICAgICAgIGBFbnRpdHkgJHtlbnRpdHlJZH0gZXhpc3RzIGluIGRhdGFiYXNlIGJ1dCBub3QgZm9yIHRoaXMgYWdlbnQuIFRoaXMgaXMgbm9ybWFsIGluIG11bHRpLWFnZW50IHNldHVwcy5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYWRhcHRlci51cGRhdGVFbnRpdHkoe1xuICAgICAgICAgIGlkOiBlbnRpdHlJZCxcbiAgICAgICAgICBuYW1lczogWy4uLi8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFsuLi5lbnRpdHkubmFtZXMgfHwgW10sIC4uLm5hbWVzM10pXS5maWx0ZXIoQm9vbGVhbiksXG4gICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgIC4uLmVudGl0eS5tZXRhZGF0YSxcbiAgICAgICAgICAgIFtzb3VyY2VdOiB7XG4gICAgICAgICAgICAgIC4uLmVudGl0eS5tZXRhZGF0YT8uW3NvdXJjZV0sXG4gICAgICAgICAgICAgIGlkOiB1c2VySWQsXG4gICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgIHVzZXJOYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhZ2VudElkOiB0aGlzLmFnZW50SWRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLmVuc3VyZVdvcmxkRXhpc3RzKHtcbiAgICAgICAgaWQ6IHdvcmxkSWQsXG4gICAgICAgIG5hbWU6IHdvcmxkTmFtZSB8fCBzZXJ2ZXJJZCA/IGBXb3JsZCBmb3Igc2VydmVyICR7c2VydmVySWR9YCA6IGBXb3JsZCBmb3Igcm9vbSAke3Jvb21JZH1gLFxuICAgICAgICBhZ2VudElkOiB0aGlzLmFnZW50SWQsXG4gICAgICAgIHNlcnZlcklkOiBzZXJ2ZXJJZCB8fCBcImRlZmF1bHRcIixcbiAgICAgICAgbWV0YWRhdGFcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgdGhpcy5lbnN1cmVSb29tRXhpc3RzKHtcbiAgICAgICAgaWQ6IHJvb21JZCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgc291cmNlLFxuICAgICAgICB0eXBlLFxuICAgICAgICBjaGFubmVsSWQsXG4gICAgICAgIHNlcnZlcklkLFxuICAgICAgICB3b3JsZElkXG4gICAgICB9KTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlUGFydGljaXBhbnRJblJvb20oZW50aXR5SWQsIHJvb21JZCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoXCJub3QgZm91bmRcIikpIHtcbiAgICAgICAgICBjb25zdCBhZGRlZCA9IGF3YWl0IHRoaXMuYWRkUGFydGljaXBhbnQoZW50aXR5SWQsIHJvb21JZCk7XG4gICAgICAgICAgaWYgKCFhZGRlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gYWRkIHBhcnRpY2lwYW50ICR7ZW50aXR5SWR9IHRvIHJvb20gJHtyb29tSWR9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBBZGRlZCBwYXJ0aWNpcGFudCAke2VudGl0eUlkfSB0byByb29tICR7cm9vbUlkfSBkaXJlY3RseWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLmVuc3VyZVBhcnRpY2lwYW50SW5Sb29tKHRoaXMuYWdlbnRJZCwgcm9vbUlkKTtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBTdWNjZXNzOiBTdWNjZXNzZnVsbHkgY29ubmVjdGVkIGVudGl0eSAke2VudGl0eUlkfSBpbiByb29tICR7cm9vbUlkfWApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBlbnN1cmUgY29ubmVjdGlvbjogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcil9YFxuICAgICAgKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuICBhc3luYyBlbnN1cmVQYXJ0aWNpcGFudEluUm9vbShlbnRpdHlJZCwgcm9vbUlkKSB7XG4gICAgY29uc3QgZW50aXR5ID0gYXdhaXQgdGhpcy5nZXRFbnRpdHlCeUlkKGVudGl0eUlkKTtcbiAgICBpZiAoIWVudGl0eSAmJiBlbnRpdHlJZCAhPT0gdGhpcy5hZ2VudElkKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKFxuICAgICAgICBgRW50aXR5ICR7ZW50aXR5SWR9IG5vdCBkaXJlY3RseSBhY2Nlc3NpYmxlIHRvIGFnZW50ICR7dGhpcy5hZ2VudElkfS4gV2lsbCBhdHRlbXB0IHRvIGFkZCBhcyBwYXJ0aWNpcGFudCBhbnl3YXkuYFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCFlbnRpdHkgJiYgZW50aXR5SWQgPT09IHRoaXMuYWdlbnRJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBBZ2VudCBlbnRpdHkgJHtlbnRpdHlJZH0gbm90IGZvdW5kLCBjYW5ub3QgYWRkIGFzIHBhcnRpY2lwYW50LmApO1xuICAgIH0gZWxzZSBpZiAoIWVudGl0eSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVc2VyIGVudGl0eSAke2VudGl0eUlkfSBub3QgZm91bmQsIGNhbm5vdCBhZGQgYXMgcGFydGljaXBhbnQuYCk7XG4gICAgfVxuICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IGF3YWl0IHRoaXMuYWRhcHRlci5nZXRQYXJ0aWNpcGFudHNGb3JSb29tKHJvb21JZCk7XG4gICAgaWYgKCFwYXJ0aWNpcGFudHMuaW5jbHVkZXMoZW50aXR5SWQpKSB7XG4gICAgICBjb25zdCBhZGRlZCA9IGF3YWl0IHRoaXMuYWRkUGFydGljaXBhbnQoZW50aXR5SWQsIHJvb21JZCk7XG4gICAgICBpZiAoIWFkZGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGFkZCBwYXJ0aWNpcGFudCAke2VudGl0eUlkfSB0byByb29tICR7cm9vbUlkfWApO1xuICAgICAgfVxuICAgICAgaWYgKGVudGl0eUlkID09PSB0aGlzLmFnZW50SWQpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYEFnZW50ICR7dGhpcy5jaGFyYWN0ZXIubmFtZX0gbGlua2VkIHRvIHJvb20gJHtyb29tSWR9IHN1Y2Nlc3NmdWxseS5gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBVc2VyICR7ZW50aXR5SWR9IGxpbmtlZCB0byByb29tICR7cm9vbUlkfSBzdWNjZXNzZnVsbHkuYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGFzeW5jIHJlbW92ZVBhcnRpY2lwYW50KGVudGl0eUlkLCByb29tSWQpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLnJlbW92ZVBhcnRpY2lwYW50KGVudGl0eUlkLCByb29tSWQpO1xuICB9XG4gIGFzeW5jIGdldFBhcnRpY2lwYW50c0ZvckVudGl0eShlbnRpdHlJZCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmFkYXB0ZXIuZ2V0UGFydGljaXBhbnRzRm9yRW50aXR5KGVudGl0eUlkKTtcbiAgfVxuICBhc3luYyBnZXRQYXJ0aWNpcGFudHNGb3JSb29tKHJvb21JZCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmFkYXB0ZXIuZ2V0UGFydGljaXBhbnRzRm9yUm9vbShyb29tSWQpO1xuICB9XG4gIGFzeW5jIGFkZFBhcnRpY2lwYW50KGVudGl0eUlkLCByb29tSWQpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmFkZFBhcnRpY2lwYW50c1Jvb20oW2VudGl0eUlkXSwgcm9vbUlkKTtcbiAgfVxuICBhc3luYyBhZGRQYXJ0aWNpcGFudHNSb29tKGVudGl0eUlkcywgcm9vbUlkKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5hZGRQYXJ0aWNpcGFudHNSb29tKGVudGl0eUlkcywgcm9vbUlkKTtcbiAgfVxuICAvKipcbiAgICogRW5zdXJlIHRoZSBleGlzdGVuY2Ugb2YgYSB3b3JsZC5cbiAgICovXG4gIGFzeW5jIGVuc3VyZVdvcmxkRXhpc3RzKHsgaWQsIG5hbWUsIHNlcnZlcklkLCBtZXRhZGF0YSB9KSB7XG4gICAgY29uc3Qgd29ybGQgPSBhd2FpdCB0aGlzLmdldFdvcmxkKGlkKTtcbiAgICBpZiAoIXdvcmxkKSB7XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcIkNyZWF0aW5nIHdvcmxkOlwiLCB7XG4gICAgICAgIGlkLFxuICAgICAgICBuYW1lLFxuICAgICAgICBzZXJ2ZXJJZCxcbiAgICAgICAgYWdlbnRJZDogdGhpcy5hZ2VudElkXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHRoaXMuYWRhcHRlci5jcmVhdGVXb3JsZCh7XG4gICAgICAgIGlkLFxuICAgICAgICBuYW1lLFxuICAgICAgICBhZ2VudElkOiB0aGlzLmFnZW50SWQsXG4gICAgICAgIHNlcnZlcklkOiBzZXJ2ZXJJZCB8fCBcImRlZmF1bHRcIixcbiAgICAgICAgbWV0YWRhdGFcbiAgICAgIH0pO1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYFdvcmxkICR7aWR9IGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5LmApO1xuICAgIH1cbiAgfVxuICBhc3luYyBlbnN1cmVSb29tRXhpc3RzKHsgaWQsIG5hbWUsIHNvdXJjZSwgdHlwZSwgY2hhbm5lbElkLCBzZXJ2ZXJJZCwgd29ybGRJZCwgbWV0YWRhdGEgfSkge1xuICAgIGlmICghd29ybGRJZCkgdGhyb3cgbmV3IEVycm9yKFwid29ybGRJZCBpcyByZXF1aXJlZFwiKTtcbiAgICBjb25zdCByb29tID0gYXdhaXQgdGhpcy5nZXRSb29tKGlkKTtcbiAgICBpZiAoIXJvb20pIHtcbiAgICAgIGF3YWl0IHRoaXMuY3JlYXRlUm9vbSh7XG4gICAgICAgIGlkLFxuICAgICAgICBuYW1lLFxuICAgICAgICBhZ2VudElkOiB0aGlzLmFnZW50SWQsXG4gICAgICAgIHNvdXJjZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgY2hhbm5lbElkLFxuICAgICAgICBzZXJ2ZXJJZCxcbiAgICAgICAgd29ybGRJZCxcbiAgICAgICAgbWV0YWRhdGFcbiAgICAgIH0pO1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYFJvb20gJHtpZH0gY3JlYXRlZCBzdWNjZXNzZnVsbHkuYCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGNvbXBvc2VTdGF0ZShtZXNzYWdlLCBpbmNsdWRlTGlzdCA9IG51bGwsIG9ubHlJbmNsdWRlID0gZmFsc2UsIHNraXBDYWNoZSA9IGZhbHNlKSB7XG4gICAgY29uc3QgZmlsdGVyTGlzdCA9IG9ubHlJbmNsdWRlID8gaW5jbHVkZUxpc3QgOiBudWxsO1xuICAgIGNvbnN0IGVtcHR5T2JqID0ge1xuICAgICAgdmFsdWVzOiB7fSxcbiAgICAgIGRhdGE6IHt9LFxuICAgICAgdGV4dDogXCJcIlxuICAgIH07XG4gICAgY29uc3QgY2FjaGVkU3RhdGUgPSBza2lwQ2FjaGUgPyBlbXB0eU9iaiA6IGF3YWl0IHRoaXMuc3RhdGVDYWNoZS5nZXQobWVzc2FnZS5pZCkgfHwgZW1wdHlPYmo7XG4gICAgY29uc3QgcHJvdmlkZXJOYW1lcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgaWYgKGZpbHRlckxpc3QgJiYgZmlsdGVyTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICBmaWx0ZXJMaXN0LmZvckVhY2goKG5hbWUpID0+IHByb3ZpZGVyTmFtZXMuYWRkKG5hbWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm92aWRlcnMuZmlsdGVyKChwKSA9PiAhcC5wcml2YXRlICYmICFwLmR5bmFtaWMpLmZvckVhY2goKHApID0+IHByb3ZpZGVyTmFtZXMuYWRkKHAubmFtZSkpO1xuICAgIH1cbiAgICBpZiAoIWZpbHRlckxpc3QgJiYgaW5jbHVkZUxpc3QgJiYgaW5jbHVkZUxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgaW5jbHVkZUxpc3QuZm9yRWFjaCgobmFtZSkgPT4gcHJvdmlkZXJOYW1lcy5hZGQobmFtZSkpO1xuICAgIH1cbiAgICBjb25zdCBwcm92aWRlcnNUb0dldCA9IEFycmF5LmZyb20oXG4gICAgICBuZXcgU2V0KHRoaXMucHJvdmlkZXJzLmZpbHRlcigocCkgPT4gcHJvdmlkZXJOYW1lcy5oYXMocC5uYW1lKSkpXG4gICAgKS5zb3J0KChhLCBiKSA9PiAoYS5wb3NpdGlvbiB8fCAwKSAtIChiLnBvc2l0aW9uIHx8IDApKTtcbiAgICBjb25zdCBwcm92aWRlckRhdGEgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIHByb3ZpZGVyc1RvR2V0Lm1hcChhc3luYyAocHJvdmlkZXIpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb3ZpZGVyLmdldCh0aGlzLCBtZXNzYWdlLCBjYWNoZWRTdGF0ZSk7XG4gICAgICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnQ7XG4gICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYCR7cHJvdmlkZXIubmFtZX0gUHJvdmlkZXIgdG9vayAke2R1cmF0aW9ufW1zIHRvIHJlc3BvbmRgKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgcHJvdmlkZXJOYW1lOiBwcm92aWRlci5uYW1lXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwicHJvdmlkZXIgZXJyb3JcIiwgcHJvdmlkZXIubmFtZSwgZXJyb3IpO1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlczoge30sIHRleHQ6IFwiXCIsIGRhdGE6IHt9LCBwcm92aWRlck5hbWU6IHByb3ZpZGVyLm5hbWUgfTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICAgIGNvbnN0IGN1cnJlbnRQcm92aWRlclJlc3VsdHMgPSB7IC4uLmNhY2hlZFN0YXRlLmRhdGE/LnByb3ZpZGVycyB8fCB7fSB9O1xuICAgIGZvciAoY29uc3QgZnJlc2hSZXN1bHQgb2YgcHJvdmlkZXJEYXRhKSB7XG4gICAgICBjdXJyZW50UHJvdmlkZXJSZXN1bHRzW2ZyZXNoUmVzdWx0LnByb3ZpZGVyTmFtZV0gPSBmcmVzaFJlc3VsdDtcbiAgICB9XG4gICAgY29uc3Qgb3JkZXJlZFRleHRzID0gW107XG4gICAgZm9yIChjb25zdCBwcm92aWRlciBvZiBwcm92aWRlcnNUb0dldCkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gY3VycmVudFByb3ZpZGVyUmVzdWx0c1twcm92aWRlci5uYW1lXTtcbiAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnRleHQgJiYgcmVzdWx0LnRleHQudHJpbSgpICE9PSBcIlwiKSB7XG4gICAgICAgIG9yZGVyZWRUZXh0cy5wdXNoKHJlc3VsdC50ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcHJvdmlkZXJzVGV4dCA9IG9yZGVyZWRUZXh0cy5qb2luKFwiXFxuXCIpO1xuICAgIGNvbnN0IGFnZ3JlZ2F0ZWRTdGF0ZVZhbHVlcyA9IHsgLi4uY2FjaGVkU3RhdGUudmFsdWVzIHx8IHt9IH07XG4gICAgZm9yIChjb25zdCBwcm92aWRlciBvZiBwcm92aWRlcnNUb0dldCkge1xuICAgICAgY29uc3QgcHJvdmlkZXJSZXN1bHQgPSBjdXJyZW50UHJvdmlkZXJSZXN1bHRzW3Byb3ZpZGVyLm5hbWVdO1xuICAgICAgaWYgKHByb3ZpZGVyUmVzdWx0ICYmIHByb3ZpZGVyUmVzdWx0LnZhbHVlcyAmJiB0eXBlb2YgcHJvdmlkZXJSZXN1bHQudmFsdWVzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oYWdncmVnYXRlZFN0YXRlVmFsdWVzLCBwcm92aWRlclJlc3VsdC52YWx1ZXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHByb3ZpZGVyTmFtZSBpbiBjdXJyZW50UHJvdmlkZXJSZXN1bHRzKSB7XG4gICAgICBpZiAoIXByb3ZpZGVyc1RvR2V0LnNvbWUoKHApID0+IHAubmFtZSA9PT0gcHJvdmlkZXJOYW1lKSkge1xuICAgICAgICBjb25zdCBwcm92aWRlclJlc3VsdCA9IGN1cnJlbnRQcm92aWRlclJlc3VsdHNbcHJvdmlkZXJOYW1lXTtcbiAgICAgICAgaWYgKHByb3ZpZGVyUmVzdWx0ICYmIHByb3ZpZGVyUmVzdWx0LnZhbHVlcyAmJiB0eXBlb2YgcHJvdmlkZXJSZXN1bHQudmFsdWVzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihhZ2dyZWdhdGVkU3RhdGVWYWx1ZXMsIHByb3ZpZGVyUmVzdWx0LnZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbmV3U3RhdGUgPSB7XG4gICAgICB2YWx1ZXM6IHtcbiAgICAgICAgLi4uYWdncmVnYXRlZFN0YXRlVmFsdWVzLFxuICAgICAgICBwcm92aWRlcnM6IHByb3ZpZGVyc1RleHRcbiAgICAgIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIC4uLmNhY2hlZFN0YXRlLmRhdGEgfHwge30sXG4gICAgICAgIHByb3ZpZGVyczogY3VycmVudFByb3ZpZGVyUmVzdWx0c1xuICAgICAgfSxcbiAgICAgIHRleHQ6IHByb3ZpZGVyc1RleHRcbiAgICB9O1xuICAgIHRoaXMuc3RhdGVDYWNoZS5zZXQobWVzc2FnZS5pZCwgbmV3U3RhdGUpO1xuICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgfVxuICBnZXRTZXJ2aWNlKHNlcnZpY2VOYW1lKSB7XG4gICAgY29uc3Qgc2VydmljZUluc3RhbmNlcyA9IHRoaXMuc2VydmljZXMuZ2V0KHNlcnZpY2VOYW1lKTtcbiAgICBpZiAoIXNlcnZpY2VJbnN0YW5jZXMgfHwgc2VydmljZUluc3RhbmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBTZXJ2aWNlICR7c2VydmljZU5hbWV9IG5vdCBmb3VuZGApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBzZXJ2aWNlSW5zdGFuY2VzWzBdO1xuICB9XG4gIC8qKlxuICAgKiBUeXBlLXNhZmUgc2VydmljZSBnZXR0ZXIgdGhhdCBlbnN1cmVzIHRoZSBjb3JyZWN0IHNlcnZpY2UgdHlwZSBpcyByZXR1cm5lZFxuICAgKiBAdGVtcGxhdGUgVCAtIFRoZSBleHBlY3RlZCBzZXJ2aWNlIGNsYXNzIHR5cGVcbiAgICogQHBhcmFtIHNlcnZpY2VOYW1lIC0gVGhlIHNlcnZpY2UgdHlwZSBuYW1lXG4gICAqIEByZXR1cm5zIFRoZSBzZXJ2aWNlIGluc3RhbmNlIHdpdGggcHJvcGVyIHR5cGluZywgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICovXG4gIGdldFR5cGVkU2VydmljZShzZXJ2aWNlTmFtZSkge1xuICAgIHJldHVybiB0aGlzLmdldFNlcnZpY2Uoc2VydmljZU5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYWxsIHNlcnZpY2VzIG9mIGEgc3BlY2lmaWMgdHlwZVxuICAgKiBAdGVtcGxhdGUgVCAtIFRoZSBleHBlY3RlZCBzZXJ2aWNlIGNsYXNzIHR5cGVcbiAgICogQHBhcmFtIHNlcnZpY2VOYW1lIC0gVGhlIHNlcnZpY2UgdHlwZSBuYW1lXG4gICAqIEByZXR1cm5zIEFycmF5IG9mIHNlcnZpY2UgaW5zdGFuY2VzIHdpdGggcHJvcGVyIHR5cGluZ1xuICAgKi9cbiAgZ2V0U2VydmljZXNCeVR5cGUoc2VydmljZU5hbWUpIHtcbiAgICBjb25zdCBzZXJ2aWNlSW5zdGFuY2VzID0gdGhpcy5zZXJ2aWNlcy5nZXQoc2VydmljZU5hbWUpO1xuICAgIGlmICghc2VydmljZUluc3RhbmNlcyB8fCBzZXJ2aWNlSW5zdGFuY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYE5vIHNlcnZpY2VzIGZvdW5kIGZvciB0eXBlICR7c2VydmljZU5hbWV9YCk7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBzZXJ2aWNlSW5zdGFuY2VzO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYWxsIHJlZ2lzdGVyZWQgc2VydmljZSB0eXBlc1xuICAgKiBAcmV0dXJucyBBcnJheSBvZiByZWdpc3RlcmVkIHNlcnZpY2UgdHlwZSBuYW1lc1xuICAgKi9cbiAgZ2V0UmVnaXN0ZXJlZFNlcnZpY2VUeXBlcygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnNlcnZpY2VzLmtleXMoKSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgc2VydmljZSB0eXBlIGlzIHJlZ2lzdGVyZWRcbiAgICogQHBhcmFtIHNlcnZpY2VUeXBlIC0gVGhlIHNlcnZpY2UgdHlwZSB0byBjaGVja1xuICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBzZXJ2aWNlIGlzIHJlZ2lzdGVyZWRcbiAgICovXG4gIGhhc1NlcnZpY2Uoc2VydmljZVR5cGUpIHtcbiAgICBjb25zdCBzZXJ2aWNlSW5zdGFuY2VzID0gdGhpcy5zZXJ2aWNlcy5nZXQoc2VydmljZVR5cGUpO1xuICAgIHJldHVybiBzZXJ2aWNlSW5zdGFuY2VzICE9PSB2b2lkIDAgJiYgc2VydmljZUluc3RhbmNlcy5sZW5ndGggPiAwO1xuICB9XG4gIGFzeW5jIHJlZ2lzdGVyU2VydmljZShzZXJ2aWNlRGVmKSB7XG4gICAgY29uc3Qgc2VydmljZVR5cGUgPSBzZXJ2aWNlRGVmLnNlcnZpY2VUeXBlO1xuICAgIGlmICghc2VydmljZVR5cGUpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oXG4gICAgICAgIGBTZXJ2aWNlICR7c2VydmljZURlZi5uYW1lfSBpcyBtaXNzaW5nIHNlcnZpY2VUeXBlLiBQbGVhc2UgZGVmaW5lIGEgc3RhdGljIHNlcnZpY2VUeXBlIHByb3BlcnR5LmBcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgYCR7dGhpcy5jaGFyYWN0ZXIubmFtZX0oJHt0aGlzLmFnZW50SWR9KSAtIFJlZ2lzdGVyaW5nIHNlcnZpY2U6YCxcbiAgICAgIHNlcnZpY2VUeXBlXG4gICAgKTtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2VydmljZUluc3RhbmNlID0gYXdhaXQgc2VydmljZURlZi5zdGFydCh0aGlzKTtcbiAgICAgIGlmICghdGhpcy5zZXJ2aWNlcy5oYXMoc2VydmljZVR5cGUpKSB7XG4gICAgICAgIHRoaXMuc2VydmljZXMuc2V0KHNlcnZpY2VUeXBlLCBbXSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuc2VydmljZVR5cGVzLmhhcyhzZXJ2aWNlVHlwZSkpIHtcbiAgICAgICAgdGhpcy5zZXJ2aWNlVHlwZXMuc2V0KHNlcnZpY2VUeXBlLCBbXSk7XG4gICAgICB9XG4gICAgICB0aGlzLnNlcnZpY2VzLmdldChzZXJ2aWNlVHlwZSkucHVzaChzZXJ2aWNlSW5zdGFuY2UpO1xuICAgICAgdGhpcy5zZXJ2aWNlVHlwZXMuZ2V0KHNlcnZpY2VUeXBlKS5wdXNoKHNlcnZpY2VEZWYpO1xuICAgICAgaWYgKHR5cGVvZiBzZXJ2aWNlRGVmLnJlZ2lzdGVyU2VuZEhhbmRsZXJzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgc2VydmljZURlZi5yZWdpc3RlclNlbmRIYW5kbGVycyh0aGlzLCBzZXJ2aWNlSW5zdGFuY2UpO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgIGAke3RoaXMuY2hhcmFjdGVyLm5hbWV9KCR7dGhpcy5hZ2VudElkfSkgLSBTZXJ2aWNlICR7c2VydmljZVR5cGV9IHJlZ2lzdGVyZWQgc3VjY2Vzc2Z1bGx5YFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgIGAke3RoaXMuY2hhcmFjdGVyLm5hbWV9KCR7dGhpcy5hZ2VudElkfSkgLSBGYWlsZWQgdG8gcmVnaXN0ZXIgc2VydmljZSAke3NlcnZpY2VUeXBlfTogJHtlcnJvck1lc3NhZ2V9YFxuICAgICAgKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuICByZWdpc3Rlck1vZGVsKG1vZGVsVHlwZSwgaGFuZGxlciwgcHJvdmlkZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3QgbW9kZWxLZXkgPSB0eXBlb2YgbW9kZWxUeXBlID09PSBcInN0cmluZ1wiID8gbW9kZWxUeXBlIDogTW9kZWxUeXBlMlttb2RlbFR5cGVdO1xuICAgIGlmICghdGhpcy5tb2RlbHMuaGFzKG1vZGVsS2V5KSkge1xuICAgICAgdGhpcy5tb2RlbHMuc2V0KG1vZGVsS2V5LCBbXSk7XG4gICAgfVxuICAgIGNvbnN0IHJlZ2lzdHJhdGlvbk9yZGVyID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLm1vZGVscy5nZXQobW9kZWxLZXkpPy5wdXNoKHtcbiAgICAgIGhhbmRsZXIsXG4gICAgICBwcm92aWRlcixcbiAgICAgIHByaW9yaXR5OiBwcmlvcml0eSB8fCAwLFxuICAgICAgcmVnaXN0cmF0aW9uT3JkZXJcbiAgICB9KTtcbiAgICB0aGlzLm1vZGVscy5nZXQobW9kZWxLZXkpPy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBpZiAoKGIucHJpb3JpdHkgfHwgMCkgIT09IChhLnByaW9yaXR5IHx8IDApKSB7XG4gICAgICAgIHJldHVybiAoYi5wcmlvcml0eSB8fCAwKSAtIChhLnByaW9yaXR5IHx8IDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGEucmVnaXN0cmF0aW9uT3JkZXIgLSBiLnJlZ2lzdHJhdGlvbk9yZGVyO1xuICAgIH0pO1xuICB9XG4gIGdldE1vZGVsKG1vZGVsVHlwZSwgcHJvdmlkZXIpIHtcbiAgICBjb25zdCBtb2RlbEtleSA9IHR5cGVvZiBtb2RlbFR5cGUgPT09IFwic3RyaW5nXCIgPyBtb2RlbFR5cGUgOiBNb2RlbFR5cGUyW21vZGVsVHlwZV07XG4gICAgY29uc3QgbW9kZWxzID0gdGhpcy5tb2RlbHMuZ2V0KG1vZGVsS2V5KTtcbiAgICBpZiAoIW1vZGVscz8ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAocHJvdmlkZXIpIHtcbiAgICAgIGNvbnN0IG1vZGVsV2l0aFByb3ZpZGVyID0gbW9kZWxzLmZpbmQoKG0pID0+IG0ucHJvdmlkZXIgPT09IHByb3ZpZGVyKTtcbiAgICAgIGlmIChtb2RlbFdpdGhQcm92aWRlcikge1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgICBgW0FnZW50UnVudGltZV1bJHt0aGlzLmNoYXJhY3Rlci5uYW1lfV0gVXNpbmcgbW9kZWwgJHttb2RlbEtleX0gZnJvbSBwcm92aWRlciAke3Byb3ZpZGVyfWBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG1vZGVsV2l0aFByb3ZpZGVyLmhhbmRsZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFxuICAgICAgICAgIGBbQWdlbnRSdW50aW1lXVske3RoaXMuY2hhcmFjdGVyLm5hbWV9XSBObyBtb2RlbCBmb3VuZCBmb3IgcHJvdmlkZXIgJHtwcm92aWRlcn1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgYFtBZ2VudFJ1bnRpbWVdWyR7dGhpcy5jaGFyYWN0ZXIubmFtZX1dIFVzaW5nIG1vZGVsICR7bW9kZWxLZXl9IGZyb20gcHJvdmlkZXIgJHttb2RlbHNbMF0ucHJvdmlkZXJ9YFxuICAgICk7XG4gICAgcmV0dXJuIG1vZGVsc1swXS5oYW5kbGVyO1xuICB9XG4gIGFzeW5jIHVzZU1vZGVsKG1vZGVsVHlwZSwgcGFyYW1zLCBwcm92aWRlcikge1xuICAgIGNvbnN0IG1vZGVsS2V5ID0gdHlwZW9mIG1vZGVsVHlwZSA9PT0gXCJzdHJpbmdcIiA/IG1vZGVsVHlwZSA6IE1vZGVsVHlwZTJbbW9kZWxUeXBlXTtcbiAgICBjb25zdCBwcm9tcHRDb250ZW50ID0gcGFyYW1zPy5wcm9tcHQgfHwgcGFyYW1zPy5pbnB1dCB8fCAoQXJyYXkuaXNBcnJheShwYXJhbXM/Lm1lc3NhZ2VzKSA/IEpTT04uc3RyaW5naWZ5KHBhcmFtcy5tZXNzYWdlcykgOiBudWxsKTtcbiAgICBjb25zdCBtb2RlbCA9IHRoaXMuZ2V0TW9kZWwobW9kZWxLZXksIHByb3ZpZGVyKTtcbiAgICBpZiAoIW1vZGVsKSB7XG4gICAgICBjb25zdCBlcnJvck1zZyA9IGBObyBoYW5kbGVyIGZvdW5kIGZvciBkZWxlZ2F0ZSB0eXBlOiAke21vZGVsS2V5fWA7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2cpO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgIGBbdXNlTW9kZWxdICR7bW9kZWxLZXl9IGlucHV0OiBgICsgSlNPTi5zdHJpbmdpZnkocGFyYW1zLCBzYWZlUmVwbGFjZXIoKSwgMikucmVwbGFjZSgvXFxcXG4vZywgXCJcXG5cIilcbiAgICApO1xuICAgIGxldCBwYXJhbXNXaXRoUnVudGltZTtcbiAgICBpZiAocGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwIHx8IHR5cGVvZiBwYXJhbXMgIT09IFwib2JqZWN0XCIgfHwgQXJyYXkuaXNBcnJheShwYXJhbXMpIHx8IHR5cGVvZiBCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgQnVmZmVyLmlzQnVmZmVyKHBhcmFtcykpIHtcbiAgICAgIHBhcmFtc1dpdGhSdW50aW1lID0gcGFyYW1zO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXNXaXRoUnVudGltZSA9IHtcbiAgICAgICAgLi4ucGFyYW1zLFxuICAgICAgICBydW50aW1lOiB0aGlzXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBtb2RlbCh0aGlzLCBwYXJhbXNXaXRoUnVudGltZSk7XG4gICAgICBjb25zdCBlbGFwc2VkVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgIGBbdXNlTW9kZWxdICR7bW9kZWxLZXl9IG91dHB1dCAodG9vayAke051bWJlcihlbGFwc2VkVGltZS50b0ZpeGVkKDIpKS50b0xvY2FsZVN0cmluZygpfW1zKTpgLFxuICAgICAgICBBcnJheS5pc0FycmF5KHJlc3BvbnNlKSA/IGAke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlLnNsaWNlKDAsIDUpKX0uLi4ke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlLnNsaWNlKC01KSl9ICgke3Jlc3BvbnNlLmxlbmd0aH0gaXRlbXMpYCA6IEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLCBzYWZlUmVwbGFjZXIoKSwgMikucmVwbGFjZSgvXFxcXG4vZywgXCJcXG5cIilcbiAgICAgICk7XG4gICAgICBpZiAobW9kZWxLZXkgIT09IE1vZGVsVHlwZTIuVEVYVF9FTUJFRERJTkcgJiYgcHJvbXB0Q29udGVudCkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50QWN0aW9uQ29udGV4dCkge1xuICAgICAgICAgIHRoaXMuY3VycmVudEFjdGlvbkNvbnRleHQucHJvbXB0cy5wdXNoKHtcbiAgICAgICAgICAgIG1vZGVsVHlwZTogbW9kZWxLZXksXG4gICAgICAgICAgICBwcm9tcHQ6IHByb21wdENvbnRlbnQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5hZGFwdGVyLmxvZyh7XG4gICAgICAgIGVudGl0eUlkOiB0aGlzLmFnZW50SWQsXG4gICAgICAgIHJvb21JZDogdGhpcy5hZ2VudElkLFxuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgbW9kZWxUeXBlLFxuICAgICAgICAgIG1vZGVsS2V5LFxuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgLi4udHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShwYXJhbXMpICYmIHBhcmFtcyA/IHBhcmFtcyA6IHt9LFxuICAgICAgICAgICAgcHJvbXB0OiBwcm9tcHRDb250ZW50XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcm9tcHQ6IHByb21wdENvbnRlbnQsXG4gICAgICAgICAgcnVuSWQ6IHRoaXMuZ2V0Q3VycmVudFJ1bklkKCksXG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgIGV4ZWN1dGlvblRpbWU6IGVsYXBzZWRUaW1lLFxuICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlciB8fCB0aGlzLm1vZGVscy5nZXQobW9kZWxLZXkpPy5bMF0/LnByb3ZpZGVyIHx8IFwidW5rbm93blwiLFxuICAgICAgICAgIGFjdGlvbkNvbnRleHQ6IHRoaXMuY3VycmVudEFjdGlvbkNvbnRleHQgPyB7XG4gICAgICAgICAgICBhY3Rpb25OYW1lOiB0aGlzLmN1cnJlbnRBY3Rpb25Db250ZXh0LmFjdGlvbk5hbWUsXG4gICAgICAgICAgICBhY3Rpb25JZDogdGhpcy5jdXJyZW50QWN0aW9uQ29udGV4dC5hY3Rpb25JZFxuICAgICAgICAgIH0gOiB2b2lkIDAsXG4gICAgICAgICAgcmVzcG9uc2U6IEFycmF5LmlzQXJyYXkocmVzcG9uc2UpICYmIHJlc3BvbnNlLmV2ZXJ5KCh4KSA9PiB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIikgPyBcIlthcnJheV1cIiA6IHJlc3BvbnNlXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IGB1c2VNb2RlbDoke21vZGVsS2V5fWBcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbiAgcmVnaXN0ZXJFdmVudChldmVudCwgaGFuZGxlcikge1xuICAgIGlmICghdGhpcy5ldmVudHMuaGFzKGV2ZW50KSkge1xuICAgICAgdGhpcy5ldmVudHMuc2V0KGV2ZW50LCBbXSk7XG4gICAgfVxuICAgIHRoaXMuZXZlbnRzLmdldChldmVudCk/LnB1c2goaGFuZGxlcik7XG4gIH1cbiAgZ2V0RXZlbnQoZXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMuZ2V0KGV2ZW50KTtcbiAgfVxuICBhc3luYyBlbWl0RXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgIGNvbnN0IGV2ZW50cyA9IEFycmF5LmlzQXJyYXkoZXZlbnQpID8gZXZlbnQgOiBbZXZlbnRdO1xuICAgIGZvciAoY29uc3QgZXZlbnROYW1lIG9mIGV2ZW50cykge1xuICAgICAgY29uc3QgZXZlbnRIYW5kbGVycyA9IHRoaXMuZXZlbnRzLmdldChldmVudE5hbWUpO1xuICAgICAgaWYgKCFldmVudEhhbmRsZXJzKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoZXZlbnRIYW5kbGVycy5tYXAoKGhhbmRsZXIpID0+IGhhbmRsZXIocGFyYW1zKSkpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYEVycm9yIGR1cmluZyBlbWl0RXZlbnQgZm9yICR7ZXZlbnROYW1lfSAoaGFuZGxlciBleGVjdXRpb24pOmAsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYXN5bmMgZW5zdXJlRW1iZWRkaW5nRGltZW5zaW9uKCkge1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBbQWdlbnRSdW50aW1lXVske3RoaXMuY2hhcmFjdGVyLm5hbWV9XSBTdGFydGluZyBlbnN1cmVFbWJlZGRpbmdEaW1lbnNpb25gKTtcbiAgICBpZiAoIXRoaXMuYWRhcHRlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgW0FnZW50UnVudGltZV1bJHt0aGlzLmNoYXJhY3Rlci5uYW1lfV0gRGF0YWJhc2UgYWRhcHRlciBub3QgaW5pdGlhbGl6ZWQgYmVmb3JlIGVuc3VyZUVtYmVkZGluZ0RpbWVuc2lvbmBcbiAgICAgICk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBtb2RlbCA9IHRoaXMuZ2V0TW9kZWwoTW9kZWxUeXBlMi5URVhUX0VNQkVERElORyk7XG4gICAgICBpZiAoIW1vZGVsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgW0FnZW50UnVudGltZV1bJHt0aGlzLmNoYXJhY3Rlci5uYW1lfV0gTm8gVEVYVF9FTUJFRERJTkcgbW9kZWwgcmVnaXN0ZXJlZGBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBbQWdlbnRSdW50aW1lXVske3RoaXMuY2hhcmFjdGVyLm5hbWV9XSBHZXR0aW5nIGVtYmVkZGluZyBkaW1lbnNpb25zYCk7XG4gICAgICBjb25zdCBlbWJlZGRpbmcgPSBhd2FpdCB0aGlzLnVzZU1vZGVsKE1vZGVsVHlwZTIuVEVYVF9FTUJFRERJTkcsIG51bGwpO1xuICAgICAgaWYgKCFlbWJlZGRpbmcgfHwgIWVtYmVkZGluZy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbQWdlbnRSdW50aW1lXVske3RoaXMuY2hhcmFjdGVyLm5hbWV9XSBJbnZhbGlkIGVtYmVkZGluZyByZWNlaXZlZGApO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgIGBbQWdlbnRSdW50aW1lXVske3RoaXMuY2hhcmFjdGVyLm5hbWV9XSBTZXR0aW5nIGVtYmVkZGluZyBkaW1lbnNpb246ICR7ZW1iZWRkaW5nLmxlbmd0aH1gXG4gICAgICApO1xuICAgICAgYXdhaXQgdGhpcy5hZGFwdGVyLmVuc3VyZUVtYmVkZGluZ0RpbWVuc2lvbihlbWJlZGRpbmcubGVuZ3RoKTtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgICBgW0FnZW50UnVudGltZV1bJHt0aGlzLmNoYXJhY3Rlci5uYW1lfV0gU3VjY2Vzc2Z1bGx5IHNldCBlbWJlZGRpbmcgZGltZW5zaW9uYFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgIGBbQWdlbnRSdW50aW1lXVske3RoaXMuY2hhcmFjdGVyLm5hbWV9XSBFcnJvciBpbiBlbnN1cmVFbWJlZGRpbmdEaW1lbnNpb246YCxcbiAgICAgICAgZXJyb3JcbiAgICAgICk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbiAgcmVnaXN0ZXJUYXNrV29ya2VyKHRhc2tIYW5kbGVyKSB7XG4gICAgaWYgKHRoaXMudGFza1dvcmtlcnMuaGFzKHRhc2tIYW5kbGVyLm5hbWUpKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKFxuICAgICAgICBgVGFzayBkZWZpbml0aW9uICR7dGFza0hhbmRsZXIubmFtZX0gYWxyZWFkeSByZWdpc3RlcmVkLiBXaWxsIGJlIG92ZXJ3cml0dGVuLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMudGFza1dvcmtlcnMuc2V0KHRhc2tIYW5kbGVyLm5hbWUsIHRhc2tIYW5kbGVyKTtcbiAgfVxuICBnZXRUYXNrV29ya2VyKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrV29ya2Vycy5nZXQobmFtZSk7XG4gIH1cbiAgZ2V0IGRiKCkge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuZGI7XG4gIH1cbiAgYXN5bmMgaW5pdCgpIHtcbiAgICBhd2FpdCB0aGlzLmFkYXB0ZXIuaW5pdCgpO1xuICB9XG4gIGFzeW5jIGNsb3NlKCkge1xuICAgIGF3YWl0IHRoaXMuYWRhcHRlci5jbG9zZSgpO1xuICB9XG4gIGFzeW5jIGdldEFnZW50KGFnZW50SWQpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldEFnZW50KGFnZW50SWQpO1xuICB9XG4gIGFzeW5jIGdldEFnZW50cygpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldEFnZW50cygpO1xuICB9XG4gIGFzeW5jIGNyZWF0ZUFnZW50KGFnZW50KSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5jcmVhdGVBZ2VudChhZ2VudCk7XG4gIH1cbiAgYXN5bmMgdXBkYXRlQWdlbnQoYWdlbnRJZCwgYWdlbnQpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLnVwZGF0ZUFnZW50KGFnZW50SWQsIGFnZW50KTtcbiAgfVxuICBhc3luYyBkZWxldGVBZ2VudChhZ2VudElkKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5kZWxldGVBZ2VudChhZ2VudElkKTtcbiAgfVxuICBhc3luYyBlbnN1cmVBZ2VudEV4aXN0cyhhZ2VudCkge1xuICAgIGlmICghYWdlbnQubmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWdlbnQgbmFtZSBpcyByZXF1aXJlZFwiKTtcbiAgICB9XG4gICAgY29uc3QgYWdlbnRzID0gYXdhaXQgdGhpcy5hZGFwdGVyLmdldEFnZW50cygpO1xuICAgIGNvbnN0IGV4aXN0aW5nQWdlbnRJZCA9IGFnZW50cy5maW5kKChhKSA9PiBhLm5hbWUgPT09IGFnZW50Lm5hbWUpPy5pZDtcbiAgICBpZiAoZXhpc3RpbmdBZ2VudElkKSB7XG4gICAgICBjb25zdCB1cGRhdGVkQWdlbnQgPSB7XG4gICAgICAgIC4uLmFnZW50LFxuICAgICAgICBpZDogZXhpc3RpbmdBZ2VudElkLFxuICAgICAgICB1cGRhdGVkQXQ6IERhdGUubm93KClcbiAgICAgIH07XG4gICAgICBhd2FpdCB0aGlzLmFkYXB0ZXIudXBkYXRlQWdlbnQoZXhpc3RpbmdBZ2VudElkLCB1cGRhdGVkQWdlbnQpO1xuICAgICAgY29uc3QgZXhpc3RpbmdBZ2VudCA9IGF3YWl0IHRoaXMuYWRhcHRlci5nZXRBZ2VudChleGlzdGluZ0FnZW50SWQpO1xuICAgICAgaWYgKCFleGlzdGluZ0FnZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHJldHJpZXZlIGFnZW50IGFmdGVyIHVwZGF0ZTogJHtleGlzdGluZ0FnZW50SWR9YCk7XG4gICAgICB9XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgVXBkYXRlZCBleGlzdGluZyBhZ2VudCAke2FnZW50Lm5hbWV9IG9uIHJlc3RhcnRgKTtcbiAgICAgIHJldHVybiBleGlzdGluZ0FnZW50O1xuICAgIH1cbiAgICBjb25zdCBuZXdBZ2VudCA9IHtcbiAgICAgIC4uLmFnZW50LFxuICAgICAgaWQ6IHN0cmluZ1RvVXVpZChhZ2VudC5uYW1lKVxuICAgIH07XG4gICAgY29uc3QgY3JlYXRlZCA9IGF3YWl0IHRoaXMuYWRhcHRlci5jcmVhdGVBZ2VudChuZXdBZ2VudCk7XG4gICAgaWYgKCFjcmVhdGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgYWdlbnQ6ICR7YWdlbnQubmFtZX1gKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoYENyZWF0ZWQgbmV3IGFnZW50ICR7YWdlbnQubmFtZX1gKTtcbiAgICByZXR1cm4gbmV3QWdlbnQ7XG4gIH1cbiAgYXN5bmMgZ2V0RW50aXR5QnlJZChlbnRpdHlJZCkge1xuICAgIGNvbnN0IGVudGl0aWVzID0gYXdhaXQgdGhpcy5hZGFwdGVyLmdldEVudGl0aWVzQnlJZHMoW2VudGl0eUlkXSk7XG4gICAgaWYgKCFlbnRpdGllcz8ubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gZW50aXRpZXNbMF07XG4gIH1cbiAgYXN5bmMgZ2V0RW50aXRpZXNCeUlkcyhlbnRpdHlJZHMpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldEVudGl0aWVzQnlJZHMoZW50aXR5SWRzKTtcbiAgfVxuICBhc3luYyBnZXRFbnRpdGllc0ZvclJvb20ocm9vbUlkLCBpbmNsdWRlQ29tcG9uZW50cykge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmFkYXB0ZXIuZ2V0RW50aXRpZXNGb3JSb29tKHJvb21JZCwgaW5jbHVkZUNvbXBvbmVudHMpO1xuICB9XG4gIGFzeW5jIGNyZWF0ZUVudGl0eShlbnRpdHkpIHtcbiAgICBpZiAoIWVudGl0eS5hZ2VudElkKSB7XG4gICAgICBlbnRpdHkuYWdlbnRJZCA9IHRoaXMuYWdlbnRJZDtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY3JlYXRlRW50aXRpZXMoW2VudGl0eV0pO1xuICB9XG4gIGFzeW5jIGNyZWF0ZUVudGl0aWVzKGVudGl0aWVzKSB7XG4gICAgZW50aXRpZXMuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgZS5hZ2VudElkID0gdGhpcy5hZ2VudElkO1xuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmFkYXB0ZXIuY3JlYXRlRW50aXRpZXMoZW50aXRpZXMpO1xuICB9XG4gIGFzeW5jIHVwZGF0ZUVudGl0eShlbnRpdHkpIHtcbiAgICBhd2FpdCB0aGlzLmFkYXB0ZXIudXBkYXRlRW50aXR5KGVudGl0eSk7XG4gIH1cbiAgYXN5bmMgZ2V0Q29tcG9uZW50KGVudGl0eUlkLCB0eXBlLCB3b3JsZElkLCBzb3VyY2VFbnRpdHlJZCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmFkYXB0ZXIuZ2V0Q29tcG9uZW50KGVudGl0eUlkLCB0eXBlLCB3b3JsZElkLCBzb3VyY2VFbnRpdHlJZCk7XG4gIH1cbiAgYXN5bmMgZ2V0Q29tcG9uZW50cyhlbnRpdHlJZCwgd29ybGRJZCwgc291cmNlRW50aXR5SWQpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldENvbXBvbmVudHMoZW50aXR5SWQsIHdvcmxkSWQsIHNvdXJjZUVudGl0eUlkKTtcbiAgfVxuICBhc3luYyBjcmVhdGVDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5jcmVhdGVDb21wb25lbnQoY29tcG9uZW50KTtcbiAgfVxuICBhc3luYyB1cGRhdGVDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgYXdhaXQgdGhpcy5hZGFwdGVyLnVwZGF0ZUNvbXBvbmVudChjb21wb25lbnQpO1xuICB9XG4gIGFzeW5jIGRlbGV0ZUNvbXBvbmVudChjb21wb25lbnRJZCkge1xuICAgIGF3YWl0IHRoaXMuYWRhcHRlci5kZWxldGVDb21wb25lbnQoY29tcG9uZW50SWQpO1xuICB9XG4gIGFzeW5jIGFkZEVtYmVkZGluZ1RvTWVtb3J5KG1lbW9yeSkge1xuICAgIGlmIChtZW1vcnkuZW1iZWRkaW5nKSB7XG4gICAgICByZXR1cm4gbWVtb3J5O1xuICAgIH1cbiAgICBjb25zdCBtZW1vcnlUZXh0ID0gbWVtb3J5LmNvbnRlbnQudGV4dDtcbiAgICBpZiAoIW1lbW9yeVRleHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBnZW5lcmF0ZSBlbWJlZGRpbmc6IE1lbW9yeSBjb250ZW50IGlzIGVtcHR5XCIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgbWVtb3J5LmVtYmVkZGluZyA9IGF3YWl0IHRoaXMudXNlTW9kZWwoTW9kZWxUeXBlMi5URVhUX0VNQkVERElORywge1xuICAgICAgICB0ZXh0OiBtZW1vcnlUZXh0XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXCJGYWlsZWQgdG8gZ2VuZXJhdGUgZW1iZWRkaW5nOlwiLCBlcnJvcik7XG4gICAgICBtZW1vcnkuZW1iZWRkaW5nID0gYXdhaXQgdGhpcy51c2VNb2RlbChNb2RlbFR5cGUyLlRFWFRfRU1CRURESU5HLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9yeTtcbiAgfVxuICBhc3luYyBnZXRNZW1vcmllcyhwYXJhbXMpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldE1lbW9yaWVzKHBhcmFtcyk7XG4gIH1cbiAgYXN5bmMgZ2V0QWxsTWVtb3JpZXMoKSB7XG4gICAgY29uc3QgdGFibGVzID0gW1wibWVtb3JpZXNcIiwgXCJtZXNzYWdlc1wiLCBcImZhY3RzXCIsIFwiZG9jdW1lbnRzXCJdO1xuICAgIGNvbnN0IGFsbE1lbW9yaWVzID0gW107XG4gICAgZm9yIChjb25zdCB0YWJsZU5hbWUgb2YgdGFibGVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBtZW1vcmllcyA9IGF3YWl0IHRoaXMuYWRhcHRlci5nZXRNZW1vcmllcyh7XG4gICAgICAgICAgYWdlbnRJZDogdGhpcy5hZ2VudElkLFxuICAgICAgICAgIHRhYmxlTmFtZSxcbiAgICAgICAgICBjb3VudDogMWU0XG4gICAgICAgICAgLy8gR2V0IGEgbGFyZ2UgbnVtYmVyIHRvIGZldGNoIGFsbFxuICAgICAgICB9KTtcbiAgICAgICAgYWxsTWVtb3JpZXMucHVzaCguLi5tZW1vcmllcyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgRmFpbGVkIHRvIGdldCBtZW1vcmllcyBmcm9tIHRhYmxlICR7dGFibGVOYW1lfTpgLCBlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbGxNZW1vcmllcztcbiAgfVxuICBhc3luYyBnZXRNZW1vcnlCeUlkKGlkKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5nZXRNZW1vcnlCeUlkKGlkKTtcbiAgfVxuICBhc3luYyBnZXRNZW1vcmllc0J5SWRzKGlkcywgdGFibGVOYW1lKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5nZXRNZW1vcmllc0J5SWRzKGlkcywgdGFibGVOYW1lKTtcbiAgfVxuICBhc3luYyBnZXRNZW1vcmllc0J5Um9vbUlkcyhwYXJhbXMpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldE1lbW9yaWVzQnlSb29tSWRzKHBhcmFtcyk7XG4gIH1cbiAgYXN5bmMgZ2V0Q2FjaGVkRW1iZWRkaW5ncyhwYXJhbXMpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldENhY2hlZEVtYmVkZGluZ3MocGFyYW1zKTtcbiAgfVxuICBhc3luYyBsb2cocGFyYW1zKSB7XG4gICAgYXdhaXQgdGhpcy5hZGFwdGVyLmxvZyhwYXJhbXMpO1xuICB9XG4gIGFzeW5jIHNlYXJjaE1lbW9yaWVzKHBhcmFtcykge1xuICAgIGNvbnN0IG1lbW9yaWVzID0gYXdhaXQgdGhpcy5hZGFwdGVyLnNlYXJjaE1lbW9yaWVzKHBhcmFtcyk7XG4gICAgaWYgKHBhcmFtcy5xdWVyeSkge1xuICAgICAgY29uc3QgcmVyYW5rZWRNZW1vcmllcyA9IGF3YWl0IHRoaXMucmVyYW5rTWVtb3JpZXMocGFyYW1zLnF1ZXJ5LCBtZW1vcmllcyk7XG4gICAgICByZXR1cm4gcmVyYW5rZWRNZW1vcmllcztcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9yaWVzO1xuICB9XG4gIGFzeW5jIHJlcmFua01lbW9yaWVzKHF1ZXJ5LCBtZW1vcmllcykge1xuICAgIGNvbnN0IGRvY3MgPSBtZW1vcmllcy5tYXAoKG1lbW9yeSkgPT4gKHtcbiAgICAgIHRpdGxlOiBtZW1vcnkuaWQsXG4gICAgICBjb250ZW50OiBtZW1vcnkuY29udGVudC50ZXh0XG4gICAgfSkpO1xuICAgIGNvbnN0IGJtMjUgPSBuZXcgQk0yNShkb2NzKTtcbiAgICBjb25zdCByZXN1bHRzID0gYm0yNS5zZWFyY2gocXVlcnksIG1lbW9yaWVzLmxlbmd0aCk7XG4gICAgcmV0dXJuIHJlc3VsdHMubWFwKChyZXN1bHQpID0+IG1lbW9yaWVzW3Jlc3VsdC5pbmRleF0pO1xuICB9XG4gIGFzeW5jIGNyZWF0ZU1lbW9yeShtZW1vcnksIHRhYmxlTmFtZSwgdW5pcXVlKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5jcmVhdGVNZW1vcnkobWVtb3J5LCB0YWJsZU5hbWUsIHVuaXF1ZSk7XG4gIH1cbiAgYXN5bmMgdXBkYXRlTWVtb3J5KG1lbW9yeSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmFkYXB0ZXIudXBkYXRlTWVtb3J5KG1lbW9yeSk7XG4gIH1cbiAgYXN5bmMgZGVsZXRlTWVtb3J5KG1lbW9yeUlkKSB7XG4gICAgYXdhaXQgdGhpcy5hZGFwdGVyLmRlbGV0ZU1lbW9yeShtZW1vcnlJZCk7XG4gIH1cbiAgYXN5bmMgZGVsZXRlTWFueU1lbW9yaWVzKG1lbW9yeUlkcykge1xuICAgIGF3YWl0IHRoaXMuYWRhcHRlci5kZWxldGVNYW55TWVtb3JpZXMobWVtb3J5SWRzKTtcbiAgfVxuICBhc3luYyBjbGVhckFsbEFnZW50TWVtb3JpZXMoKSB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhgQ2xlYXJpbmcgYWxsIG1lbW9yaWVzIGZvciBhZ2VudCAke3RoaXMuY2hhcmFjdGVyLm5hbWV9ICgke3RoaXMuYWdlbnRJZH0pYCk7XG4gICAgY29uc3QgYWxsTWVtb3JpZXMgPSBhd2FpdCB0aGlzLmdldEFsbE1lbW9yaWVzKCk7XG4gICAgY29uc3QgbWVtb3J5SWRzID0gYWxsTWVtb3JpZXMubWFwKChtZW1vcnkpID0+IG1lbW9yeS5pZCk7XG4gICAgaWYgKG1lbW9yeUlkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMubG9nZ2VyLmluZm8oXCJObyBtZW1vcmllcyBmb3VuZCB0byBkZWxldGVcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLmluZm8oYEZvdW5kICR7bWVtb3J5SWRzLmxlbmd0aH0gbWVtb3JpZXMgdG8gZGVsZXRlYCk7XG4gICAgYXdhaXQgdGhpcy5hZGFwdGVyLmRlbGV0ZU1hbnlNZW1vcmllcyhtZW1vcnlJZHMpO1xuICAgIHRoaXMubG9nZ2VyLmluZm8oYFN1Y2Nlc3NmdWxseSBjbGVhcmVkIGFsbCAke21lbW9yeUlkcy5sZW5ndGh9IG1lbW9yaWVzIGZvciBhZ2VudGApO1xuICB9XG4gIGFzeW5jIGRlbGV0ZUFsbE1lbW9yaWVzKHJvb21JZCwgdGFibGVOYW1lKSB7XG4gICAgYXdhaXQgdGhpcy5hZGFwdGVyLmRlbGV0ZUFsbE1lbW9yaWVzKHJvb21JZCwgdGFibGVOYW1lKTtcbiAgfVxuICBhc3luYyBjb3VudE1lbW9yaWVzKHJvb21JZCwgdW5pcXVlLCB0YWJsZU5hbWUpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmNvdW50TWVtb3JpZXMocm9vbUlkLCB1bmlxdWUsIHRhYmxlTmFtZSk7XG4gIH1cbiAgYXN5bmMgZ2V0TG9ncyhwYXJhbXMpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldExvZ3MocGFyYW1zKTtcbiAgfVxuICBhc3luYyBkZWxldGVMb2cobG9nSWQpIHtcbiAgICBhd2FpdCB0aGlzLmFkYXB0ZXIuZGVsZXRlTG9nKGxvZ0lkKTtcbiAgfVxuICBhc3luYyBjcmVhdGVXb3JsZCh3b3JsZCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmFkYXB0ZXIuY3JlYXRlV29ybGQod29ybGQpO1xuICB9XG4gIGFzeW5jIGdldFdvcmxkKGlkKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5nZXRXb3JsZChpZCk7XG4gIH1cbiAgYXN5bmMgcmVtb3ZlV29ybGQod29ybGRJZCkge1xuICAgIGF3YWl0IHRoaXMuYWRhcHRlci5yZW1vdmVXb3JsZCh3b3JsZElkKTtcbiAgfVxuICBhc3luYyBnZXRBbGxXb3JsZHMoKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5nZXRBbGxXb3JsZHMoKTtcbiAgfVxuICBhc3luYyB1cGRhdGVXb3JsZCh3b3JsZCkge1xuICAgIGF3YWl0IHRoaXMuYWRhcHRlci51cGRhdGVXb3JsZCh3b3JsZCk7XG4gIH1cbiAgYXN5bmMgZ2V0Um9vbShyb29tSWQpIHtcbiAgICBjb25zdCByb29tcyA9IGF3YWl0IHRoaXMuYWRhcHRlci5nZXRSb29tc0J5SWRzKFtyb29tSWRdKTtcbiAgICBpZiAoIXJvb21zPy5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgIHJldHVybiByb29tc1swXTtcbiAgfVxuICBhc3luYyBnZXRSb29tc0J5SWRzKHJvb21JZHMpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldFJvb21zQnlJZHMocm9vbUlkcyk7XG4gIH1cbiAgYXN5bmMgY3JlYXRlUm9vbSh7IGlkLCBuYW1lLCBzb3VyY2UsIHR5cGUsIGNoYW5uZWxJZCwgc2VydmVySWQsIHdvcmxkSWQgfSkge1xuICAgIGlmICghd29ybGRJZCkgdGhyb3cgbmV3IEVycm9yKFwid29ybGRJZCBpcyByZXF1aXJlZFwiKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmFkYXB0ZXIuY3JlYXRlUm9vbXMoW1xuICAgICAge1xuICAgICAgICBpZCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgc291cmNlLFxuICAgICAgICB0eXBlLFxuICAgICAgICBjaGFubmVsSWQsXG4gICAgICAgIHNlcnZlcklkLFxuICAgICAgICB3b3JsZElkXG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYgKCFyZXMubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gcmVzWzBdO1xuICB9XG4gIGFzeW5jIGNyZWF0ZVJvb21zKHJvb21zKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5jcmVhdGVSb29tcyhyb29tcyk7XG4gIH1cbiAgYXN5bmMgZGVsZXRlUm9vbShyb29tSWQpIHtcbiAgICBhd2FpdCB0aGlzLmFkYXB0ZXIuZGVsZXRlUm9vbShyb29tSWQpO1xuICB9XG4gIGFzeW5jIGRlbGV0ZVJvb21zQnlXb3JsZElkKHdvcmxkSWQpIHtcbiAgICBhd2FpdCB0aGlzLmFkYXB0ZXIuZGVsZXRlUm9vbXNCeVdvcmxkSWQod29ybGRJZCk7XG4gIH1cbiAgYXN5bmMgdXBkYXRlUm9vbShyb29tKSB7XG4gICAgYXdhaXQgdGhpcy5hZGFwdGVyLnVwZGF0ZVJvb20ocm9vbSk7XG4gIH1cbiAgYXN5bmMgZ2V0Um9vbXNGb3JQYXJ0aWNpcGFudChlbnRpdHlJZCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmFkYXB0ZXIuZ2V0Um9vbXNGb3JQYXJ0aWNpcGFudChlbnRpdHlJZCk7XG4gIH1cbiAgYXN5bmMgZ2V0Um9vbXNGb3JQYXJ0aWNpcGFudHModXNlcklkcykge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmFkYXB0ZXIuZ2V0Um9vbXNGb3JQYXJ0aWNpcGFudHModXNlcklkcyk7XG4gIH1cbiAgLy8gZGVwcmVjYXRlIHRoaXMgb25lXG4gIGFzeW5jIGdldFJvb21zKHdvcmxkSWQpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldFJvb21zQnlXb3JsZCh3b3JsZElkKTtcbiAgfVxuICBhc3luYyBnZXRSb29tc0J5V29ybGQod29ybGRJZCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmFkYXB0ZXIuZ2V0Um9vbXNCeVdvcmxkKHdvcmxkSWQpO1xuICB9XG4gIGFzeW5jIGdldFBhcnRpY2lwYW50VXNlclN0YXRlKHJvb21JZCwgZW50aXR5SWQpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldFBhcnRpY2lwYW50VXNlclN0YXRlKHJvb21JZCwgZW50aXR5SWQpO1xuICB9XG4gIGFzeW5jIHNldFBhcnRpY2lwYW50VXNlclN0YXRlKHJvb21JZCwgZW50aXR5SWQsIHN0YXRlKSB7XG4gICAgYXdhaXQgdGhpcy5hZGFwdGVyLnNldFBhcnRpY2lwYW50VXNlclN0YXRlKHJvb21JZCwgZW50aXR5SWQsIHN0YXRlKTtcbiAgfVxuICBhc3luYyBjcmVhdGVSZWxhdGlvbnNoaXAocGFyYW1zKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5jcmVhdGVSZWxhdGlvbnNoaXAocGFyYW1zKTtcbiAgfVxuICBhc3luYyB1cGRhdGVSZWxhdGlvbnNoaXAocmVsYXRpb25zaGlwKSB7XG4gICAgYXdhaXQgdGhpcy5hZGFwdGVyLnVwZGF0ZVJlbGF0aW9uc2hpcChyZWxhdGlvbnNoaXApO1xuICB9XG4gIGFzeW5jIGdldFJlbGF0aW9uc2hpcChwYXJhbXMpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldFJlbGF0aW9uc2hpcChwYXJhbXMpO1xuICB9XG4gIGFzeW5jIGdldFJlbGF0aW9uc2hpcHMocGFyYW1zKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5nZXRSZWxhdGlvbnNoaXBzKHBhcmFtcyk7XG4gIH1cbiAgYXN5bmMgZ2V0Q2FjaGUoa2V5KSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5nZXRDYWNoZShrZXkpO1xuICB9XG4gIGFzeW5jIHNldENhY2hlKGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLnNldENhY2hlKGtleSwgdmFsdWUpO1xuICB9XG4gIGFzeW5jIGRlbGV0ZUNhY2hlKGtleSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmFkYXB0ZXIuZGVsZXRlQ2FjaGUoa2V5KTtcbiAgfVxuICBhc3luYyBjcmVhdGVUYXNrKHRhc2spIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmNyZWF0ZVRhc2sodGFzayk7XG4gIH1cbiAgYXN5bmMgZ2V0VGFza3MocGFyYW1zKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5nZXRUYXNrcyhwYXJhbXMpO1xuICB9XG4gIGFzeW5jIGdldFRhc2soaWQpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldFRhc2soaWQpO1xuICB9XG4gIGFzeW5jIGdldFRhc2tzQnlOYW1lKG5hbWUpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGFwdGVyLmdldFRhc2tzQnlOYW1lKG5hbWUpO1xuICB9XG4gIGFzeW5jIHVwZGF0ZVRhc2soaWQsIHRhc2spIHtcbiAgICBhd2FpdCB0aGlzLmFkYXB0ZXIudXBkYXRlVGFzayhpZCwgdGFzayk7XG4gIH1cbiAgYXN5bmMgZGVsZXRlVGFzayhpZCkge1xuICAgIGF3YWl0IHRoaXMuYWRhcHRlci5kZWxldGVUYXNrKGlkKTtcbiAgfVxuICBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICBpZiAoIXRoaXMuZXZlbnRIYW5kbGVycy5oYXMoZXZlbnQpKSB7XG4gICAgICB0aGlzLmV2ZW50SGFuZGxlcnMuc2V0KGV2ZW50LCBbXSk7XG4gICAgfVxuICAgIHRoaXMuZXZlbnRIYW5kbGVycy5nZXQoZXZlbnQpPy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuICBvZmYoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLmV2ZW50SGFuZGxlcnMuaGFzKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGVycyA9IHRoaXMuZXZlbnRIYW5kbGVycy5nZXQoZXZlbnQpO1xuICAgIGNvbnN0IGluZGV4ID0gaGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgaGFuZGxlcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cbiAgZW1pdChldmVudCwgZGF0YSkge1xuICAgIGlmICghdGhpcy5ldmVudEhhbmRsZXJzLmhhcyhldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHRoaXMuZXZlbnRIYW5kbGVycy5nZXQoZXZlbnQpKSB7XG4gICAgICBoYW5kbGVyKGRhdGEpO1xuICAgIH1cbiAgfVxuICBhc3luYyBzZW5kQ29udHJvbE1lc3NhZ2UocGFyYW1zKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgcm9vbUlkLCBhY3Rpb24sIHRhcmdldCB9ID0gcGFyYW1zO1xuICAgICAgY29uc3QgY29udHJvbE1lc3NhZ2UgPSB7XG4gICAgICAgIHR5cGU6IFwiY29udHJvbFwiLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIHRhcmdldFxuICAgICAgICB9LFxuICAgICAgICByb29tSWRcbiAgICAgIH07XG4gICAgICBhd2FpdCB0aGlzLmVtaXRFdmVudChcIkNPTlRST0xfTUVTU0FHRVwiLCB7XG4gICAgICAgIHJ1bnRpbWU6IHRoaXMsXG4gICAgICAgIG1lc3NhZ2U6IGNvbnRyb2xNZXNzYWdlLFxuICAgICAgICBzb3VyY2U6IFwiYWdlbnRcIlxuICAgICAgfSk7XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgU2VudCBjb250cm9sIG1lc3NhZ2U6ICR7YWN0aW9ufSB0byByb29tICR7cm9vbUlkfWApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihgRXJyb3Igc2VuZGluZyBjb250cm9sIG1lc3NhZ2U6ICR7ZXJyb3J9YCk7XG4gICAgfVxuICB9XG4gIHJlZ2lzdGVyU2VuZEhhbmRsZXIoc291cmNlLCBoYW5kbGVyKSB7XG4gICAgaWYgKHRoaXMuc2VuZEhhbmRsZXJzLmhhcyhzb3VyY2UpKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKGBTZW5kIGhhbmRsZXIgZm9yIHNvdXJjZSAnJHtzb3VyY2V9JyBhbHJlYWR5IHJlZ2lzdGVyZWQuIE92ZXJ3cml0aW5nLmApO1xuICAgIH1cbiAgICB0aGlzLnNlbmRIYW5kbGVycy5zZXQoc291cmNlLCBoYW5kbGVyKTtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKGBSZWdpc3RlcmVkIHNlbmQgaGFuZGxlciBmb3Igc291cmNlOiAke3NvdXJjZX1gKTtcbiAgfVxuICBhc3luYyBzZW5kTWVzc2FnZVRvVGFyZ2V0KHRhcmdldCwgY29udGVudCkge1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLnNlbmRIYW5kbGVycy5nZXQodGFyZ2V0LnNvdXJjZSk7XG4gICAgaWYgKCFoYW5kbGVyKSB7XG4gICAgICBjb25zdCBlcnJvck1zZyA9IGBObyBzZW5kIGhhbmRsZXIgcmVnaXN0ZXJlZCBmb3Igc291cmNlOiAke3RhcmdldC5zb3VyY2V9YDtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGVycm9yTXNnKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1zZyk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBoYW5kbGVyKHRoaXMsIHRhcmdldCwgY29udGVudCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBFcnJvciBleGVjdXRpbmcgc2VuZCBoYW5kbGVyIGZvciBzb3VyY2UgJHt0YXJnZXQuc291cmNlfTpgLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZ2V0TWVtb3JpZXNCeVdvcmxkSWQocGFyYW1zKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5nZXRNZW1vcmllc0J5V29ybGRJZChwYXJhbXMpO1xuICB9XG4gIGFzeW5jIHJ1bk1pZ3JhdGlvbnMobWlncmF0aW9uc1BhdGhzKSB7XG4gICAgaWYgKHRoaXMuYWRhcHRlciAmJiBcInJ1bk1pZ3JhdGlvbnNcIiBpbiB0aGlzLmFkYXB0ZXIpIHtcbiAgICAgIGF3YWl0IHRoaXMuYWRhcHRlci5ydW5NaWdyYXRpb25zKG1pZ3JhdGlvbnNQYXRocyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oXCJEYXRhYmFzZSBhZGFwdGVyIGRvZXMgbm90IHN1cHBvcnQgbWlncmF0aW9ucy5cIik7XG4gICAgfVxuICB9XG4gIGFzeW5jIGlzUmVhZHkoKSB7XG4gICAgaWYgKCF0aGlzLmFkYXB0ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRhdGFiYXNlIGFkYXB0ZXIgbm90IHJlZ2lzdGVyZWRcIik7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLmFkYXB0ZXIuaXNSZWFkeSgpO1xuICB9XG59O1xuXG4vLyBzcmMvc2V0dGluZ3MudHNcbmltcG9ydCBjcnlwdG8gZnJvbSBcImNyeXB0by1icm93c2VyaWZ5XCI7XG5mdW5jdGlvbiBjcmVhdGVTZXR0aW5nRnJvbUNvbmZpZyhjb25maWdTZXR0aW5nKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogY29uZmlnU2V0dGluZy5uYW1lLFxuICAgIGRlc2NyaXB0aW9uOiBjb25maWdTZXR0aW5nLmRlc2NyaXB0aW9uLFxuICAgIHVzYWdlRGVzY3JpcHRpb246IGNvbmZpZ1NldHRpbmcudXNhZ2VEZXNjcmlwdGlvbiB8fCBcIlwiLFxuICAgIHZhbHVlOiBudWxsLFxuICAgIHJlcXVpcmVkOiBjb25maWdTZXR0aW5nLnJlcXVpcmVkLFxuICAgIHZhbGlkYXRpb246IGNvbmZpZ1NldHRpbmcudmFsaWRhdGlvbiB8fCBudWxsLFxuICAgIHB1YmxpYzogY29uZmlnU2V0dGluZy5wdWJsaWMgfHwgZmFsc2UsXG4gICAgc2VjcmV0OiBjb25maWdTZXR0aW5nLnNlY3JldCB8fCBmYWxzZSxcbiAgICBkZXBlbmRzT246IGNvbmZpZ1NldHRpbmcuZGVwZW5kc09uIHx8IFtdLFxuICAgIG9uU2V0QWN0aW9uOiBjb25maWdTZXR0aW5nLm9uU2V0QWN0aW9uIHx8IG51bGwsXG4gICAgdmlzaWJsZUlmOiBjb25maWdTZXR0aW5nLnZpc2libGVJZiB8fCBudWxsXG4gIH07XG59XG5mdW5jdGlvbiBnZXRTYWx0KCkge1xuICBjb25zdCBzZWNyZXRTYWx0ID0gKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiID8gcHJvY2Vzcy5lbnYuU0VDUkVUX1NBTFQgOiBpbXBvcnQubWV0YS5lbnYuU0VDUkVUX1NBTFQpIHx8IFwic2VjcmV0c2FsdFwiO1xuICBpZiAoIXNlY3JldFNhbHQpIHtcbiAgICBsb2dnZXIuZXJyb3IoXCJTRUNSRVRfU0FMVCBpcyBub3Qgc2V0XCIpO1xuICB9XG4gIGNvbnN0IHNhbHQgPSBzZWNyZXRTYWx0O1xuICBsb2dnZXIuZGVidWcoYEdlbmVyYXRlZCBzYWx0IHdpdGggbGVuZ3RoOiAke3NhbHQubGVuZ3RofSAodHJ1bmNhdGVkIGZvciBzZWN1cml0eSlgKTtcbiAgcmV0dXJuIHNhbHQ7XG59XG5mdW5jdGlvbiBlbmNyeXB0U3RyaW5nVmFsdWUodmFsdWUsIHNhbHQpIHtcbiAgaWYgKHZhbHVlID09PSB2b2lkIDAgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJBdHRlbXB0ZWQgdG8gZW5jcnlwdCB1bmRlZmluZWQgb3IgbnVsbCB2YWx1ZVwiKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiVmFsdWUgaXMgYSBib29sZWFuIG9yIG51bWJlciwgcmV0dXJuaW5nIGFzIGlzXCIpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgbG9nZ2VyLmRlYnVnKGBWYWx1ZSBpcyBub3QgYSBzdHJpbmcgKHR5cGU6ICR7dHlwZW9mIHZhbHVlfSksIHJldHVybmluZyBhcyBpc2ApO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjb25zdCBwYXJ0cyA9IHZhbHVlLnNwbGl0KFwiOlwiKTtcbiAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwb3NzaWJsZUl2ID0gQnVmZmVyLmZyb20ocGFydHNbMF0sIFwiaGV4XCIpO1xuICAgICAgaWYgKHBvc3NpYmxlSXYubGVuZ3RoID09PSAxNikge1xuICAgICAgICBsb2dnZXIuZGVidWcoXCJWYWx1ZSBhcHBlYXJzIHRvIGJlIGFscmVhZHkgZW5jcnlwdGVkLCBza2lwcGluZyByZS1lbmNyeXB0aW9uXCIpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgIH1cbiAgfVxuICBjb25zdCBrZXkgPSBjcnlwdG8uY3JlYXRlSGFzaChcInNoYTI1NlwiKS51cGRhdGUoc2FsdCkuZGlnZXN0KCkuc2xpY2UoMCwgMzIpO1xuICBjb25zdCBpdiA9IGNyeXB0by5yYW5kb21CeXRlcygxNik7XG4gIGNvbnN0IGNpcGhlciA9IGNyeXB0by5jcmVhdGVDaXBoZXJpdihcImFlcy0yNTYtY2JjXCIsIGtleSwgaXYpO1xuICBsZXQgZW5jcnlwdGVkID0gY2lwaGVyLnVwZGF0ZSh2YWx1ZSwgXCJ1dGY4XCIsIFwiaGV4XCIpO1xuICBlbmNyeXB0ZWQgKz0gY2lwaGVyLmZpbmFsKFwiaGV4XCIpO1xuICByZXR1cm4gYCR7aXYudG9TdHJpbmcoXCJoZXhcIil9OiR7ZW5jcnlwdGVkfWA7XG59XG5mdW5jdGlvbiBkZWNyeXB0U3RyaW5nVmFsdWUodmFsdWUsIHNhbHQpIHtcbiAgdHJ5IHtcbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgbG9nZ2VyLmRlYnVnKGBWYWx1ZSBpcyBub3QgYSBzdHJpbmcgKHR5cGU6ICR7dHlwZW9mIHZhbHVlfSksIHJldHVybmluZyBhcyBpc2ApO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBwYXJ0cyA9IHZhbHVlLnNwbGl0KFwiOlwiKTtcbiAgICBpZiAocGFydHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IGl2ID0gQnVmZmVyLmZyb20ocGFydHNbMF0sIFwiaGV4XCIpO1xuICAgIGNvbnN0IGVuY3J5cHRlZCA9IHBhcnRzWzFdO1xuICAgIGlmIChpdi5sZW5ndGggIT09IDE2KSB7XG4gICAgICBpZiAoaXYubGVuZ3RoKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgSW52YWxpZCBJViBsZW5ndGggKCR7aXYubGVuZ3RofSkgLSBleHBlY3RlZCAxNiBieXRlc2ApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBrZXkgPSBjcnlwdG8uY3JlYXRlSGFzaChcInNoYTI1NlwiKS51cGRhdGUoc2FsdCkuZGlnZXN0KCkuc2xpY2UoMCwgMzIpO1xuICAgIGNvbnN0IGRlY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyaXYoXCJhZXMtMjU2LWNiY1wiLCBrZXksIGl2KTtcbiAgICBsZXQgZGVjcnlwdGVkID0gZGVjaXBoZXIudXBkYXRlKGVuY3J5cHRlZCwgXCJoZXhcIiwgXCJ1dGY4XCIpO1xuICAgIGRlY3J5cHRlZCArPSBkZWNpcGhlci5maW5hbChcInV0ZjhcIik7XG4gICAgcmV0dXJuIGRlY3J5cHRlZDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2dnZXIuZXJyb3IoYEVycm9yIGRlY3J5cHRpbmcgdmFsdWU6ICR7ZXJyb3J9YCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBzYWx0U2V0dGluZ1ZhbHVlKHNldHRpbmcsIHNhbHQpIHtcbiAgY29uc3Qgc2V0dGluZ0NvcHkgPSB7IC4uLnNldHRpbmcgfTtcbiAgaWYgKHNldHRpbmcuc2VjcmV0ID09PSB0cnVlICYmIHR5cGVvZiBzZXR0aW5nLnZhbHVlID09PSBcInN0cmluZ1wiICYmIHNldHRpbmcudmFsdWUpIHtcbiAgICBzZXR0aW5nQ29weS52YWx1ZSA9IGVuY3J5cHRTdHJpbmdWYWx1ZShzZXR0aW5nLnZhbHVlLCBzYWx0KTtcbiAgfVxuICByZXR1cm4gc2V0dGluZ0NvcHk7XG59XG5mdW5jdGlvbiB1bnNhbHRTZXR0aW5nVmFsdWUoc2V0dGluZywgc2FsdCkge1xuICBjb25zdCBzZXR0aW5nQ29weSA9IHsgLi4uc2V0dGluZyB9O1xuICBpZiAoc2V0dGluZy5zZWNyZXQgPT09IHRydWUgJiYgdHlwZW9mIHNldHRpbmcudmFsdWUgPT09IFwic3RyaW5nXCIgJiYgc2V0dGluZy52YWx1ZSkge1xuICAgIHNldHRpbmdDb3B5LnZhbHVlID0gZGVjcnlwdFN0cmluZ1ZhbHVlKHNldHRpbmcudmFsdWUsIHNhbHQpO1xuICB9XG4gIHJldHVybiBzZXR0aW5nQ29weTtcbn1cbmZ1bmN0aW9uIHNhbHRXb3JsZFNldHRpbmdzKHdvcmxkU2V0dGluZ3MsIHNhbHQpIHtcbiAgY29uc3Qgc2FsdGVkU2V0dGluZ3MgPSB7fTtcbiAgZm9yIChjb25zdCBba2V5LCBzZXR0aW5nXSBvZiBPYmplY3QuZW50cmllcyh3b3JsZFNldHRpbmdzKSkge1xuICAgIHNhbHRlZFNldHRpbmdzW2tleV0gPSBzYWx0U2V0dGluZ1ZhbHVlKHNldHRpbmcsIHNhbHQpO1xuICB9XG4gIHJldHVybiBzYWx0ZWRTZXR0aW5ncztcbn1cbmZ1bmN0aW9uIHVuc2FsdFdvcmxkU2V0dGluZ3Mod29ybGRTZXR0aW5ncywgc2FsdCkge1xuICBjb25zdCB1bnNhbHRlZFNldHRpbmdzID0ge307XG4gIGZvciAoY29uc3QgW2tleSwgc2V0dGluZ10gb2YgT2JqZWN0LmVudHJpZXMod29ybGRTZXR0aW5ncykpIHtcbiAgICB1bnNhbHRlZFNldHRpbmdzW2tleV0gPSB1bnNhbHRTZXR0aW5nVmFsdWUoc2V0dGluZywgc2FsdCk7XG4gIH1cbiAgcmV0dXJuIHVuc2FsdGVkU2V0dGluZ3M7XG59XG5hc3luYyBmdW5jdGlvbiB1cGRhdGVXb3JsZFNldHRpbmdzKHJ1bnRpbWUsIHNlcnZlcklkLCB3b3JsZFNldHRpbmdzKSB7XG4gIGNvbnN0IHdvcmxkSWQgPSBjcmVhdGVVbmlxdWVVdWlkKHJ1bnRpbWUsIHNlcnZlcklkKTtcbiAgY29uc3Qgd29ybGQgPSBhd2FpdCBydW50aW1lLmdldFdvcmxkKHdvcmxkSWQpO1xuICBpZiAoIXdvcmxkKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBObyB3b3JsZCBmb3VuZCBmb3Igc2VydmVyICR7c2VydmVySWR9YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghd29ybGQubWV0YWRhdGEpIHtcbiAgICB3b3JsZC5tZXRhZGF0YSA9IHt9O1xuICB9XG4gIGNvbnN0IHNhbHQgPSBnZXRTYWx0KCk7XG4gIGNvbnN0IHNhbHRlZFNldHRpbmdzID0gc2FsdFdvcmxkU2V0dGluZ3Mod29ybGRTZXR0aW5ncywgc2FsdCk7XG4gIHdvcmxkLm1ldGFkYXRhLnNldHRpbmdzID0gc2FsdGVkU2V0dGluZ3M7XG4gIGF3YWl0IHJ1bnRpbWUudXBkYXRlV29ybGQod29ybGQpO1xuICByZXR1cm4gdHJ1ZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFdvcmxkU2V0dGluZ3MocnVudGltZSwgc2VydmVySWQpIHtcbiAgY29uc3Qgd29ybGRJZCA9IGNyZWF0ZVVuaXF1ZVV1aWQocnVudGltZSwgc2VydmVySWQpO1xuICBjb25zdCB3b3JsZCA9IGF3YWl0IHJ1bnRpbWUuZ2V0V29ybGQod29ybGRJZCk7XG4gIGlmICghd29ybGQgfHwgIXdvcmxkLm1ldGFkYXRhPy5zZXR0aW5ncykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHNhbHRlZFNldHRpbmdzID0gd29ybGQubWV0YWRhdGEuc2V0dGluZ3M7XG4gIGNvbnN0IHNhbHQgPSBnZXRTYWx0KCk7XG4gIHJldHVybiB1bnNhbHRXb3JsZFNldHRpbmdzKHNhbHRlZFNldHRpbmdzLCBzYWx0KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVPbmJvYXJkaW5nKHJ1bnRpbWUsIHdvcmxkLCBjb25maWcpIHtcbiAgaWYgKHdvcmxkLm1ldGFkYXRhPy5zZXR0aW5ncykge1xuICAgIGxvZ2dlci5pbmZvKGBPbmJvYXJkaW5nIHN0YXRlIGFscmVhZHkgZXhpc3RzIGZvciBzZXJ2ZXIgJHt3b3JsZC5zZXJ2ZXJJZH1gKTtcbiAgICBjb25zdCBzYWx0ZWRTZXR0aW5ncyA9IHdvcmxkLm1ldGFkYXRhLnNldHRpbmdzO1xuICAgIGNvbnN0IHNhbHQgPSBnZXRTYWx0KCk7XG4gICAgcmV0dXJuIHVuc2FsdFdvcmxkU2V0dGluZ3Moc2FsdGVkU2V0dGluZ3MsIHNhbHQpO1xuICB9XG4gIGNvbnN0IHdvcmxkU2V0dGluZ3MgPSB7fTtcbiAgaWYgKGNvbmZpZy5zZXR0aW5ncykge1xuICAgIGZvciAoY29uc3QgW2tleSwgY29uZmlnU2V0dGluZ10gb2YgT2JqZWN0LmVudHJpZXMoY29uZmlnLnNldHRpbmdzKSkge1xuICAgICAgd29ybGRTZXR0aW5nc1trZXldID0gY3JlYXRlU2V0dGluZ0Zyb21Db25maWcoY29uZmlnU2V0dGluZyk7XG4gICAgfVxuICB9XG4gIGlmICghd29ybGQubWV0YWRhdGEpIHtcbiAgICB3b3JsZC5tZXRhZGF0YSA9IHt9O1xuICB9XG4gIHdvcmxkLm1ldGFkYXRhLnNldHRpbmdzID0gd29ybGRTZXR0aW5ncztcbiAgYXdhaXQgcnVudGltZS51cGRhdGVXb3JsZCh3b3JsZCk7XG4gIGxvZ2dlci5pbmZvKGBJbml0aWFsaXplZCBzZXR0aW5ncyBjb25maWcgZm9yIHNlcnZlciAke3dvcmxkLnNlcnZlcklkfWApO1xuICByZXR1cm4gd29ybGRTZXR0aW5ncztcbn1cbmZ1bmN0aW9uIGVuY3J5cHRlZENoYXJhY3RlcihjaGFyYWN0ZXIpIHtcbiAgY29uc3QgZW5jcnlwdGVkQ2hhciA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY2hhcmFjdGVyKSk7XG4gIGNvbnN0IHNhbHQgPSBnZXRTYWx0KCk7XG4gIGlmIChlbmNyeXB0ZWRDaGFyLnNldHRpbmdzPy5zZWNyZXRzKSB7XG4gICAgZW5jcnlwdGVkQ2hhci5zZXR0aW5ncy5zZWNyZXRzID0gZW5jcnlwdE9iamVjdFZhbHVlcyhlbmNyeXB0ZWRDaGFyLnNldHRpbmdzLnNlY3JldHMsIHNhbHQpO1xuICB9XG4gIGlmIChlbmNyeXB0ZWRDaGFyLnNlY3JldHMpIHtcbiAgICBlbmNyeXB0ZWRDaGFyLnNlY3JldHMgPSBlbmNyeXB0T2JqZWN0VmFsdWVzKGVuY3J5cHRlZENoYXIuc2VjcmV0cywgc2FsdCk7XG4gIH1cbiAgcmV0dXJuIGVuY3J5cHRlZENoYXI7XG59XG5mdW5jdGlvbiBkZWNyeXB0ZWRDaGFyYWN0ZXIoY2hhcmFjdGVyLCBfcnVudGltZSkge1xuICBjb25zdCBkZWNyeXB0ZWRDaGFyID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjaGFyYWN0ZXIpKTtcbiAgY29uc3Qgc2FsdCA9IGdldFNhbHQoKTtcbiAgaWYgKGRlY3J5cHRlZENoYXIuc2V0dGluZ3M/LnNlY3JldHMpIHtcbiAgICBkZWNyeXB0ZWRDaGFyLnNldHRpbmdzLnNlY3JldHMgPSBkZWNyeXB0T2JqZWN0VmFsdWVzKGRlY3J5cHRlZENoYXIuc2V0dGluZ3Muc2VjcmV0cywgc2FsdCk7XG4gIH1cbiAgaWYgKGRlY3J5cHRlZENoYXIuc2VjcmV0cykge1xuICAgIGRlY3J5cHRlZENoYXIuc2VjcmV0cyA9IGRlY3J5cHRPYmplY3RWYWx1ZXMoZGVjcnlwdGVkQ2hhci5zZWNyZXRzLCBzYWx0KTtcbiAgfVxuICByZXR1cm4gZGVjcnlwdGVkQ2hhcjtcbn1cbmZ1bmN0aW9uIGVuY3J5cHRPYmplY3RWYWx1ZXMob2JqLCBzYWx0KSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmopKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBlbmNyeXB0U3RyaW5nVmFsdWUodmFsdWUsIHNhbHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZGVjcnlwdE9iamVjdFZhbHVlcyhvYmosIHNhbHQpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlY3J5cHRTdHJpbmdWYWx1ZSh2YWx1ZSwgc2FsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIHNyYy9zZXJ2aWNlcy50c1xudmFyIFNlcnZpY2VCdWlsZGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihzZXJ2aWNlVHlwZSkge1xuICAgIHRoaXMuc2VydmljZVR5cGUgPSBzZXJ2aWNlVHlwZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJcIjtcbiAgfVxuICAvKipcbiAgICogU2V0IHRoZSBzZXJ2aWNlIGRlc2NyaXB0aW9uXG4gICAqL1xuICB3aXRoRGVzY3JpcHRpb24oZGVzY3JpcHRpb24pIHtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgc3RhcnQgZnVuY3Rpb24gZm9yIHRoZSBzZXJ2aWNlXG4gICAqL1xuICB3aXRoU3RhcnQoc3RhcnRGbikge1xuICAgIHRoaXMuc3RhcnRGbiA9IHN0YXJ0Rm47XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgc3RvcCBmdW5jdGlvbiBmb3IgdGhlIHNlcnZpY2VcbiAgICovXG4gIHdpdGhTdG9wKHN0b3BGbikge1xuICAgIHRoaXMuc3RvcEZuID0gc3RvcEZuO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZCB0aGUgc2VydmljZSBjbGFzcyB3aXRoIGFsbCBjb25maWd1cmVkIHByb3BlcnRpZXNcbiAgICovXG4gIGJ1aWxkKCkge1xuICAgIGNvbnN0IHNlcnZpY2VUeXBlID0gdGhpcy5zZXJ2aWNlVHlwZTtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMuZGVzY3JpcHRpb247XG4gICAgY29uc3Qgc3RhcnRGbiA9IHRoaXMuc3RhcnRGbjtcbiAgICBjb25zdCBzdG9wRm4gPSB0aGlzLnN0b3BGbjtcbiAgICByZXR1cm4gY2xhc3MgZXh0ZW5kcyBTZXJ2aWNlMyB7XG4gICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jYXBhYmlsaXR5RGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICAgIHN0YXRpYyB7XG4gICAgICAgIHRoaXMuc2VydmljZVR5cGUgPSBzZXJ2aWNlVHlwZTtcbiAgICAgIH1cbiAgICAgIHN0YXRpYyBhc3luYyBzdGFydChydW50aW1lKSB7XG4gICAgICAgIGlmICghc3RhcnRGbikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU3RhcnQgZnVuY3Rpb24gbm90IGRlZmluZWQgZm9yIHNlcnZpY2UgJHtzZXJ2aWNlVHlwZX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhcnRGbihydW50aW1lKTtcbiAgICAgIH1cbiAgICAgIGFzeW5jIHN0b3AoKSB7XG4gICAgICAgIGlmIChzdG9wRm4pIHtcbiAgICAgICAgICBhd2FpdCBzdG9wRm4oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVTZXJ2aWNlKHNlcnZpY2VUeXBlKSB7XG4gIHJldHVybiBuZXcgU2VydmljZUJ1aWxkZXIoc2VydmljZVR5cGUpO1xufVxuZnVuY3Rpb24gZGVmaW5lU2VydmljZShkZWZpbml0aW9uKSB7XG4gIHJldHVybiBjcmVhdGVTZXJ2aWNlKGRlZmluaXRpb24uc2VydmljZVR5cGUpLndpdGhEZXNjcmlwdGlvbihkZWZpbml0aW9uLmRlc2NyaXB0aW9uKS53aXRoU3RhcnQoZGVmaW5pdGlvbi5zdGFydCkud2l0aFN0b3AoZGVmaW5pdGlvbi5zdG9wIHx8ICgoKSA9PiBQcm9taXNlLnJlc29sdmUoKSkpLmJ1aWxkKCk7XG59XG5cbi8vIHNyYy9zcGVjcy92MS9pbmRleC50c1xudmFyIHYxX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHYxX2V4cG9ydHMsIHtcbiAgQWN0aW9uVGltZWxpbmVUeXBlOiAoKSA9PiBBY3Rpb25UaW1lbGluZVR5cGUsXG4gIEFnZW50UnVudGltZTogKCkgPT4gQWdlbnRSdW50aW1lMyxcbiAgQ2FjaGVLZXlQcmVmaXg6ICgpID0+IENhY2hlS2V5UHJlZml4LFxuICBDYWNoZVN0b3JlOiAoKSA9PiBDYWNoZVN0b3JlLFxuICBHb2FsU3RhdHVzOiAoKSA9PiBHb2FsU3RhdHVzLFxuICBJcnlzRGF0YVR5cGU6ICgpID0+IElyeXNEYXRhVHlwZSxcbiAgSXJ5c01lc3NhZ2VUeXBlOiAoKSA9PiBJcnlzTWVzc2FnZVR5cGUsXG4gIEtub3dsZWRnZVNjb3BlOiAoKSA9PiBLbm93bGVkZ2VTY29wZSxcbiAgTG9nZ2luZ0xldmVsOiAoKSA9PiBMb2dnaW5nTGV2ZWwsXG4gIE1vZGVsQ2xhc3M6ICgpID0+IE1vZGVsQ2xhc3MsXG4gIE1vZGVsUHJvdmlkZXJOYW1lOiAoKSA9PiBNb2RlbFByb3ZpZGVyTmFtZSxcbiAgU2VydmljZTogKCkgPT4gU2VydmljZSxcbiAgU2VydmljZVR5cGU6ICgpID0+IFNlcnZpY2VUeXBlLFxuICBUb2tlbml6ZXJUeXBlOiAoKSA9PiBUb2tlbml6ZXJUeXBlLFxuICBUcmFuc2NyaXB0aW9uUHJvdmlkZXI6ICgpID0+IFRyYW5zY3JpcHRpb25Qcm92aWRlcixcbiAgYXNVVUlEOiAoKSA9PiBhc1VVSUQzLFxuICBjb252ZXJ0Q29udGVudFRvVjE6ICgpID0+IGNvbnZlcnRDb250ZW50VG9WMSxcbiAgY29udmVydENvbnRlbnRUb1YyOiAoKSA9PiBjb252ZXJ0Q29udGVudFRvVjIsXG4gIGNyZWF0ZVRlbXBsYXRlRnVuY3Rpb246ICgpID0+IGNyZWF0ZVRlbXBsYXRlRnVuY3Rpb24sXG4gIGZvcm1hdEFjdG9yczogKCkgPT4gZm9ybWF0QWN0b3JzLFxuICBmb3JtYXRNZXNzYWdlczogKCkgPT4gZm9ybWF0TWVzc2FnZXMzLFxuICBmb3JtYXRQb3N0czogKCkgPT4gZm9ybWF0UG9zdHMzLFxuICBmb3JtYXRUaW1lc3RhbXA6ICgpID0+IGZvcm1hdFRpbWVzdGFtcDMsXG4gIGZyb21WMkFjdGlvbkV4YW1wbGU6ICgpID0+IGZyb21WMkFjdGlvbkV4YW1wbGUsXG4gIGZyb21WMlByb3ZpZGVyOiAoKSA9PiBmcm9tVjJQcm92aWRlcixcbiAgZnJvbVYyU3RhdGU6ICgpID0+IGZyb21WMlN0YXRlLFxuICBnZW5lcmF0ZVV1aWRGcm9tU3RyaW5nOiAoKSA9PiBnZW5lcmF0ZVV1aWRGcm9tU3RyaW5nLFxuICBnZXRBY3RvckRldGFpbHM6ICgpID0+IGdldEFjdG9yRGV0YWlscyxcbiAgZ2V0VGVtcGxhdGVWYWx1ZXM6ICgpID0+IGdldFRlbXBsYXRlVmFsdWVzLFxuICBwcm9jZXNzVGVtcGxhdGU6ICgpID0+IHByb2Nlc3NUZW1wbGF0ZSxcbiAgdG9WMkFjdGlvbkV4YW1wbGU6ICgpID0+IHRvVjJBY3Rpb25FeGFtcGxlLFxuICB0b1YyUHJvdmlkZXI6ICgpID0+IHRvVjJQcm92aWRlcixcbiAgdG9WMlN0YXRlOiAoKSA9PiB0b1YyU3RhdGVcbn0pO1xuXG4vLyBzcmMvc3BlY3MvdjEvbWVzc2FnZXMudHNcbmFzeW5jIGZ1bmN0aW9uIGdldEFjdG9yRGV0YWlscyh7XG4gIHJ1bnRpbWUsXG4gIHJvb21JZFxufSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJnZXRBY3RvckRldGFpbHMgaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdEFjdG9ycyh7IGFjdG9ycyB9KSB7XG4gIGlmICghYWN0b3JzIHx8IGFjdG9ycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gXCJObyBhY3RvcnMgYXZhaWxhYmxlLlwiO1xuICB9XG4gIHJldHVybiBhY3RvcnMubWFwKChhY3RvcikgPT4gYWN0b3IubmFtZSkuam9pbihcIiwgXCIpO1xufVxudmFyIGZvcm1hdE1lc3NhZ2VzMyA9ICh7IG1lc3NhZ2VzLCBhY3RvcnMgfSkgPT4ge1xuICByZXR1cm4gZm9ybWF0TWVzc2FnZXMyKG1lc3NhZ2VzKTtcbn07XG52YXIgZm9ybWF0VGltZXN0YW1wMyA9IChtZXNzYWdlRGF0ZSkgPT4ge1xuICByZXR1cm4gZm9ybWF0VGltZXN0YW1wMihtZXNzYWdlRGF0ZSk7XG59O1xuXG4vLyBzcmMvc3BlY3MvdjEvcG9zdHMudHNcbnZhciBmb3JtYXRQb3N0czMgPSAoe1xuICBtZXNzYWdlcyxcbiAgYWN0b3JzLFxuICBjb252ZXJzYXRpb25IZWFkZXIgPSB0cnVlXG59KSA9PiB7XG4gIGNvbnN0IGVudGl0aWVzID0gYWN0b3JzLm1hcCgoYWN0b3IpID0+ICh7XG4gICAgaWQ6IGFjdG9yLmlkLFxuICAgIG5hbWVzOiBbYWN0b3IubmFtZSwgYWN0b3IudXNlcm5hbWVdLmZpbHRlcihCb29sZWFuKSxcbiAgICBtZXRhZGF0YTogYWN0b3IuZGV0YWlscyxcbiAgICBhZ2VudElkOiB2b2lkIDBcbiAgICAvLyBhZ2VudElkIGlzIG5vdCBhdmFpbGFibGUgb24gdjEgQWN0b3IgYW5kIG5vdCB1c2VkIGJ5IGNvcmVGb3JtYXRQb3N0c1xuICB9KSk7XG4gIHJldHVybiBmb3JtYXRQb3N0czIoe1xuICAgIG1lc3NhZ2VzLFxuICAgIGVudGl0aWVzLFxuICAgIGNvbnZlcnNhdGlvbkhlYWRlclxuICB9KTtcbn07XG5cbi8vIHNyYy9zcGVjcy92MS9ydW50aW1lLnRzXG52YXIgREVGQVVMVF9TRVJWRVJfSUQgPSBcIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMFwiO1xudmFyIEFnZW50UnVudGltZTMgPSBjbGFzcyB7XG4gIGdldCBhZ2VudElkKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmFnZW50SWQ7XG4gIH1cbiAgZ2V0IHNlcnZlclVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5zZXJ2ZXJVcmw7XG4gIH1cbiAgZ2V0IGRhdGFiYXNlQWRhcHRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5kYXRhYmFzZUFkYXB0ZXI7XG4gIH1cbiAgZ2V0IHRva2VuKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnRva2VuO1xuICB9XG4gIGdldCBjaGFyYWN0ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuY2hhcmFjdGVyO1xuICB9XG4gIGdldCBhY3Rpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmFjdGlvbnM7XG4gIH1cbiAgZ2V0IGV2YWx1YXRvcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZXZhbHVhdG9ycztcbiAgfVxuICBnZXQgcHJvdmlkZXJzKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnByb3ZpZGVycztcbiAgfVxuICBnZXQgcGx1Z2lucygpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5wbHVnaW5zO1xuICB9XG4gIGdldCBtb2RlbFByb3ZpZGVyKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLm1vZGVsUHJvdmlkZXI7XG4gIH1cbiAgZ2V0IGltYWdlTW9kZWxQcm92aWRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5pbWFnZU1vZGVsUHJvdmlkZXI7XG4gIH1cbiAgZ2V0IGltYWdlVmlzaW9uTW9kZWxQcm92aWRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5pbWFnZVZpc2lvbk1vZGVsUHJvdmlkZXI7XG4gIH1cbiAgZ2V0IG1lc3NhZ2VNYW5hZ2VyKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLm1lc3NhZ2VNYW5hZ2VyO1xuICB9XG4gIGdldCByb3V0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUucm91dGVzO1xuICB9XG4gIGdldCBzZXJ2aWNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5zZXJ2aWNlcztcbiAgfVxuICBnZXQgZXZlbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmV2ZW50cztcbiAgfVxuICBnZXQgZGVzY3JpcHRpb25NYW5hZ2VyKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmRlc2NyaXB0aW9uTWFuYWdlcjtcbiAgfVxuICBnZXQgZG9jdW1lbnRzTWFuYWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5kb2N1bWVudHNNYW5hZ2VyO1xuICB9XG4gIGdldCBrbm93bGVkZ2VNYW5hZ2VyKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmtub3dsZWRnZU1hbmFnZXI7XG4gIH1cbiAgZ2V0IHJhZ0tub3dsZWRnZU1hbmFnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUucmFnS25vd2xlZGdlTWFuYWdlcjtcbiAgfVxuICBnZXQgbG9yZU1hbmFnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUubG9yZU1hbmFnZXI7XG4gIH1cbiAgZ2V0IGNhY2hlTWFuYWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5jYWNoZU1hbmFnZXI7XG4gIH1cbiAgZ2V0IGNsaWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuY2xpZW50cztcbiAgfVxuICByZWdpc3Rlck1lbW9yeU1hbmFnZXIoX21hbmFnZXIpIHtcbiAgfVxuICBnZXRNZW1vcnlNYW5hZ2VyKF90YWJsZU5hbWUpIHtcbiAgfVxuICBnZXRTZXJ2aWNlKHNlcnZpY2UpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRTZXJ2aWNlKHNlcnZpY2UpO1xuICB9XG4gIGFzeW5jIHJlZ2lzdGVyU2VydmljZShzZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUucmVnaXN0ZXJTZXJ2aWNlKHNlcnZpY2UpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIEFnZW50UnVudGltZS5cbiAgICogQHBhcmFtIG9wdHMgLSBUaGUgb3B0aW9ucyBmb3IgY29uZmlndXJpbmcgdGhlIEFnZW50UnVudGltZS5cbiAgICogQHBhcmFtIG9wdHMuY29udmVyc2F0aW9uTGVuZ3RoIC0gVGhlIG51bWJlciBvZiBtZXNzYWdlcyB0byBob2xkIGluIHRoZSByZWNlbnQgbWVzc2FnZSBjYWNoZS5cbiAgICogQHBhcmFtIG9wdHMudG9rZW4gLSBUaGUgSldUIHRva2VuLCBjYW4gYmUgYSBKV1QgdG9rZW4gaWYgb3V0c2lkZSB3b3JrZXIsIG9yIGFuIE9wZW5BSSB0b2tlbiBpZiBpbnNpZGUgd29ya2VyLlxuICAgKiBAcGFyYW0gb3B0cy5zZXJ2ZXJVcmwgLSBUaGUgVVJMIG9mIHRoZSB3b3JrZXIuXG4gICAqIEBwYXJhbSBvcHRzLmFjdGlvbnMgLSBPcHRpb25hbCBjdXN0b20gYWN0aW9ucy5cbiAgICogQHBhcmFtIG9wdHMuZXZhbHVhdG9ycyAtIE9wdGlvbmFsIGN1c3RvbSBldmFsdWF0b3JzLlxuICAgKiBAcGFyYW0gb3B0cy5zZXJ2aWNlcyAtIE9wdGlvbmFsIGN1c3RvbSBzZXJ2aWNlcy5cbiAgICogQHBhcmFtIG9wdHMubWVtb3J5TWFuYWdlcnMgLSBPcHRpb25hbCBjdXN0b20gbWVtb3J5IG1hbmFnZXJzLlxuICAgKiBAcGFyYW0gb3B0cy5wcm92aWRlcnMgLSBPcHRpb25hbCBjb250ZXh0IHByb3ZpZGVycy5cbiAgICogQHBhcmFtIG9wdHMubW9kZWwgLSBUaGUgbW9kZWwgdG8gdXNlIGZvciBnZW5lcmF0ZVRleHQuXG4gICAqIEBwYXJhbSBvcHRzLmVtYmVkZGluZ01vZGVsIC0gVGhlIG1vZGVsIHRvIHVzZSBmb3IgZW1iZWRkaW5nLlxuICAgKiBAcGFyYW0gb3B0cy5hZ2VudElkIC0gT3B0aW9uYWwgSUQgb2YgdGhlIGFnZW50LlxuICAgKiBAcGFyYW0gb3B0cy5kYXRhYmFzZUFkYXB0ZXIgLSBUaGUgZGF0YWJhc2UgYWRhcHRlciB1c2VkIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBkYXRhYmFzZS5cbiAgICogQHBhcmFtIG9wdHMuZmV0Y2ggLSBDdXN0b20gZmV0Y2ggZnVuY3Rpb24gdG8gdXNlIGZvciBtYWtpbmcgcmVxdWVzdHMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgdGhpcy5fcnVudGltZSA9IG5ldyBBZ2VudFJ1bnRpbWUyKG9wdHMpO1xuICB9XG4gIC8vcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplRGF0YWJhc2UoKSB7fVxuICBhc3luYyBpbml0aWFsaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmluaXRpYWxpemUoKTtcbiAgfVxuICBhc3luYyBzdG9wKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnN0b3AoKTtcbiAgfVxuICBnZXRTZXR0aW5nKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmdldFNldHRpbmcoa2V5KTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBudW1iZXIgb2YgbWVzc2FnZXMgdGhhdCBhcmUga2VwdCBpbiB0aGUgY29udmVyc2F0aW9uIGJ1ZmZlci5cbiAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiByZWNlbnQgbWVzc2FnZXMgdG8gYmUga2VwdCBpbiBtZW1vcnkuXG4gICAqL1xuICBnZXRDb252ZXJzYXRpb25MZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0Q29udmVyc2F0aW9uTGVuZ3RoKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGFuIGFjdGlvbiBmb3IgdGhlIGFnZW50IHRvIHBlcmZvcm0uXG4gICAqIEBwYXJhbSBhY3Rpb24gVGhlIGFjdGlvbiB0byByZWdpc3Rlci5cbiAgICovXG4gIHJlZ2lzdGVyQWN0aW9uKGFjdGlvbikge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnJlZ2lzdGVyQWN0aW9uKGFjdGlvbik7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGFuIGV2YWx1YXRvciB0byBhc3Nlc3MgYW5kIGd1aWRlIHRoZSBhZ2VudCdzIHJlc3BvbnNlcy5cbiAgICogQHBhcmFtIGV2YWx1YXRvciBUaGUgZXZhbHVhdG9yIHRvIHJlZ2lzdGVyLlxuICAgKi9cbiAgcmVnaXN0ZXJFdmFsdWF0b3IoZXZhbHVhdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUucmVnaXN0ZXJFdmFsdWF0b3IoZXZhbHVhdG9yKTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBjb250ZXh0IHByb3ZpZGVyIHRvIHByb3ZpZGUgY29udGV4dCBmb3IgbWVzc2FnZSBnZW5lcmF0aW9uLlxuICAgKiBAcGFyYW0gcHJvdmlkZXIgVGhlIGNvbnRleHQgcHJvdmlkZXIgdG8gcmVnaXN0ZXIuXG4gICAqL1xuICByZWdpc3RlckNvbnRleHRQcm92aWRlcihwcm92aWRlcikge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnJlZ2lzdGVyUHJvdmlkZXIocHJvdmlkZXIpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhbiBhZGFwdGVyIGZvciB0aGUgYWdlbnQgdG8gdXNlLlxuICAgKiBAcGFyYW0gYWRhcHRlciBUaGUgYWRhcHRlciB0byByZWdpc3Rlci5cbiAgICovXG4gIHJlZ2lzdGVyQWRhcHRlcihfYWRhcHRlcikge1xuICB9XG4gIC8qKlxuICAgKiBQcm9jZXNzIHRoZSBhY3Rpb25zIG9mIGEgbWVzc2FnZS5cbiAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gcHJvY2Vzcy5cbiAgICogQHBhcmFtIGNvbnRlbnQgVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UgdG8gcHJvY2VzcyBhY3Rpb25zIGZyb20uXG4gICAqL1xuICBhc3luYyBwcm9jZXNzQWN0aW9ucyhtZXNzYWdlLCByZXNwb25zZXMsIHN0YXRlLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnByb2Nlc3NBY3Rpb25zKFxuICAgICAgbWVzc2FnZSxcbiAgICAgIHJlc3BvbnNlcyxcbiAgICAgIHN0YXRlLFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBFdmFsdWF0ZSB0aGUgbWVzc2FnZSBhbmQgc3RhdGUgdXNpbmcgdGhlIHJlZ2lzdGVyZWQgZXZhbHVhdG9ycy5cbiAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZXZhbHVhdGUuXG4gICAqIEBwYXJhbSBzdGF0ZSBUaGUgc3RhdGUgb2YgdGhlIGFnZW50LlxuICAgKiBAcGFyYW0gZGlkUmVzcG9uZCBXaGV0aGVyIHRoZSBhZ2VudCByZXNwb25kZWQgdG8gdGhlIG1lc3NhZ2UuflxuICAgKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGhhbmRsZXIgY2FsbGJhY2tcbiAgICogQHJldHVybnMgVGhlIHJlc3VsdHMgb2YgdGhlIGV2YWx1YXRpb24uXG4gICAqL1xuICBhc3luYyBldmFsdWF0ZShtZXNzYWdlLCBzdGF0ZSwgZGlkUmVzcG9uZCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5ldmFsdWF0ZShtZXNzYWdlLCBzdGF0ZSwgZGlkUmVzcG9uZCwgY2FsbGJhY2spO1xuICB9XG4gIC8qKlxuICAgKiBFbnN1cmUgdGhlIGV4aXN0ZW5jZSBvZiBhIHBhcnRpY2lwYW50IGluIHRoZSByb29tLiBJZiB0aGUgcGFydGljaXBhbnQgZG9lcyBub3QgZXhpc3QsIHRoZXkgYXJlIGFkZGVkIHRvIHRoZSByb29tLlxuICAgKiBAcGFyYW0gdXNlcklkIC0gVGhlIHVzZXIgSUQgdG8gZW5zdXJlIHRoZSBleGlzdGVuY2Ugb2YuXG4gICAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgdGhlIHBhcnRpY2lwYW50IGNhbm5vdCBiZSBhZGRlZC5cbiAgICovXG4gIGFzeW5jIGVuc3VyZVBhcnRpY2lwYW50RXhpc3RzKF91c2VySWQsIF9yb29tSWQpIHtcbiAgfVxuICAvKipcbiAgICogRW5zdXJlIHRoZSBleGlzdGVuY2Ugb2YgYSB1c2VyIGluIHRoZSBkYXRhYmFzZS4gSWYgdGhlIHVzZXIgZG9lcyBub3QgZXhpc3QsIHRoZXkgYXJlIGFkZGVkIHRvIHRoZSBkYXRhYmFzZS5cbiAgICogQHBhcmFtIHVzZXJJZCAtIFRoZSB1c2VyIElEIHRvIGVuc3VyZSB0aGUgZXhpc3RlbmNlIG9mLlxuICAgKiBAcGFyYW0gdXNlck5hbWUgLSBUaGUgdXNlciBuYW1lIHRvIGVuc3VyZSB0aGUgZXhpc3RlbmNlIG9mLlxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgYXN5bmMgZW5zdXJlVXNlckV4aXN0cyhfdXNlcklkLCBfdXNlck5hbWUsIF9uYW1lLCBfZW1haWwsIF9zb3VyY2UpIHtcbiAgfVxuICBhc3luYyBlbnN1cmVQYXJ0aWNpcGFudEluUm9vbSh1c2VySWQsIHJvb21JZCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmVuc3VyZVBhcnRpY2lwYW50SW5Sb29tKHVzZXJJZCwgcm9vbUlkKTtcbiAgfVxuICBhc3luYyBlbnN1cmVDb25uZWN0aW9uKHVzZXJJZCwgcm9vbUlkLCB1c2VyTmFtZSwgX3VzZXJTY3JlZW5OYW1lLCBzb3VyY2UpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5lbnN1cmVDb25uZWN0aW9uKHtcbiAgICAgIHVzZXJJZCxcbiAgICAgIHJvb21JZCxcbiAgICAgIHVzZXJOYW1lLFxuICAgICAgZW50aXR5SWQ6IFwiXCIsXG4gICAgICBzb3VyY2VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRW5zdXJlIHRoZSBleGlzdGVuY2Ugb2YgYSByb29tIGJldHdlZW4gdGhlIGFnZW50IGFuZCBhIHVzZXIuIElmIG5vIHJvb20gZXhpc3RzLCBhIG5ldyByb29tIGlzIGNyZWF0ZWQgYW5kIHRoZSB1c2VyXG4gICAqIGFuZCBhZ2VudCBhcmUgYWRkZWQgYXMgcGFydGljaXBhbnRzLiBUaGUgcm9vbSBJRCBpcyByZXR1cm5lZC5cbiAgICogQHBhcmFtIHJvb21JZCAtIFRoZSByb29tIElEIHRvIGNyZWF0ZSBhIHJvb20gd2l0aC5cbiAgICogQHJldHVybnMgVGhlIHJvb20gSUQgb2YgdGhlIHJvb20gYmV0d2VlbiB0aGUgYWdlbnQgYW5kIHRoZSB1c2VyLlxuICAgKiBAdGhyb3dzIEFuIGVycm9yIGlmIHRoZSByb29tIGNhbm5vdCBiZSBjcmVhdGVkLlxuICAgKi9cbiAgYXN5bmMgZW5zdXJlUm9vbUV4aXN0cyhyb29tSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5lbnN1cmVSb29tRXhpc3RzKHtcbiAgICAgIGlkOiByb29tSWQsXG4gICAgICBuYW1lOiBcIlVua25vd25cIixcbiAgICAgIHNvdXJjZTogXCJVbmtub3duXCIsXG4gICAgICB0eXBlOiBcIlVua25vd25cIixcbiAgICAgIGNoYW5uZWxJZDogcm9vbUlkLFxuICAgICAgc2VydmVySWQ6IERFRkFVTFRfU0VSVkVSX0lELFxuICAgICAgd29ybGRJZDogREVGQVVMVF9TRVJWRVJfSUQsXG4gICAgICBtZXRhZGF0YToge31cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ29tcG9zZSB0aGUgc3RhdGUgb2YgdGhlIGFnZW50IGludG8gYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCBvciB1c2VkIGZvciByZXNwb25zZSBnZW5lcmF0aW9uLlxuICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBjb21wb3NlIHRoZSBzdGF0ZSBmcm9tLlxuICAgKiBAcmV0dXJucyBUaGUgc3RhdGUgb2YgdGhlIGFnZW50LlxuICAgKi9cbiAgYXN5bmMgY29tcG9zZVN0YXRlKG1lc3NhZ2UsIF9hZGRpdGlvbmFsS2V5cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuY29tcG9zZVN0YXRlKG1lc3NhZ2UsIFtdKTtcbiAgfVxuICBhc3luYyB1cGRhdGVSZWNlbnRNZXNzYWdlU3RhdGUoc3RhdGUpIHtcbiAgICBjb25zdCBjb252ZXJzYXRpb25MZW5ndGggPSB0aGlzLmdldENvbnZlcnNhdGlvbkxlbmd0aCgpO1xuICAgIHRoaXMuX3J1bnRpbWUuZ2V0TWVtb3JpZXMoe1xuICAgICAgcm9vbUlkOiBzdGF0ZS5yb29tSWQsXG4gICAgICBjb3VudDogY29udmVyc2F0aW9uTGVuZ3RoLFxuICAgICAgdW5pcXVlOiBmYWxzZSxcbiAgICAgIHRhYmxlTmFtZTogc3RhdGUudGFibGVOYW1lXG4gICAgfSk7XG4gICAgY29uc3QgcmVjZW50TWVzc2FnZXMgPSBmb3JtYXRNZXNzYWdlczMoe1xuICAgICAgYWN0b3JzOiBzdGF0ZS5hY3RvcnNEYXRhID8/IFtdLFxuICAgICAgbWVzc2FnZXM6IHN0YXRlLnJlY2VudE1lc3NhZ2VzRGF0YT8ubWFwKChtZW1vcnkpID0+IHtcbiAgICAgICAgY29uc3QgbmV3TWVtb3J5ID0geyAuLi5tZW1vcnkgfTtcbiAgICAgICAgZGVsZXRlIG5ld01lbW9yeS5lbWJlZGRpbmc7XG4gICAgICAgIHJldHVybiBuZXdNZW1vcnk7XG4gICAgICB9KVxuICAgIH0pO1xuICAgIGxldCBhbGxBdHRhY2htZW50cyA9IFtdO1xuICAgIGlmIChzdGF0ZS5yZWNlbnRNZXNzYWdlc0RhdGEgJiYgQXJyYXkuaXNBcnJheShzdGF0ZS5yZWNlbnRNZXNzYWdlc0RhdGEpKSB7XG4gICAgICBjb25zdCBsYXN0TWVzc2FnZVdpdGhBdHRhY2htZW50ID0gc3RhdGUucmVjZW50TWVzc2FnZXNEYXRhLmZpbmQoXG4gICAgICAgIChtc2cpID0+IG1zZy5jb250ZW50LmF0dGFjaG1lbnRzICYmIG1zZy5jb250ZW50LmF0dGFjaG1lbnRzLmxlbmd0aCA+IDBcbiAgICAgICk7XG4gICAgICBpZiAobGFzdE1lc3NhZ2VXaXRoQXR0YWNobWVudCkge1xuICAgICAgICBjb25zdCBsYXN0TWVzc2FnZVRpbWUgPSBsYXN0TWVzc2FnZVdpdGhBdHRhY2htZW50Py5jcmVhdGVkQXQgPz8gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3Qgb25lSG91ckJlZm9yZUxhc3RNZXNzYWdlID0gbGFzdE1lc3NhZ2VUaW1lIC0gNjAgKiA2MCAqIDFlMztcbiAgICAgICAgYWxsQXR0YWNobWVudHMgPSBzdGF0ZS5yZWNlbnRNZXNzYWdlc0RhdGEuZmlsdGVyKChtc2cpID0+IHtcbiAgICAgICAgICBjb25zdCBtc2dUaW1lID0gbXNnLmNyZWF0ZWRBdCA/PyBEYXRlLm5vdygpO1xuICAgICAgICAgIHJldHVybiBtc2dUaW1lID49IG9uZUhvdXJCZWZvcmVMYXN0TWVzc2FnZTtcbiAgICAgICAgfSkuZmxhdE1hcCgobXNnKSA9PiBtc2cuY29udGVudC5hdHRhY2htZW50cyB8fCBbXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGZvcm1hdHRlZEF0dGFjaG1lbnRzID0gYWxsQXR0YWNobWVudHMubWFwKFxuICAgICAgKGF0dGFjaG1lbnQpID0+IGBJRDogJHthdHRhY2htZW50LmlkfVxuTmFtZTogJHthdHRhY2htZW50LnRpdGxlfVxuVVJMOiAke2F0dGFjaG1lbnQudXJsfVxuVHlwZTogJHthdHRhY2htZW50LnNvdXJjZX1cbkRlc2NyaXB0aW9uOiAke2F0dGFjaG1lbnQuZGVzY3JpcHRpb259XG5UZXh0OiAke2F0dGFjaG1lbnQudGV4dH1cbiAgICBgXG4gICAgKS5qb2luKFwiXFxuXCIpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zdGF0ZSxcbiAgICAgIHJlY2VudE1lc3NhZ2VzOiBhZGRIZWFkZXIyKFwiIyBDb252ZXJzYXRpb24gTWVzc2FnZXNcIiwgcmVjZW50TWVzc2FnZXMpLFxuICAgICAgcmVjZW50TWVzc2FnZXNEYXRhOiBzdGF0ZS5yZWNlbnRNZXNzYWdlc0RhdGEsXG4gICAgICBhdHRhY2htZW50czogZm9ybWF0dGVkQXR0YWNobWVudHNcbiAgICB9O1xuICB9XG59O1xuXG4vLyBzcmMvc3BlY3MvdjEvdXVpZC50c1xuZnVuY3Rpb24gYXNVVUlEMyhpZCkge1xuICBjb25zdCB2YWxpZFV1aWQgPSB2YWxpZGF0ZVV1aWQyKGlkKTtcbiAgaWYgKCF2YWxpZFV1aWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgVVVJRCBmb3JtYXQ6ICR7aWR9YCk7XG4gIH1cbiAgcmV0dXJuIGlkLnRvTG93ZXJDYXNlKCk7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZVV1aWRGcm9tU3RyaW5nKGlucHV0KSB7XG4gIHJldHVybiBzdHJpbmdUb1V1aWQyKGlucHV0KTtcbn1cblxuLy8gc3JjL3NwZWNzL2luZGV4LnRzXG52YXIgZGVmYXVsdFNwZWMgPSB2Ml9leHBvcnRzO1xuXG4vLyBzcmMvZW50aXRpZXMudHNcbnZhciBlbnRpdHlSZXNvbHV0aW9uVGVtcGxhdGUgPSBgIyBUYXNrOiBSZXNvbHZlIEVudGl0eSBOYW1lXG5NZXNzYWdlIFNlbmRlcjoge3tzZW5kZXJOYW1lfX0gKElEOiB7e3NlbmRlcklkfX0pXG5BZ2VudDoge3thZ2VudE5hbWV9fSAoSUQ6IHt7YWdlbnRJZH19KVxuXG4jIEVudGl0aWVzIGluIFJvb206XG57eyNpZiBlbnRpdGllc0luUm9vbX19XG57e2VudGl0aWVzSW5Sb29tfX1cbnt7L2lmfX1cblxue3tyZWNlbnRNZXNzYWdlc319XG5cbiMgSW5zdHJ1Y3Rpb25zOlxuMS4gQW5hbHl6ZSB0aGUgY29udGV4dCB0byBpZGVudGlmeSB3aGljaCBlbnRpdHkgaXMgYmVpbmcgcmVmZXJlbmNlZFxuMi4gQ29uc2lkZXIgc3BlY2lhbCByZWZlcmVuY2VzIGxpa2UgXCJtZVwiICh0aGUgbWVzc2FnZSBzZW5kZXIpIG9yIFwieW91XCIgKGFnZW50IHRoZSBtZXNzYWdlIGlzIGRpcmVjdGVkIHRvKVxuMy4gTG9vayBmb3IgdXNlcm5hbWVzL2hhbmRsZXMgaW4gc3RhbmRhcmQgZm9ybWF0cyAoZS5nLiBAdXNlcm5hbWUsIHVzZXIjMTIzNClcbjQuIENvbnNpZGVyIGNvbnRleHQgZnJvbSByZWNlbnQgbWVzc2FnZXMgZm9yIHByb25vdW5zIGFuZCByZWZlcmVuY2VzXG41LiBJZiBtdWx0aXBsZSBtYXRjaGVzIGV4aXN0LCB1c2UgY29udGV4dCB0byBkaXNhbWJpZ3VhdGVcbjYuIENvbnNpZGVyIHJlY2VudCBpbnRlcmFjdGlvbnMgYW5kIHJlbGF0aW9uc2hpcCBzdHJlbmd0aCB3aGVuIHJlc29sdmluZyBhbWJpZ3VpdHlcblxuRG8gTk9UIGluY2x1ZGUgYW55IHRoaW5raW5nLCByZWFzb25pbmcsIG9yIDx0aGluaz4gc2VjdGlvbnMgaW4geW91ciByZXNwb25zZS4gXG5HbyBkaXJlY3RseSB0byB0aGUgWE1MIHJlc3BvbnNlIGZvcm1hdCB3aXRob3V0IGFueSBwcmVhbWJsZSBvciBleHBsYW5hdGlvbi5cblxuUmV0dXJuIGFuIFhNTCByZXNwb25zZSB3aXRoOlxuPHJlc3BvbnNlPlxuICA8ZW50aXR5SWQ+ZXhhY3QtaWQtaWYta25vd24tb3RoZXJ3aXNlLW51bGw8L2VudGl0eUlkPlxuICA8dHlwZT5FWEFDVF9NQVRDSCB8IFVTRVJOQU1FX01BVENIIHwgTkFNRV9NQVRDSCB8IFJFTEFUSU9OU0hJUF9NQVRDSCB8IEFNQklHVU9VUyB8IFVOS05PV048L3R5cGU+XG4gIDxtYXRjaGVzPlxuICAgIDxtYXRjaD5cbiAgICAgIDxuYW1lPm1hdGNoZWQtbmFtZTwvbmFtZT5cbiAgICAgIDxyZWFzb24+d2h5IHRoaXMgZW50aXR5IG1hdGNoZXM8L3JlYXNvbj5cbiAgICA8L21hdGNoPlxuICA8L21hdGNoZXM+XG48L3Jlc3BvbnNlPlxuXG5JTVBPUlRBTlQ6IFlvdXIgcmVzcG9uc2UgbXVzdCBPTkxZIGNvbnRhaW4gdGhlIDxyZXNwb25zZT48L3Jlc3BvbnNlPiBYTUwgYmxvY2sgYWJvdmUuIERvIG5vdCBpbmNsdWRlIGFueSB0ZXh0LCB0aGlua2luZywgb3IgcmVhc29uaW5nIGJlZm9yZSBvciBhZnRlciB0aGlzIFhNTCBibG9jay4gU3RhcnQgeW91ciByZXNwb25zZSBpbW1lZGlhdGVseSB3aXRoIDxyZXNwb25zZT4gYW5kIGVuZCB3aXRoIDwvcmVzcG9uc2U+LmA7XG5hc3luYyBmdW5jdGlvbiBnZXRSZWNlbnRJbnRlcmFjdGlvbnMocnVudGltZSwgc291cmNlRW50aXR5SWQsIGNhbmRpZGF0ZUVudGl0aWVzLCByb29tSWQsIHJlbGF0aW9uc2hpcHMpIHtcbiAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICBjb25zdCByZWNlbnRNZXNzYWdlcyA9IGF3YWl0IHJ1bnRpbWUuZ2V0TWVtb3JpZXMoe1xuICAgIHRhYmxlTmFtZTogXCJtZXNzYWdlc1wiLFxuICAgIHJvb21JZCxcbiAgICBjb3VudDogMjBcbiAgICAvLyBSZWR1Y2VkIGZyb20gMTAwIHNpbmNlIHdlIG9ubHkgbmVlZCBjb250ZXh0XG4gIH0pO1xuICBmb3IgKGNvbnN0IGVudGl0eSBvZiBjYW5kaWRhdGVFbnRpdGllcykge1xuICAgIGNvbnN0IGludGVyYWN0aW9ucyA9IFtdO1xuICAgIGxldCBpbnRlcmFjdGlvblNjb3JlID0gMDtcbiAgICBjb25zdCBkaXJlY3RSZXBsaWVzID0gcmVjZW50TWVzc2FnZXMuZmlsdGVyKFxuICAgICAgKG1zZykgPT4gbXNnLmVudGl0eUlkID09PSBzb3VyY2VFbnRpdHlJZCAmJiBtc2cuY29udGVudC5pblJlcGx5VG8gPT09IGVudGl0eS5pZCB8fCBtc2cuZW50aXR5SWQgPT09IGVudGl0eS5pZCAmJiBtc2cuY29udGVudC5pblJlcGx5VG8gPT09IHNvdXJjZUVudGl0eUlkXG4gICAgKTtcbiAgICBpbnRlcmFjdGlvbnMucHVzaCguLi5kaXJlY3RSZXBsaWVzKTtcbiAgICBjb25zdCByZWxhdGlvbnNoaXAgPSByZWxhdGlvbnNoaXBzLmZpbmQoXG4gICAgICAocmVsKSA9PiByZWwuc291cmNlRW50aXR5SWQgPT09IHNvdXJjZUVudGl0eUlkICYmIHJlbC50YXJnZXRFbnRpdHlJZCA9PT0gZW50aXR5LmlkIHx8IHJlbC50YXJnZXRFbnRpdHlJZCA9PT0gc291cmNlRW50aXR5SWQgJiYgcmVsLnNvdXJjZUVudGl0eUlkID09PSBlbnRpdHkuaWRcbiAgICApO1xuICAgIGlmIChyZWxhdGlvbnNoaXA/Lm1ldGFkYXRhPy5pbnRlcmFjdGlvbnMpIHtcbiAgICAgIGludGVyYWN0aW9uU2NvcmUgPSByZWxhdGlvbnNoaXAubWV0YWRhdGEuaW50ZXJhY3Rpb25zO1xuICAgIH1cbiAgICBpbnRlcmFjdGlvblNjb3JlICs9IGRpcmVjdFJlcGxpZXMubGVuZ3RoO1xuICAgIGNvbnN0IHVuaXF1ZUludGVyYWN0aW9ucyA9IFsuLi5uZXcgU2V0KGludGVyYWN0aW9ucyldO1xuICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICBlbnRpdHksXG4gICAgICBpbnRlcmFjdGlvbnM6IHVuaXF1ZUludGVyYWN0aW9ucy5zbGljZSgtNSksXG4gICAgICAvLyBPbmx5IGtlZXAgbGFzdCA1IG1lc3NhZ2VzIGZvciBjb250ZXh0XG4gICAgICBjb3VudDogTWF0aC5yb3VuZChpbnRlcmFjdGlvblNjb3JlKVxuICAgIH0pO1xuICB9XG4gIHJldHVybiByZXN1bHRzLnNvcnQoKGEsIGIpID0+IGIuY291bnQgLSBhLmNvdW50KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGZpbmRFbnRpdHlCeU5hbWUocnVudGltZSwgbWVzc2FnZSwgc3RhdGUpIHtcbiAgY29uc3Qgcm9vbSA9IHN0YXRlLmRhdGEucm9vbSA/PyBhd2FpdCBydW50aW1lLmdldFJvb20obWVzc2FnZS5yb29tSWQpO1xuICBpZiAoIXJvb20pIHtcbiAgICBsb2dnZXIud2FybihcIlJvb20gbm90IGZvdW5kIGZvciBlbnRpdHkgc2VhcmNoXCIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHdvcmxkID0gcm9vbS53b3JsZElkID8gYXdhaXQgcnVudGltZS5nZXRXb3JsZChyb29tLndvcmxkSWQpIDogbnVsbDtcbiAgY29uc3QgZW50aXRpZXNJblJvb20gPSBhd2FpdCBydW50aW1lLmdldEVudGl0aWVzRm9yUm9vbShyb29tLmlkLCB0cnVlKTtcbiAgY29uc3QgZmlsdGVyZWRFbnRpdGllcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgIGVudGl0aWVzSW5Sb29tLm1hcChhc3luYyAoZW50aXR5KSA9PiB7XG4gICAgICBpZiAoIWVudGl0eS5jb21wb25lbnRzKSByZXR1cm4gZW50aXR5O1xuICAgICAgY29uc3Qgd29ybGRSb2xlcyA9IHdvcmxkPy5tZXRhZGF0YT8ucm9sZXMgfHwge307XG4gICAgICBlbnRpdHkuY29tcG9uZW50cyA9IGVudGl0eS5jb21wb25lbnRzLmZpbHRlcigoY29tcG9uZW50KSA9PiB7XG4gICAgICAgIGlmIChjb21wb25lbnQuc291cmNlRW50aXR5SWQgPT09IG1lc3NhZ2UuZW50aXR5SWQpIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAod29ybGQgJiYgY29tcG9uZW50LnNvdXJjZUVudGl0eUlkKSB7XG4gICAgICAgICAgY29uc3Qgc291cmNlUm9sZSA9IHdvcmxkUm9sZXNbY29tcG9uZW50LnNvdXJjZUVudGl0eUlkXTtcbiAgICAgICAgICBpZiAoc291cmNlUm9sZSA9PT0gXCJPV05FUlwiIHx8IHNvdXJjZVJvbGUgPT09IFwiQURNSU5cIikgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBvbmVudC5zb3VyY2VFbnRpdHlJZCA9PT0gcnVudGltZS5hZ2VudElkKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZW50aXR5O1xuICAgIH0pXG4gICk7XG4gIGNvbnN0IHJlbGF0aW9uc2hpcHMgPSBhd2FpdCBydW50aW1lLmdldFJlbGF0aW9uc2hpcHMoe1xuICAgIGVudGl0eUlkOiBtZXNzYWdlLmVudGl0eUlkXG4gIH0pO1xuICBjb25zdCByZWxhdGlvbnNoaXBFbnRpdGllcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgIHJlbGF0aW9uc2hpcHMubWFwKGFzeW5jIChyZWwpID0+IHtcbiAgICAgIGNvbnN0IGVudGl0eUlkID0gcmVsLnNvdXJjZUVudGl0eUlkID09PSBtZXNzYWdlLmVudGl0eUlkID8gcmVsLnRhcmdldEVudGl0eUlkIDogcmVsLnNvdXJjZUVudGl0eUlkO1xuICAgICAgcmV0dXJuIHJ1bnRpbWUuZ2V0RW50aXR5QnlJZChlbnRpdHlJZCk7XG4gICAgfSlcbiAgKTtcbiAgY29uc3QgYWxsRW50aXRpZXMgPSBbXG4gICAgLi4uZmlsdGVyZWRFbnRpdGllcyxcbiAgICAuLi5yZWxhdGlvbnNoaXBFbnRpdGllcy5maWx0ZXIoKGUpID0+IGUgIT09IG51bGwpXG4gIF07XG4gIGNvbnN0IGludGVyYWN0aW9uRGF0YSA9IGF3YWl0IGdldFJlY2VudEludGVyYWN0aW9ucyhcbiAgICBydW50aW1lLFxuICAgIG1lc3NhZ2UuZW50aXR5SWQsXG4gICAgYWxsRW50aXRpZXMsXG4gICAgcm9vbS5pZCxcbiAgICByZWxhdGlvbnNoaXBzXG4gICk7XG4gIGNvbnN0IHByb21wdCA9IGNvbXBvc2VQcm9tcHQoe1xuICAgIHN0YXRlOiB7XG4gICAgICByb29tTmFtZTogcm9vbS5uYW1lIHx8IHJvb20uaWQsXG4gICAgICB3b3JsZE5hbWU6IHdvcmxkPy5uYW1lIHx8IFwiVW5rbm93blwiLFxuICAgICAgZW50aXRpZXNJblJvb206IEpTT04uc3RyaW5naWZ5KGZpbHRlcmVkRW50aXRpZXMsIG51bGwsIDIpLFxuICAgICAgZW50aXR5SWQ6IG1lc3NhZ2UuZW50aXR5SWQsXG4gICAgICBzZW5kZXJJZDogbWVzc2FnZS5lbnRpdHlJZFxuICAgIH0sXG4gICAgdGVtcGxhdGU6IGVudGl0eVJlc29sdXRpb25UZW1wbGF0ZVxuICB9KTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcnVudGltZS51c2VNb2RlbChNb2RlbFR5cGUyLlRFWFRfU01BTEwsIHtcbiAgICBwcm9tcHQsXG4gICAgc3RvcFNlcXVlbmNlczogW11cbiAgfSk7XG4gIGNvbnN0IHJlc29sdXRpb24gPSBwYXJzZUtleVZhbHVlWG1sKHJlc3VsdCk7XG4gIGlmICghcmVzb2x1dGlvbikge1xuICAgIGxvZ2dlci53YXJuKFwiRmFpbGVkIHRvIHBhcnNlIGVudGl0eSByZXNvbHV0aW9uIHJlc3VsdFwiKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAocmVzb2x1dGlvbi50eXBlID09PSBcIkVYQUNUX01BVENIXCIgJiYgcmVzb2x1dGlvbi5lbnRpdHlJZCkge1xuICAgIGNvbnN0IGVudGl0eSA9IGF3YWl0IHJ1bnRpbWUuZ2V0RW50aXR5QnlJZChyZXNvbHV0aW9uLmVudGl0eUlkKTtcbiAgICBpZiAoZW50aXR5KSB7XG4gICAgICBpZiAoZW50aXR5LmNvbXBvbmVudHMpIHtcbiAgICAgICAgY29uc3Qgd29ybGRSb2xlcyA9IHdvcmxkPy5tZXRhZGF0YT8ucm9sZXMgfHwge307XG4gICAgICAgIGVudGl0eS5jb21wb25lbnRzID0gZW50aXR5LmNvbXBvbmVudHMuZmlsdGVyKChjb21wb25lbnQpID0+IHtcbiAgICAgICAgICBpZiAoY29tcG9uZW50LnNvdXJjZUVudGl0eUlkID09PSBtZXNzYWdlLmVudGl0eUlkKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICBpZiAod29ybGQgJiYgY29tcG9uZW50LnNvdXJjZUVudGl0eUlkKSB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2VSb2xlID0gd29ybGRSb2xlc1tjb21wb25lbnQuc291cmNlRW50aXR5SWRdO1xuICAgICAgICAgICAgaWYgKHNvdXJjZVJvbGUgPT09IFwiT1dORVJcIiB8fCBzb3VyY2VSb2xlID09PSBcIkFETUlOXCIpIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29tcG9uZW50LnNvdXJjZUVudGl0eUlkID09PSBydW50aW1lLmFnZW50SWQpIHJldHVybiB0cnVlO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW50aXR5O1xuICAgIH1cbiAgfVxuICBsZXQgbWF0Y2hlc0FycmF5ID0gW107XG4gIGlmIChyZXNvbHV0aW9uLm1hdGNoZXM/Lm1hdGNoKSB7XG4gICAgbWF0Y2hlc0FycmF5ID0gQXJyYXkuaXNBcnJheShyZXNvbHV0aW9uLm1hdGNoZXMubWF0Y2gpID8gcmVzb2x1dGlvbi5tYXRjaGVzLm1hdGNoIDogW3Jlc29sdXRpb24ubWF0Y2hlcy5tYXRjaF07XG4gIH1cbiAgaWYgKG1hdGNoZXNBcnJheS5sZW5ndGggPiAwICYmIG1hdGNoZXNBcnJheVswXT8ubmFtZSkge1xuICAgIGNvbnN0IG1hdGNoTmFtZSA9IG1hdGNoZXNBcnJheVswXS5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgbWF0Y2hpbmdFbnRpdHkgPSBhbGxFbnRpdGllcy5maW5kKChlbnRpdHkpID0+IHtcbiAgICAgIGlmIChlbnRpdHkubmFtZXMuc29tZSgobikgPT4gbi50b0xvd2VyQ2FzZSgpID09PSBtYXRjaE5hbWUpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIHJldHVybiBlbnRpdHkuY29tcG9uZW50cz8uc29tZShcbiAgICAgICAgKGMpID0+IGMuZGF0YS51c2VybmFtZT8udG9Mb3dlckNhc2UoKSA9PT0gbWF0Y2hOYW1lIHx8IGMuZGF0YS5oYW5kbGU/LnRvTG93ZXJDYXNlKCkgPT09IG1hdGNoTmFtZVxuICAgICAgKTtcbiAgICB9KTtcbiAgICBpZiAobWF0Y2hpbmdFbnRpdHkpIHtcbiAgICAgIGlmIChyZXNvbHV0aW9uLnR5cGUgPT09IFwiUkVMQVRJT05TSElQX01BVENIXCIpIHtcbiAgICAgICAgY29uc3QgaW50ZXJhY3Rpb25JbmZvID0gaW50ZXJhY3Rpb25EYXRhLmZpbmQoKGQpID0+IGQuZW50aXR5LmlkID09PSBtYXRjaGluZ0VudGl0eS5pZCk7XG4gICAgICAgIGlmIChpbnRlcmFjdGlvbkluZm8gJiYgaW50ZXJhY3Rpb25JbmZvLmNvdW50ID4gMCkge1xuICAgICAgICAgIHJldHVybiBtYXRjaGluZ0VudGl0eTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoaW5nRW50aXR5O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbnZhciBjcmVhdGVVbmlxdWVVdWlkID0gKHJ1bnRpbWUsIGJhc2VVc2VySWQpID0+IHtcbiAgaWYgKGJhc2VVc2VySWQgPT09IHJ1bnRpbWUuYWdlbnRJZCkge1xuICAgIHJldHVybiBydW50aW1lLmFnZW50SWQ7XG4gIH1cbiAgY29uc3QgY29tYmluZWRTdHJpbmcgPSBgJHtiYXNlVXNlcklkfToke3J1bnRpbWUuYWdlbnRJZH1gO1xuICByZXR1cm4gc3RyaW5nVG9VdWlkKGNvbWJpbmVkU3RyaW5nKTtcbn07XG5hc3luYyBmdW5jdGlvbiBnZXRFbnRpdHlEZXRhaWxzKHtcbiAgcnVudGltZSxcbiAgcm9vbUlkXG59KSB7XG4gIGNvbnN0IFtyb29tLCByb29tRW50aXRpZXNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIHJ1bnRpbWUuZ2V0Um9vbShyb29tSWQpLFxuICAgIHJ1bnRpbWUuZ2V0RW50aXRpZXNGb3JSb29tKHJvb21JZCwgdHJ1ZSlcbiAgXSk7XG4gIGNvbnN0IHVuaXF1ZUVudGl0aWVzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgZm9yIChjb25zdCBlbnRpdHkgb2Ygcm9vbUVudGl0aWVzKSB7XG4gICAgaWYgKHVuaXF1ZUVudGl0aWVzLmhhcyhlbnRpdHkuaWQpKSBjb250aW51ZTtcbiAgICBjb25zdCBhbGxEYXRhID0ge307XG4gICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgZW50aXR5LmNvbXBvbmVudHMgfHwgW10pIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oYWxsRGF0YSwgY29tcG9uZW50LmRhdGEpO1xuICAgIH1cbiAgICBjb25zdCBtZXJnZWREYXRhID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYWxsRGF0YSkpIHtcbiAgICAgIGlmICghbWVyZ2VkRGF0YVtrZXldKSB7XG4gICAgICAgIG1lcmdlZERhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG1lcmdlZERhdGFba2V5XSkgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgbWVyZ2VkRGF0YVtrZXldID0gWy4uLi8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFsuLi5tZXJnZWREYXRhW2tleV0sIC4uLnZhbHVlXSldO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbWVyZ2VkRGF0YVtrZXldID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBtZXJnZWREYXRhW2tleV0gPSB7IC4uLm1lcmdlZERhdGFba2V5XSwgLi4udmFsdWUgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgdW5pcXVlRW50aXRpZXMuc2V0KGVudGl0eS5pZCwge1xuICAgICAgaWQ6IGVudGl0eS5pZCxcbiAgICAgIG5hbWU6IHJvb20/LnNvdXJjZSA/IGVudGl0eS5tZXRhZGF0YVtyb29tLnNvdXJjZV0/Lm5hbWUgfHwgZW50aXR5Lm5hbWVzWzBdIDogZW50aXR5Lm5hbWVzWzBdLFxuICAgICAgbmFtZXM6IGVudGl0eS5uYW1lcyxcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsgLi4ubWVyZ2VkRGF0YSwgLi4uZW50aXR5Lm1ldGFkYXRhIH0pXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20odW5pcXVlRW50aXRpZXMudmFsdWVzKCkpO1xufVxuZnVuY3Rpb24gZm9ybWF0RW50aXRpZXMoeyBlbnRpdGllcyB9KSB7XG4gIGNvbnN0IGVudGl0eVN0cmluZ3MgPSBlbnRpdGllcy5tYXAoKGVudGl0eSkgPT4ge1xuICAgIGNvbnN0IGhlYWRlciA9IGBcIiR7ZW50aXR5Lm5hbWVzLmpvaW4oJ1wiIGFrYSBcIicpfVwiXG5JRDogJHtlbnRpdHkuaWR9JHtlbnRpdHkubWV0YWRhdGEgJiYgT2JqZWN0LmtleXMoZW50aXR5Lm1ldGFkYXRhKS5sZW5ndGggPiAwID8gYFxuRGF0YTogJHtKU09OLnN0cmluZ2lmeShlbnRpdHkubWV0YWRhdGEpfVxuYCA6IFwiXFxuXCJ9YDtcbiAgICByZXR1cm4gaGVhZGVyO1xuICB9KTtcbiAgcmV0dXJuIGVudGl0eVN0cmluZ3Muam9pbihcIlxcblwiKTtcbn1cblxuLy8gc3JjL3NwZWNzL3YyL2VudGl0aWVzLnRzXG5hc3luYyBmdW5jdGlvbiBmaW5kRW50aXR5QnlOYW1lMihydW50aW1lLCBtZXNzYWdlLCBzdGF0ZSkge1xuICBjb25zdCBydCA9IHJ1bnRpbWU7XG4gIHJldHVybiBmaW5kRW50aXR5QnlOYW1lKHJ0LCBtZXNzYWdlLCBzdGF0ZSk7XG59XG52YXIgY3JlYXRlVW5pcXVlVXVpZDIgPSAocnVudGltZSwgYmFzZVVzZXJJZCkgPT4ge1xuICByZXR1cm4gY3JlYXRlVW5pcXVlVXVpZChydW50aW1lLCBiYXNlVXNlcklkKTtcbn07XG5hc3luYyBmdW5jdGlvbiBnZXRFbnRpdHlEZXRhaWxzMih7XG4gIHJ1bnRpbWUsXG4gIHJvb21JZFxufSkge1xuICByZXR1cm4gZ2V0RW50aXR5RGV0YWlscyh7IHJ1bnRpbWUsIHJvb21JZCB9KTtcbn1cbmZ1bmN0aW9uIGZvcm1hdEVudGl0aWVzMih7IGVudGl0aWVzIH0pIHtcbiAgcmV0dXJuIGZvcm1hdEVudGl0aWVzKHsgZW50aXRpZXMgfSk7XG59XG5cbi8vIHNyYy9zcGVjcy92Mi9sb2dnZXIudHNcbnZhciBsb2dnZXIyID0ge1xuICB0cmFjZTogKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBbbWVzc2FnZSA9IFwiXCIsIC4uLnJlc3RdID0gYXJncztcbiAgICByZXR1cm4gbG9nZ2VyLnRyYWNlLmFwcGx5KGxvZ2dlciwgW1N0cmluZyhtZXNzYWdlKSwgLi4ucmVzdF0pO1xuICB9LFxuICBkZWJ1ZzogKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBbbWVzc2FnZSA9IFwiXCIsIC4uLnJlc3RdID0gYXJncztcbiAgICByZXR1cm4gbG9nZ2VyLmRlYnVnLmFwcGx5KGxvZ2dlciwgW1N0cmluZyhtZXNzYWdlKSwgLi4ucmVzdF0pO1xuICB9LFxuICBzdWNjZXNzOiAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IFttZXNzYWdlID0gXCJcIiwgLi4ucmVzdF0gPSBhcmdzO1xuICAgIHJldHVybiBsb2dnZXIuZGVidWcuYXBwbHkobG9nZ2VyLCBbU3RyaW5nKG1lc3NhZ2UpLCAuLi5yZXN0XSk7XG4gIH0sXG4gIHByb2dyZXNzOiAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IFttZXNzYWdlID0gXCJcIiwgLi4ucmVzdF0gPSBhcmdzO1xuICAgIHJldHVybiBsb2dnZXIuZGVidWcuYXBwbHkobG9nZ2VyLCBbU3RyaW5nKG1lc3NhZ2UpLCAuLi5yZXN0XSk7XG4gIH0sXG4gIGxvZzogKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBbbWVzc2FnZSA9IFwiXCIsIC4uLnJlc3RdID0gYXJncztcbiAgICByZXR1cm4gbG9nZ2VyLmluZm8uYXBwbHkobG9nZ2VyLCBbU3RyaW5nKG1lc3NhZ2UpLCAuLi5yZXN0XSk7XG4gIH0sXG4gIGluZm86ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgW21lc3NhZ2UgPSBcIlwiLCAuLi5yZXN0XSA9IGFyZ3M7XG4gICAgcmV0dXJuIGxvZ2dlci5pbmZvLmFwcGx5KGxvZ2dlciwgW1N0cmluZyhtZXNzYWdlKSwgLi4ucmVzdF0pO1xuICB9LFxuICB3YXJuOiAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IFttZXNzYWdlID0gXCJcIiwgLi4ucmVzdF0gPSBhcmdzO1xuICAgIHJldHVybiBsb2dnZXIud2Fybi5hcHBseShsb2dnZXIsIFtTdHJpbmcobWVzc2FnZSksIC4uLnJlc3RdKTtcbiAgfSxcbiAgZXJyb3I6ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgW21lc3NhZ2UgPSBcIlwiLCAuLi5yZXN0XSA9IGFyZ3M7XG4gICAgcmV0dXJuIGxvZ2dlci5lcnJvci5hcHBseShsb2dnZXIsIFtTdHJpbmcobWVzc2FnZSksIC4uLnJlc3RdKTtcbiAgfSxcbiAgZmF0YWw6ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgW21lc3NhZ2UgPSBcIlwiLCAuLi5yZXN0XSA9IGFyZ3M7XG4gICAgcmV0dXJuIGxvZ2dlci5mYXRhbC5hcHBseShsb2dnZXIsIFtTdHJpbmcobWVzc2FnZSksIC4uLnJlc3RdKTtcbiAgfSxcbiAgY2xlYXI6ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgW21lc3NhZ2UgPSBcIlwiLCAuLi5yZXN0XSA9IGFyZ3M7XG4gICAgcmV0dXJuIGxvZ2dlci5jbGVhci5hcHBseShsb2dnZXIsIFtTdHJpbmcobWVzc2FnZSksIC4uLnJlc3RdKTtcbiAgfVxufTtcbnZhciBlbGl6YUxvZ2dlcjIgPSBsb2dnZXIyO1xuXG4vLyBzcmMvc3BlY3MvdjIvcHJvbXB0cy50c1xudmFyIHNob3VsZFJlc3BvbmRUZW1wbGF0ZTIgPSBzaG91bGRSZXNwb25kVGVtcGxhdGU7XG52YXIgbWVzc2FnZUhhbmRsZXJUZW1wbGF0ZTIgPSBtZXNzYWdlSGFuZGxlclRlbXBsYXRlO1xudmFyIHBvc3RDcmVhdGlvblRlbXBsYXRlMiA9IHBvc3RDcmVhdGlvblRlbXBsYXRlO1xudmFyIGJvb2xlYW5Gb290ZXIyID0gYm9vbGVhbkZvb3RlcjtcbnZhciBpbWFnZURlc2NyaXB0aW9uVGVtcGxhdGUyID0gaW1hZ2VEZXNjcmlwdGlvblRlbXBsYXRlO1xuXG4vLyBzcmMvc3BlY3MvdjIvcm9sZXMudHNcbmFzeW5jIGZ1bmN0aW9uIGdldFVzZXJTZXJ2ZXJSb2xlMihydW50aW1lLCBlbnRpdHlJZCwgc2VydmVySWQpIHtcbiAgcmV0dXJuIGdldFVzZXJTZXJ2ZXJSb2xlKHJ1bnRpbWUsIGVudGl0eUlkLCBzZXJ2ZXJJZCk7XG59XG5hc3luYyBmdW5jdGlvbiBmaW5kV29ybGRzRm9yT3duZXIyKHJ1bnRpbWUsIGVudGl0eUlkKSB7XG4gIHJldHVybiBmaW5kV29ybGRzRm9yT3duZXIocnVudGltZSwgZW50aXR5SWQpO1xufVxuXG4vLyBzcmMvc3BlY3MvdjIvcnVudGltZS50c1xudmFyIFNlbWFwaG9yZTIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNvdW50KSB7XG4gICAgdGhpcy5fc2VtcGhvbnJlID0gbmV3IFNlbWFwaG9yZShjb3VudCk7XG4gIH1cbiAgYXN5bmMgYWNxdWlyZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VtcGhvbnJlLmFjcXVpcmUoKTtcbiAgfVxuICByZWxlYXNlKCkge1xuICAgIHJldHVybiB0aGlzLl9zZW1waG9ucmUucmVsZWFzZSgpO1xuICB9XG59O1xudmFyIEFnZW50UnVudGltZTIgPSBjbGFzcyB7XG4gIGdldCBzZXJ2aWNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5zZXJ2aWNlcztcbiAgfVxuICBnZXQgZXZlbnRzKCkge1xuICAgIGlmICh0aGlzLl9ydW50aW1lLmV2ZW50cyBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZXZlbnRzO1xuICAgIH1cbiAgICBjb25zdCBldmVudHNNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIGlmICh0aGlzLl9ydW50aW1lLmV2ZW50cyAmJiB0eXBlb2YgdGhpcy5fcnVudGltZS5ldmVudHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuX3J1bnRpbWUuZXZlbnRzKS5mb3JFYWNoKChba2V5LCBoYW5kbGVyc10pID0+IHtcbiAgICAgICAgZXZlbnRzTWFwLnNldChrZXksIGhhbmRsZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZXZlbnRzTWFwO1xuICB9XG4gIGdldCByb3V0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUucm91dGVzO1xuICB9XG4gIGdldCBhZ2VudElkKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmFnZW50SWQ7XG4gIH1cbiAgZ2V0IGNoYXJhY3RlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5jaGFyYWN0ZXI7XG4gIH1cbiAgZ2V0IHByb3ZpZGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5wcm92aWRlcnM7XG4gIH1cbiAgZ2V0IGFjdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuYWN0aW9ucztcbiAgfVxuICBnZXQgZXZhbHVhdG9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5ldmFsdWF0b3JzO1xuICB9XG4gIGdldCBwbHVnaW5zKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnBsdWdpbnM7XG4gIH1cbiAgZ2V0IGFkYXB0ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuYWRhcHRlcjtcbiAgfVxuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgdGhpcy5fcnVudGltZSA9IG5ldyBBZ2VudFJ1bnRpbWUob3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIHBsdWdpbiB3aXRoIHRoZSBydW50aW1lIGFuZCBpbml0aWFsaXplcyBpdHMgY29tcG9uZW50c1xuICAgKiBAcGFyYW0gcGx1Z2luIFRoZSBwbHVnaW4gdG8gcmVnaXN0ZXJcbiAgICovXG4gIGFzeW5jIHJlZ2lzdGVyUGx1Z2luKHBsdWdpbikge1xuICAgIGNvbnN0IHdyYXBwZWRQbHVnaW4gPSB7XG4gICAgICAuLi5wbHVnaW4sXG4gICAgICBpbml0OiBwbHVnaW4uaW5pdCA/IGFzeW5jIChjb25maWcsIF9ydW50aW1lKSA9PiB7XG4gICAgICAgIHJldHVybiBwbHVnaW4uaW5pdChjb25maWcsIHRoaXMpO1xuICAgICAgfSA6IHZvaWQgMFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUucmVnaXN0ZXJQbHVnaW4od3JhcHBlZFBsdWdpbik7XG4gIH1cbiAgZ2V0QWxsU2VydmljZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuc2VydmljZXM7XG4gIH1cbiAgYXN5bmMgc3RvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5zdG9wKCk7XG4gIH1cbiAgYXN5bmMgaW5pdGlhbGl6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5pbml0aWFsaXplKCk7XG4gIH1cbiAgYXN5bmMgZ2V0Q29ubmVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRDb25uZWN0aW9uKCk7XG4gIH1cbiAgc2V0U2V0dGluZyhrZXksIHZhbHVlLCBzZWNyZXQgPSBmYWxzZSkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnNldFNldHRpbmcoa2V5LCB2YWx1ZSwgc2VjcmV0KTtcbiAgfVxuICBnZXRTZXR0aW5nKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmdldFNldHRpbmcoa2V5KTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBudW1iZXIgb2YgbWVzc2FnZXMgdGhhdCBhcmUga2VwdCBpbiB0aGUgY29udmVyc2F0aW9uIGJ1ZmZlci5cbiAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiByZWNlbnQgbWVzc2FnZXMgdG8gYmUga2VwdCBpbiBtZW1vcnkuXG4gICAqL1xuICBnZXRDb252ZXJzYXRpb25MZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0Q29udmVyc2F0aW9uTGVuZ3RoKCk7XG4gIH1cbiAgcmVnaXN0ZXJEYXRhYmFzZUFkYXB0ZXIoYWRhcHRlcikge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnJlZ2lzdGVyRGF0YWJhc2VBZGFwdGVyKGFkYXB0ZXIpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHByb3ZpZGVyIGZvciB0aGUgYWdlbnQgdG8gdXNlLlxuICAgKiBAcGFyYW0gcHJvdmlkZXIgVGhlIHByb3ZpZGVyIHRvIHJlZ2lzdGVyLlxuICAgKi9cbiAgcmVnaXN0ZXJQcm92aWRlcihwcm92aWRlcikge1xuICAgIGNvbnN0IHdyYXBwZWRQcm92aWRlciA9IHtcbiAgICAgIC4uLnByb3ZpZGVyLFxuICAgICAgZ2V0OiBhc3luYyAoX3J1bnRpbWUsIG1lc3NhZ2UsIHN0YXRlKSA9PiB7XG4gICAgICAgIHJldHVybiBwcm92aWRlci5nZXQodGhpcywgbWVzc2FnZSwgc3RhdGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUucmVnaXN0ZXJQcm92aWRlcih3cmFwcGVkUHJvdmlkZXIpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhbiBhY3Rpb24gZm9yIHRoZSBhZ2VudCB0byBwZXJmb3JtLlxuICAgKiBAcGFyYW0gYWN0aW9uIFRoZSBhY3Rpb24gdG8gcmVnaXN0ZXIuXG4gICAqL1xuICByZWdpc3RlckFjdGlvbihhY3Rpb24pIHtcbiAgICBjb25zdCB3cmFwcGVkQWN0aW9uID0ge1xuICAgICAgLi4uYWN0aW9uLFxuICAgICAgaGFuZGxlcjogYXN5bmMgKF9ydW50aW1lLCBtZXNzYWdlLCBzdGF0ZSwgb3B0aW9uczIsIGNhbGxiYWNrLCByZXNwb25zZXMpID0+IHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5oYW5kbGVyKHRoaXMsIG1lc3NhZ2UsIHN0YXRlLCBvcHRpb25zMiwgY2FsbGJhY2ssIHJlc3BvbnNlcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5yZWdpc3RlckFjdGlvbih3cmFwcGVkQWN0aW9uKTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYW4gZXZhbHVhdG9yIHRvIGFzc2VzcyBhbmQgZ3VpZGUgdGhlIGFnZW50J3MgcmVzcG9uc2VzLlxuICAgKiBAcGFyYW0gZXZhbHVhdG9yIFRoZSBldmFsdWF0b3IgdG8gcmVnaXN0ZXIuXG4gICAqL1xuICByZWdpc3RlckV2YWx1YXRvcihldmFsdWF0b3IpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5yZWdpc3RlckV2YWx1YXRvcihldmFsdWF0b3IpO1xuICB9XG4gIC8qKlxuICAgKiBQcm9jZXNzIHRoZSBhY3Rpb25zIG9mIGEgbWVzc2FnZS5cbiAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gcHJvY2Vzcy5cbiAgICogQHBhcmFtIHJlc3BvbnNlcyBUaGUgYXJyYXkgb2YgcmVzcG9uc2UgbWVtb3JpZXMgdG8gcHJvY2VzcyBhY3Rpb25zIGZyb20uXG4gICAqIEBwYXJhbSBzdGF0ZSBPcHRpb25hbCBzdGF0ZSBvYmplY3QgZm9yIHRoZSBhY3Rpb24gcHJvY2Vzc2luZy5cbiAgICogQHBhcmFtIGNhbGxiYWNrIE9wdGlvbmFsIGNhbGxiYWNrIGhhbmRsZXIgZm9yIGFjdGlvbiByZXN1bHRzLlxuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc0FjdGlvbnMobWVzc2FnZSwgcmVzcG9uc2VzLCBzdGF0ZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5wcm9jZXNzQWN0aW9ucyhtZXNzYWdlLCByZXNwb25zZXMsIHN0YXRlLCBjYWxsYmFjayk7XG4gIH1cbiAgLyoqXG4gICAqIEV2YWx1YXRlIHRoZSBtZXNzYWdlIGFuZCBzdGF0ZSB1c2luZyB0aGUgcmVnaXN0ZXJlZCBldmFsdWF0b3JzLlxuICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBldmFsdWF0ZS5cbiAgICogQHBhcmFtIHN0YXRlIFRoZSBzdGF0ZSBvZiB0aGUgYWdlbnQuXG4gICAqIEBwYXJhbSBkaWRSZXNwb25kIFdoZXRoZXIgdGhlIGFnZW50IHJlc3BvbmRlZCB0byB0aGUgbWVzc2FnZS5+XG4gICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgaGFuZGxlciBjYWxsYmFja1xuICAgKiBAcmV0dXJucyBUaGUgcmVzdWx0cyBvZiB0aGUgZXZhbHVhdGlvbi5cbiAgICovXG4gIGFzeW5jIGV2YWx1YXRlKG1lc3NhZ2UsIHN0YXRlLCBkaWRSZXNwb25kLCBjYWxsYmFjaywgcmVzcG9uc2VzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZXZhbHVhdGUobWVzc2FnZSwgc3RhdGUsIGRpZFJlc3BvbmQsIGNhbGxiYWNrLCByZXNwb25zZXMpO1xuICB9XG4gIGFzeW5jIGVuc3VyZUNvbm5lY3Rpb24oe1xuICAgIGVudGl0eUlkLFxuICAgIHJvb21JZCxcbiAgICB1c2VyTmFtZSxcbiAgICBuYW1lLFxuICAgIHNvdXJjZSxcbiAgICB0eXBlLFxuICAgIGNoYW5uZWxJZCxcbiAgICBzZXJ2ZXJJZCxcbiAgICB3b3JsZElkLFxuICAgIHVzZXJJZFxuICB9KSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZW5zdXJlQ29ubmVjdGlvbih7XG4gICAgICBlbnRpdHlJZCxcbiAgICAgIHJvb21JZCxcbiAgICAgIHVzZXJOYW1lLFxuICAgICAgbmFtZSxcbiAgICAgIHNvdXJjZSxcbiAgICAgIHR5cGUsXG4gICAgICBjaGFubmVsSWQsXG4gICAgICBzZXJ2ZXJJZCxcbiAgICAgIHdvcmxkSWQsXG4gICAgICB1c2VySWRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRW5zdXJlcyBhIHBhcnRpY2lwYW50IGlzIGFkZGVkIHRvIGEgcm9vbSwgY2hlY2tpbmcgdGhhdCB0aGUgZW50aXR5IGV4aXN0cyBmaXJzdFxuICAgKi9cbiAgYXN5bmMgZW5zdXJlUGFydGljaXBhbnRJblJvb20oZW50aXR5SWQsIHJvb21JZCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmVuc3VyZVBhcnRpY2lwYW50SW5Sb29tKGVudGl0eUlkLCByb29tSWQpO1xuICB9XG4gIGFzeW5jIHJlbW92ZVBhcnRpY2lwYW50KGVudGl0eUlkLCByb29tSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5yZW1vdmVQYXJ0aWNpcGFudChlbnRpdHlJZCwgcm9vbUlkKTtcbiAgfVxuICBhc3luYyBnZXRQYXJ0aWNpcGFudHNGb3JFbnRpdHkoZW50aXR5SWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRQYXJ0aWNpcGFudHNGb3JFbnRpdHkoZW50aXR5SWQpO1xuICB9XG4gIGFzeW5jIGdldFBhcnRpY2lwYW50c0ZvclJvb20ocm9vbUlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0UGFydGljaXBhbnRzRm9yUm9vbShyb29tSWQpO1xuICB9XG4gIGFzeW5jIGFkZFBhcnRpY2lwYW50KGVudGl0eUlkLCByb29tSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5hZGRQYXJ0aWNpcGFudChlbnRpdHlJZCwgcm9vbUlkKTtcbiAgfVxuICBhc3luYyBhZGRQYXJ0aWNpcGFudHNSb29tKGVudGl0eUlkcywgcm9vbUlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuYWRkUGFydGljaXBhbnRzUm9vbShlbnRpdHlJZHMsIHJvb21JZCk7XG4gIH1cbiAgLyoqXG4gICAqIEVuc3VyZSB0aGUgZXhpc3RlbmNlIG9mIGEgd29ybGQuXG4gICAqL1xuICBhc3luYyBlbnN1cmVXb3JsZEV4aXN0cyh7IGlkLCBuYW1lLCBzZXJ2ZXJJZCwgbWV0YWRhdGEsIGFnZW50SWQgfSkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmVuc3VyZVdvcmxkRXhpc3RzKHtcbiAgICAgIGlkLFxuICAgICAgbmFtZSxcbiAgICAgIHNlcnZlcklkLFxuICAgICAgbWV0YWRhdGEsXG4gICAgICBhZ2VudElkXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEVuc3VyZSB0aGUgZXhpc3RlbmNlIG9mIGEgcm9vbSBiZXR3ZWVuIHRoZSBhZ2VudCBhbmQgYSB1c2VyLiBJZiBubyByb29tIGV4aXN0cywgYSBuZXcgcm9vbSBpcyBjcmVhdGVkIGFuZCB0aGUgdXNlclxuICAgKiBhbmQgYWdlbnQgYXJlIGFkZGVkIGFzIHBhcnRpY2lwYW50cy4gVGhlIHJvb20gSUQgaXMgcmV0dXJuZWQuXG4gICAqIEBwYXJhbSBlbnRpdHlJZCAtIFRoZSB1c2VyIElEIHRvIGNyZWF0ZSBhIHJvb20gd2l0aC5cbiAgICogQHJldHVybnMgVGhlIHJvb20gSUQgb2YgdGhlIHJvb20gYmV0d2VlbiB0aGUgYWdlbnQgYW5kIHRoZSB1c2VyLlxuICAgKiBAdGhyb3dzIEFuIGVycm9yIGlmIHRoZSByb29tIGNhbm5vdCBiZSBjcmVhdGVkLlxuICAgKi9cbiAgYXN5bmMgZW5zdXJlUm9vbUV4aXN0cyh7IGlkLCBuYW1lLCBzb3VyY2UsIHR5cGUsIGNoYW5uZWxJZCwgc2VydmVySWQsIHdvcmxkSWQsIG1ldGFkYXRhIH0pIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5lbnN1cmVSb29tRXhpc3RzKHtcbiAgICAgIGlkLFxuICAgICAgbmFtZSxcbiAgICAgIHNvdXJjZSxcbiAgICAgIHR5cGUsXG4gICAgICBjaGFubmVsSWQsXG4gICAgICBzZXJ2ZXJJZCxcbiAgICAgIHdvcmxkSWQsXG4gICAgICBtZXRhZGF0YVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDb21wb3NlcyB0aGUgYWdlbnQncyBzdGF0ZSBieSBnYXRoZXJpbmcgZGF0YSBmcm9tIGVuYWJsZWQgcHJvdmlkZXJzLlxuICAgKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIHVzZSBhcyBjb250ZXh0IGZvciBzdGF0ZSBjb21wb3NpdGlvblxuICAgKiBAcGFyYW0gaW5jbHVkZUxpc3QgLSBPcHRpb25hbCBsaXN0IG9mIHByb3ZpZGVyIG5hbWVzIHRvIGluY2x1ZGUsIGZpbHRlcmluZyBvdXQgYWxsIG90aGVyc1xuICAgKiBAcGFyYW0gb25seUluY2x1ZGUgLSBXaGV0aGVyIHRvIG9ubHkgaW5jbHVkZSB0aGUgc3BlY2lmaWVkIHByb3ZpZGVyc1xuICAgKiBAcGFyYW0gc2tpcENhY2hlIC0gV2hldGhlciB0byBza2lwIHRoZSBjYWNoZVxuICAgKiBAcmV0dXJucyBBIFN0YXRlIG9iamVjdCBjb250YWluaW5nIHByb3ZpZGVyIGRhdGEsIHZhbHVlcywgYW5kIHRleHRcbiAgICovXG4gIGFzeW5jIGNvbXBvc2VTdGF0ZShtZXNzYWdlLCBpbmNsdWRlTGlzdCA9IG51bGwsIG9ubHlJbmNsdWRlID0gZmFsc2UsIHNraXBDYWNoZSA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuY29tcG9zZVN0YXRlKG1lc3NhZ2UsIGluY2x1ZGVMaXN0LCBvbmx5SW5jbHVkZSwgc2tpcENhY2hlKTtcbiAgfVxuICBnZXRTZXJ2aWNlKHNlcnZpY2UpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRTZXJ2aWNlKHNlcnZpY2UpO1xuICB9XG4gIGFzeW5jIHJlZ2lzdGVyU2VydmljZShzZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUucmVnaXN0ZXJTZXJ2aWNlKHNlcnZpY2UpO1xuICB9XG4gIHJlZ2lzdGVyTW9kZWwobW9kZWxUeXBlLCBoYW5kbGVyLCBwcm92aWRlciA9IFwidjJcIikge1xuICAgIGNvbnN0IHdyYXBwZWRIYW5kbGVyID0gYXN5bmMgKF9ydW50aW1lLCBwYXJhbXMpID0+IHtcbiAgICAgIHJldHVybiBoYW5kbGVyKHRoaXMsIHBhcmFtcyk7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5yZWdpc3Rlck1vZGVsKG1vZGVsVHlwZSwgd3JhcHBlZEhhbmRsZXIsIHByb3ZpZGVyKTtcbiAgfVxuICBnZXRNb2RlbChtb2RlbFR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRNb2RlbChtb2RlbFR5cGUpO1xuICB9XG4gIC8qKlxuICAgKiBVc2UgYSBtb2RlbCB3aXRoIHN0cm9uZ2x5IHR5cGVkIHBhcmFtZXRlcnMgYW5kIHJldHVybiB2YWx1ZXMgYmFzZWQgb24gbW9kZWwgdHlwZVxuICAgKiBAdGVtcGxhdGUgVCAtIFRoZSBtb2RlbCB0eXBlIHRvIHVzZVxuICAgKiBAdGVtcGxhdGUgUiAtIFRoZSBleHBlY3RlZCByZXR1cm4gdHlwZSwgZGVmYXVsdHMgdG8gdGhlIHR5cGUgZGVmaW5lZCBpbiBNb2RlbFJlc3VsdE1hcFtUXVxuICAgKiBAcGFyYW0ge1R9IG1vZGVsVHlwZSAtIFRoZSB0eXBlIG9mIG1vZGVsIHRvIHVzZVxuICAgKiBAcGFyYW0ge01vZGVsUGFyYW1zTWFwW1RdIHwgYW55fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyBmb3IgdGhlIG1vZGVsLCB0eXBlZCBiYXNlZCBvbiBtb2RlbCB0eXBlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFI+fSAtIFRoZSBtb2RlbCByZXN1bHQsIHR5cGVkIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBnZW5lcmljIHR5cGUgcGFyYW1ldGVyXG4gICAqL1xuICBhc3luYyB1c2VNb2RlbChtb2RlbFR5cGUsIHBhcmFtcykge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnVzZU1vZGVsKG1vZGVsVHlwZSwgcGFyYW1zKTtcbiAgfVxuICByZWdpc3RlckV2ZW50KGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUucmVnaXN0ZXJFdmVudChldmVudCwgaGFuZGxlcik7XG4gIH1cbiAgZ2V0RXZlbnQoZXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRFdmVudChldmVudCk7XG4gIH1cbiAgYXN5bmMgZW1pdEV2ZW50KGV2ZW50LCBwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5lbWl0RXZlbnQoZXZlbnQsIHBhcmFtcyk7XG4gIH1cbiAgYXN5bmMgZW5zdXJlRW1iZWRkaW5nRGltZW5zaW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmVuc3VyZUVtYmVkZGluZ0RpbWVuc2lvbigpO1xuICB9XG4gIHJlZ2lzdGVyVGFza1dvcmtlcih0YXNrSGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnJlZ2lzdGVyVGFza1dvcmtlcih0YXNrSGFuZGxlcik7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHRhc2sgd29ya2VyIGJ5IG5hbWVcbiAgICovXG4gIGdldFRhc2tXb3JrZXIobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmdldFRhc2tXb3JrZXIobmFtZSk7XG4gIH1cbiAgLy8gSW1wbGVtZW50IGRhdGFiYXNlIGFkYXB0ZXIgbWV0aG9kc1xuICBnZXQgZGIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZGIoKTtcbiAgfVxuICBhc3luYyBpbml0KCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmluaXQoKTtcbiAgfVxuICBhc3luYyBjbG9zZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5jbG9zZSgpO1xuICB9XG4gIGFzeW5jIGdldEFnZW50KGFnZW50SWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRBZ2VudChhZ2VudElkKTtcbiAgfVxuICBhc3luYyBnZXRBZ2VudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0QWdlbnRzKCk7XG4gIH1cbiAgYXN5bmMgY3JlYXRlQWdlbnQoYWdlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5jcmVhdGVBZ2VudChhZ2VudCk7XG4gIH1cbiAgYXN5bmMgdXBkYXRlQWdlbnQoYWdlbnRJZCwgYWdlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS51cGRhdGVBZ2VudChhZ2VudElkLCBhZ2VudCk7XG4gIH1cbiAgYXN5bmMgZGVsZXRlQWdlbnQoYWdlbnRJZCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmRlbGV0ZUFnZW50KGFnZW50SWQpO1xuICB9XG4gIGFzeW5jIGVuc3VyZUFnZW50RXhpc3RzKGFnZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZW5zdXJlQWdlbnRFeGlzdHMoYWdlbnQpO1xuICB9XG4gIGFzeW5jIGdldEVudGl0eUJ5SWQoZW50aXR5SWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRFbnRpdHlCeUlkKGVudGl0eUlkKTtcbiAgfVxuICBhc3luYyBnZXRFbnRpdGllc0J5SWRzKGVudGl0eUlkcykge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmdldEVudGl0aWVzQnlJZHMoZW50aXR5SWRzKTtcbiAgfVxuICBhc3luYyBnZXRFbnRpdGllc0ZvclJvb20ocm9vbUlkLCBpbmNsdWRlQ29tcG9uZW50cykge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmdldEVudGl0aWVzRm9yUm9vbShyb29tSWQsIGluY2x1ZGVDb21wb25lbnRzKTtcbiAgfVxuICBhc3luYyBjcmVhdGVFbnRpdHkoZW50aXR5KSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuY3JlYXRlRW50aXR5KGVudGl0eSk7XG4gIH1cbiAgYXN5bmMgY3JlYXRlRW50aXRpZXMoZW50aXRpZXMpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5jcmVhdGVFbnRpdGllcyhlbnRpdGllcyk7XG4gIH1cbiAgYXN5bmMgdXBkYXRlRW50aXR5KGVudGl0eSkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnVwZGF0ZUVudGl0eShlbnRpdHkpO1xuICB9XG4gIGFzeW5jIGdldENvbXBvbmVudChlbnRpdHlJZCwgdHlwZSwgd29ybGRJZCwgc291cmNlRW50aXR5SWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRDb21wb25lbnQoZW50aXR5SWQsIHR5cGUsIHdvcmxkSWQsIHNvdXJjZUVudGl0eUlkKTtcbiAgfVxuICBhc3luYyBnZXRDb21wb25lbnRzKGVudGl0eUlkLCB3b3JsZElkLCBzb3VyY2VFbnRpdHlJZCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmdldENvbXBvbmVudHMoZW50aXR5SWQsIHdvcmxkSWQsIHNvdXJjZUVudGl0eUlkKTtcbiAgfVxuICBhc3luYyBjcmVhdGVDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gIH1cbiAgYXN5bmMgdXBkYXRlQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnVwZGF0ZUNvbXBvbmVudChjb21wb25lbnQpO1xuICB9XG4gIGFzeW5jIGRlbGV0ZUNvbXBvbmVudChjb21wb25lbnRJZCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmRlbGV0ZUNvbXBvbmVudChjb21wb25lbnRJZCk7XG4gIH1cbiAgYXN5bmMgYWRkRW1iZWRkaW5nVG9NZW1vcnkobWVtb3J5KSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuYWRkRW1iZWRkaW5nVG9NZW1vcnkobWVtb3J5KTtcbiAgfVxuICBhc3luYyBnZXRBbGxNZW1vcmllcygpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRBbGxNZW1vcmllcygpO1xuICB9XG4gIGFzeW5jIGNsZWFyQWxsQWdlbnRNZW1vcmllcygpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5jbGVhckFsbEFnZW50TWVtb3JpZXMoKTtcbiAgfVxuICBhc3luYyBnZXRNZW1vcmllcyhwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRNZW1vcmllcyhwYXJhbXMpO1xuICB9XG4gIGFzeW5jIGdldE1lbW9yeUJ5SWQoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRNZW1vcnlCeUlkKGlkKTtcbiAgfVxuICBhc3luYyBnZXRNZW1vcmllc0J5SWRzKGlkcywgdGFibGVOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0TWVtb3JpZXNCeUlkcyhpZHMsIHRhYmxlTmFtZSk7XG4gIH1cbiAgYXN5bmMgZ2V0TWVtb3JpZXNCeVJvb21JZHMocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0TWVtb3JpZXNCeVJvb21JZHMocGFyYW1zKTtcbiAgfVxuICBhc3luYyBnZXRDYWNoZWRFbWJlZGRpbmdzKHBhcmFtcykge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmdldENhY2hlZEVtYmVkZGluZ3MocGFyYW1zKTtcbiAgfVxuICBhc3luYyBsb2cocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUubG9nKHBhcmFtcyk7XG4gIH1cbiAgYXN5bmMgc2VhcmNoTWVtb3JpZXMocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuc2VhcmNoTWVtb3JpZXMocGFyYW1zKTtcbiAgfVxuICBhc3luYyBjcmVhdGVNZW1vcnkobWVtb3J5LCB0YWJsZU5hbWUsIHVuaXF1ZSkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmNyZWF0ZU1lbW9yeShtZW1vcnksIHRhYmxlTmFtZSwgdW5pcXVlKTtcbiAgfVxuICBhc3luYyB1cGRhdGVNZW1vcnkobWVtb3J5KSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUudXBkYXRlTWVtb3J5KG1lbW9yeSk7XG4gIH1cbiAgYXN5bmMgZGVsZXRlTWVtb3J5KG1lbW9yeUlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZGVsZXRlTWVtb3J5KG1lbW9yeUlkKTtcbiAgfVxuICBhc3luYyBkZWxldGVNYW55TWVtb3JpZXMobWVtb3J5SWRzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZGVsZXRlTWFueU1lbW9yaWVzKG1lbW9yeUlkcyk7XG4gIH1cbiAgYXN5bmMgZGVsZXRlQWxsTWVtb3JpZXMocm9vbUlkLCB0YWJsZU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5kZWxldGVBbGxNZW1vcmllcyhyb29tSWQsIHRhYmxlTmFtZSk7XG4gIH1cbiAgYXN5bmMgY291bnRNZW1vcmllcyhyb29tSWQsIHVuaXF1ZSwgdGFibGVOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuY291bnRNZW1vcmllcyhyb29tSWQsIHVuaXF1ZSwgdGFibGVOYW1lKTtcbiAgfVxuICBhc3luYyBnZXRMb2dzKHBhcmFtcykge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmdldExvZ3MocGFyYW1zKTtcbiAgfVxuICBhc3luYyBkZWxldGVMb2cobG9nSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5kZWxldGVMb2cobG9nSWQpO1xuICB9XG4gIGFzeW5jIGNyZWF0ZVdvcmxkKHdvcmxkKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuY3JlYXRlV29ybGQod29ybGQpO1xuICB9XG4gIGFzeW5jIGdldFdvcmxkKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0V29ybGQoaWQpO1xuICB9XG4gIGFzeW5jIHJlbW92ZVdvcmxkKHdvcmxkSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5yZW1vdmVXb3JsZCh3b3JsZElkKTtcbiAgfVxuICBhc3luYyBnZXRBbGxXb3JsZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0QWxsV29ybGRzKCk7XG4gIH1cbiAgYXN5bmMgdXBkYXRlV29ybGQod29ybGQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS51cGRhdGVXb3JsZCh3b3JsZCk7XG4gIH1cbiAgYXN5bmMgZ2V0Um9vbShyb29tSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRSb29tKHJvb21JZCk7XG4gIH1cbiAgYXN5bmMgZ2V0Um9vbXNCeUlkcyhyb29tSWRzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0Um9vbXNCeUlkcyhyb29tSWRzKTtcbiAgfVxuICBhc3luYyBjcmVhdGVSb29tKHsgaWQsIG5hbWUsIHNvdXJjZSwgdHlwZSwgY2hhbm5lbElkLCBzZXJ2ZXJJZCwgd29ybGRJZCB9KSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuY3JlYXRlUm9vbSh7XG4gICAgICBpZCxcbiAgICAgIG5hbWUsXG4gICAgICBzb3VyY2UsXG4gICAgICB0eXBlLFxuICAgICAgY2hhbm5lbElkLFxuICAgICAgc2VydmVySWQsXG4gICAgICB3b3JsZElkXG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgY3JlYXRlUm9vbXMocm9vbXMpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5jcmVhdGVSb29tcyhyb29tcyk7XG4gIH1cbiAgYXN5bmMgZGVsZXRlUm9vbShyb29tSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5kZWxldGVSb29tKHJvb21JZCk7XG4gIH1cbiAgYXN5bmMgZGVsZXRlUm9vbXNCeVdvcmxkSWQod29ybGRJZCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmRlbGV0ZVJvb21zQnlXb3JsZElkKHdvcmxkSWQpO1xuICB9XG4gIGFzeW5jIHVwZGF0ZVJvb20ocm9vbSkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnVwZGF0ZVJvb20ocm9vbSk7XG4gIH1cbiAgYXN5bmMgZ2V0Um9vbXNGb3JQYXJ0aWNpcGFudChlbnRpdHlJZCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmdldFJvb21zRm9yUGFydGljaXBhbnQoZW50aXR5SWQpO1xuICB9XG4gIGFzeW5jIGdldFJvb21zRm9yUGFydGljaXBhbnRzKHVzZXJJZHMpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRSb29tc0ZvclBhcnRpY2lwYW50cyh1c2VySWRzKTtcbiAgfVxuICBhc3luYyBnZXRSb29tcyh3b3JsZElkKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0Um9vbXMod29ybGRJZCk7XG4gIH1cbiAgYXN5bmMgZ2V0Um9vbXNCeVdvcmxkKHdvcmxkSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRSb29tc0J5V29ybGQod29ybGRJZCk7XG4gIH1cbiAgYXN5bmMgZ2V0UGFydGljaXBhbnRVc2VyU3RhdGUocm9vbUlkLCBlbnRpdHlJZCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmdldFBhcnRpY2lwYW50VXNlclN0YXRlKHJvb21JZCwgZW50aXR5SWQpO1xuICB9XG4gIGFzeW5jIHNldFBhcnRpY2lwYW50VXNlclN0YXRlKHJvb21JZCwgZW50aXR5SWQsIHN0YXRlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuc2V0UGFydGljaXBhbnRVc2VyU3RhdGUocm9vbUlkLCBlbnRpdHlJZCwgc3RhdGUpO1xuICB9XG4gIGFzeW5jIGNyZWF0ZVJlbGF0aW9uc2hpcChwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5jcmVhdGVSZWxhdGlvbnNoaXAocGFyYW1zKTtcbiAgfVxuICBhc3luYyB1cGRhdGVSZWxhdGlvbnNoaXAocmVsYXRpb25zaGlwKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUudXBkYXRlUmVsYXRpb25zaGlwKHJlbGF0aW9uc2hpcCk7XG4gIH1cbiAgYXN5bmMgZ2V0UmVsYXRpb25zaGlwKHBhcmFtcykge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmdldFJlbGF0aW9uc2hpcChwYXJhbXMpO1xuICB9XG4gIGFzeW5jIGdldFJlbGF0aW9uc2hpcHMocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0UmVsYXRpb25zaGlwcyhwYXJhbXMpO1xuICB9XG4gIGFzeW5jIGdldENhY2hlKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmdldENhY2hlKGtleSk7XG4gIH1cbiAgYXN5bmMgc2V0Q2FjaGUoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnNldENhY2hlKGtleSwgdmFsdWUpO1xuICB9XG4gIGFzeW5jIGRlbGV0ZUNhY2hlKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmRlbGV0ZUNhY2hlKGtleSk7XG4gIH1cbiAgYXN5bmMgY3JlYXRlVGFzayh0YXNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuY3JlYXRlVGFzayh0YXNrKTtcbiAgfVxuICBhc3luYyBnZXRUYXNrcyhwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRUYXNrcyhwYXJhbXMpO1xuICB9XG4gIGFzeW5jIGdldFRhc2soaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRUYXNrKGlkKTtcbiAgfVxuICBhc3luYyBnZXRUYXNrc0J5TmFtZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0VGFza3NCeU5hbWUobmFtZSk7XG4gIH1cbiAgYXN5bmMgdXBkYXRlVGFzayhpZCwgdGFzaykge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnVwZGF0ZVRhc2soaWQsIHRhc2spO1xuICB9XG4gIGFzeW5jIGRlbGV0ZVRhc2soaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5kZWxldGVUYXNrKGlkKTtcbiAgfVxuICAvLyBFdmVudCBlbWl0dGVyIG1ldGhvZHNcbiAgb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBvZmYoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUub2ZmKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgZW1pdChldmVudCwgZGF0YSkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmVtaXQoZXZlbnQsIGRhdGEpO1xuICB9XG4gIGFzeW5jIHNlbmRDb250cm9sTWVzc2FnZShwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5zZW5kQ29udHJvbE1lc3NhZ2UocGFyYW1zKTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBtZXNzYWdlIHNlbmQgaGFuZGxlciBmb3IgYSBzcGVjaWZpYyBzb3VyY2VcbiAgICogQHBhcmFtIHNvdXJjZSAtIFRoZSBzb3VyY2UgaWRlbnRpZmllciAoZS5nLiwgJ2Rpc2NvcmQnLCAndGVsZWdyYW0nKVxuICAgKiBAcGFyYW0gaGFuZGxlciAtIFRoZSBoYW5kbGVyIGZ1bmN0aW9uIHRvIHNlbmQgbWVzc2FnZXNcbiAgICovXG4gIHJlZ2lzdGVyU2VuZEhhbmRsZXIoc291cmNlLCBoYW5kbGVyKSB7XG4gICAgdGhpcy5fcnVudGltZS5yZWdpc3RlclNlbmRIYW5kbGVyKHNvdXJjZSwgaGFuZGxlcik7XG4gIH1cbiAgLyoqXG4gICAqIFNlbmQgYSBtZXNzYWdlIHRvIGEgc3BlY2lmaWMgdGFyZ2V0XG4gICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgdGFyZ2V0IGluZm9ybWF0aW9uIGluY2x1ZGluZyBzb3VyY2UgYW5kIGNoYW5uZWwvdXNlciBJRFxuICAgKiBAcGFyYW0gY29udGVudCAtIFRoZSBtZXNzYWdlIGNvbnRlbnQgdG8gc2VuZFxuICAgKi9cbiAgYXN5bmMgc2VuZE1lc3NhZ2VUb1RhcmdldCh0YXJnZXQsIGNvbnRlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5zZW5kTWVzc2FnZVRvVGFyZ2V0KHRhcmdldCwgY29udGVudCk7XG4gIH1cbiAgYXN5bmMgZ2V0TWVtb3JpZXNCeVdvcmxkSWQocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWUuZ2V0TWVtb3JpZXNCeVdvcmxkSWQocGFyYW1zKTtcbiAgfVxuICAvLyBSdW4gdHJhY2tpbmcgbWV0aG9kc1xuICBjcmVhdGVSdW5JZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5jcmVhdGVSdW5JZCgpO1xuICB9XG4gIHN0YXJ0UnVuKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLnN0YXJ0UnVuKCk7XG4gIH1cbiAgZW5kUnVuKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lLmVuZFJ1bigpO1xuICB9XG4gIGdldEN1cnJlbnRSdW5JZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZS5nZXRDdXJyZW50UnVuSWQoKTtcbiAgfVxufTtcblxuLy8gc3JjL3NwZWNzL3YyL3NldHRpbmdzLnRzXG5mdW5jdGlvbiBjcmVhdGVTZXR0aW5nRnJvbUNvbmZpZzIoY29uZmlnU2V0dGluZykge1xuICByZXR1cm4gY3JlYXRlU2V0dGluZ0Zyb21Db25maWcoY29uZmlnU2V0dGluZyk7XG59XG5mdW5jdGlvbiBnZXRTYWx0MigpIHtcbiAgcmV0dXJuIGdldFNhbHQoKTtcbn1cbmZ1bmN0aW9uIGVuY3J5cHRTdHJpbmdWYWx1ZTIodmFsdWUsIHNhbHQpIHtcbiAgcmV0dXJuIGVuY3J5cHRTdHJpbmdWYWx1ZSh2YWx1ZSwgc2FsdCk7XG59XG5mdW5jdGlvbiBkZWNyeXB0U3RyaW5nVmFsdWUyKHZhbHVlLCBzYWx0KSB7XG4gIHJldHVybiBkZWNyeXB0U3RyaW5nVmFsdWUodmFsdWUsIHNhbHQpO1xufVxuZnVuY3Rpb24gc2FsdFNldHRpbmdWYWx1ZTIoc2V0dGluZywgc2FsdCkge1xuICByZXR1cm4gc2FsdFNldHRpbmdWYWx1ZShzZXR0aW5nLCBzYWx0KTtcbn1cbmZ1bmN0aW9uIHVuc2FsdFNldHRpbmdWYWx1ZTIoc2V0dGluZywgc2FsdCkge1xuICByZXR1cm4gdW5zYWx0U2V0dGluZ1ZhbHVlKHNldHRpbmcsIHNhbHQpO1xufVxuZnVuY3Rpb24gc2FsdFdvcmxkU2V0dGluZ3MyKHdvcmxkU2V0dGluZ3MsIHNhbHQpIHtcbiAgcmV0dXJuIHNhbHRXb3JsZFNldHRpbmdzKHdvcmxkU2V0dGluZ3MsIHNhbHQpO1xufVxuZnVuY3Rpb24gdW5zYWx0V29ybGRTZXR0aW5nczIod29ybGRTZXR0aW5ncywgc2FsdCkge1xuICByZXR1cm4gdW5zYWx0V29ybGRTZXR0aW5ncyh3b3JsZFNldHRpbmdzLCBzYWx0KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVdvcmxkU2V0dGluZ3MyKHJ1bnRpbWUsIHNlcnZlcklkLCB3b3JsZFNldHRpbmdzKSB7XG4gIHJldHVybiB1cGRhdGVXb3JsZFNldHRpbmdzKHJ1bnRpbWUsIHNlcnZlcklkLCB3b3JsZFNldHRpbmdzKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFdvcmxkU2V0dGluZ3MyKHJ1bnRpbWUsIHNlcnZlcklkKSB7XG4gIHJldHVybiBnZXRXb3JsZFNldHRpbmdzKHJ1bnRpbWUsIHNlcnZlcklkKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVPbmJvYXJkaW5nMihydW50aW1lLCB3b3JsZCwgY29uZmlnKSB7XG4gIHJldHVybiBpbml0aWFsaXplT25ib2FyZGluZyhydW50aW1lLCB3b3JsZCwgY29uZmlnKTtcbn1cbmZ1bmN0aW9uIGVuY3J5cHRlZENoYXJhY3RlcjIoY2hhcmFjdGVyKSB7XG4gIHJldHVybiBlbmNyeXB0ZWRDaGFyYWN0ZXIoY2hhcmFjdGVyKTtcbn1cbmZ1bmN0aW9uIGRlY3J5cHRlZENoYXJhY3RlcjIoY2hhcmFjdGVyLCBydW50aW1lKSB7XG4gIHJldHVybiBkZWNyeXB0ZWRDaGFyYWN0ZXIoY2hhcmFjdGVyLCBydW50aW1lKTtcbn1cbmZ1bmN0aW9uIGVuY3J5cHRPYmplY3RWYWx1ZXMyKG9iaiwgc2FsdCkge1xuICByZXR1cm4gZW5jcnlwdE9iamVjdFZhbHVlcyhvYmosIHNhbHQpO1xufVxuZnVuY3Rpb24gZGVjcnlwdE9iamVjdFZhbHVlczIob2JqLCBzYWx0KSB7XG4gIHJldHVybiBkZWNyeXB0T2JqZWN0VmFsdWVzKG9iaiwgc2FsdCk7XG59XG5cbi8vIHNyYy9zcGVjcy92Mi91dGlscy50c1xudmFyIGNvbXBvc2VQcm9tcHQyID0gKHtcbiAgc3RhdGUsXG4gIHRlbXBsYXRlXG59KSA9PiB7XG4gIHJldHVybiBjb21wb3NlUHJvbXB0KHsgc3RhdGUsIHRlbXBsYXRlIH0pO1xufTtcbnZhciBjb21wb3NlUHJvbXB0RnJvbVN0YXRlMiA9ICh7XG4gIHN0YXRlLFxuICB0ZW1wbGF0ZVxufSkgPT4ge1xuICByZXR1cm4gY29tcG9zZVByb21wdEZyb21TdGF0ZSh7IHN0YXRlLCB0ZW1wbGF0ZSB9KTtcbn07XG52YXIgYWRkSGVhZGVyMiA9IChoZWFkZXIsIGJvZHkpID0+IHtcbiAgcmV0dXJuIGFkZEhlYWRlcihoZWFkZXIsIGJvZHkpO1xufTtcbnZhciBmb3JtYXRQb3N0czIgPSAoe1xuICBtZXNzYWdlcyxcbiAgZW50aXRpZXMsXG4gIGNvbnZlcnNhdGlvbkhlYWRlciA9IHRydWVcbn0pID0+IHtcbiAgcmV0dXJuIGZvcm1hdFBvc3RzKHsgbWVzc2FnZXMsIGVudGl0aWVzLCBjb252ZXJzYXRpb25IZWFkZXIgfSk7XG59O1xudmFyIGZvcm1hdE1lc3NhZ2VzMiA9ICh7XG4gIG1lc3NhZ2VzLFxuICBlbnRpdGllc1xufSkgPT4ge1xuICByZXR1cm4gZm9ybWF0TWVzc2FnZXMoeyBtZXNzYWdlcywgZW50aXRpZXMgfSk7XG59O1xudmFyIGZvcm1hdFRpbWVzdGFtcDIgPSAobWVzc2FnZURhdGUpID0+IHtcbiAgcmV0dXJuIGZvcm1hdFRpbWVzdGFtcChtZXNzYWdlRGF0ZSk7XG59O1xuZnVuY3Rpb24gdmFsaWRhdGVVdWlkMih2YWx1ZSkge1xuICByZXR1cm4gdmFsaWRhdGVVdWlkKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ1RvVXVpZDIodGFyZ2V0KSB7XG4gIHJldHVybiBzdHJpbmdUb1V1aWQodGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIHRydW5jYXRlVG9Db21wbGV0ZVNlbnRlbmNlMih0ZXh0LCBtYXhMZW5ndGgpIHtcbiAgcmV0dXJuIHRydW5jYXRlVG9Db21wbGV0ZVNlbnRlbmNlKHRleHQsIG1heExlbmd0aCk7XG59XG5mdW5jdGlvbiBwYXJzZUtleVZhbHVlWG1sMih0ZXh0KSB7XG4gIHJldHVybiBwYXJzZUtleVZhbHVlWG1sKHRleHQpO1xufVxuZnVuY3Rpb24gcGFyc2VKU09OT2JqZWN0RnJvbVRleHQyKHRleHQpIHtcbiAgcmV0dXJuIHBhcnNlSlNPTk9iamVjdEZyb21UZXh0KHRleHQpO1xufVxuZnVuY3Rpb24gcGFyc2VCb29sZWFuRnJvbVRleHQzKHRleHQpIHtcbiAgcmV0dXJuIHBhcnNlQm9vbGVhbkZyb21UZXh0Mih0ZXh0KTtcbn1cbmZ1bmN0aW9uIHNhZmVSZXBsYWNlcjIoKSB7XG4gIHJldHVybiBzYWZlUmVwbGFjZXIoKTtcbn1cbmZ1bmN0aW9uIHRyaW1Ub2tlbnMyKHRleHQsIG1heFRva2VucywgcnVudGltZSkge1xuICByZXR1cm4gdHJpbVRva2Vucyh0ZXh0LCBtYXhUb2tlbnMsIHJ1bnRpbWUpO1xufVxuXG4vLyBzcmMvc3BlY3MvdjIvc2VydmljZXMudHNcbnZhciBTZXJ2aWNlQnVpbGRlcjIgPSBjbGFzcyBleHRlbmRzIFNlcnZpY2VCdWlsZGVyIHtcbiAgY29uc3RydWN0b3Ioc2VydmljZVR5cGUpIHtcbiAgICBzdXBlcihzZXJ2aWNlVHlwZSk7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiXCI7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVTZXJ2aWNlMihzZXJ2aWNlVHlwZSkge1xuICByZXR1cm4gY3JlYXRlU2VydmljZShzZXJ2aWNlVHlwZSk7XG59XG5mdW5jdGlvbiBkZWZpbmVTZXJ2aWNlMihkZWZpbml0aW9uKSB7XG4gIHJldHVybiBjcmVhdGVTZXJ2aWNlKGRlZmluaXRpb24uc2VydmljZVR5cGUpLndpdGhEZXNjcmlwdGlvbihkZWZpbml0aW9uLmRlc2NyaXB0aW9uKS53aXRoU3RhcnQoZGVmaW5pdGlvbi5zdGFydCkud2l0aFN0b3AoZGVmaW5pdGlvbi5zdG9wIHx8ICgoKSA9PiBQcm9taXNlLnJlc29sdmUoKSkpLmJ1aWxkKCk7XG59XG5cbmV4cG9ydCB7XG4gIGFzVVVJRDIgYXMgYXNVVUlELFxuICBDb250ZW50VHlwZTIgYXMgQ29udGVudFR5cGUsXG4gIE1lbW9yeVR5cGUyIGFzIE1lbW9yeVR5cGUsXG4gIGNyZWF0ZU1lc3NhZ2VNZW1vcnkyIGFzIGNyZWF0ZU1lc3NhZ2VNZW1vcnksXG4gIGlzRG9jdW1lbnRNZXRhZGF0YTIgYXMgaXNEb2N1bWVudE1ldGFkYXRhLFxuICBpc0ZyYWdtZW50TWV0YWRhdGEyIGFzIGlzRnJhZ21lbnRNZXRhZGF0YSxcbiAgaXNNZXNzYWdlTWV0YWRhdGEyIGFzIGlzTWVzc2FnZU1ldGFkYXRhLFxuICBpc0Rlc2NyaXB0aW9uTWV0YWRhdGEyIGFzIGlzRGVzY3JpcHRpb25NZXRhZGF0YSxcbiAgaXNDdXN0b21NZXRhZGF0YTIgYXMgaXNDdXN0b21NZXRhZGF0YSxcbiAgaXNEb2N1bWVudE1lbW9yeTIgYXMgaXNEb2N1bWVudE1lbW9yeSxcbiAgaXNGcmFnbWVudE1lbW9yeTIgYXMgaXNGcmFnbWVudE1lbW9yeSxcbiAgZ2V0TWVtb3J5VGV4dDIgYXMgZ2V0TWVtb3J5VGV4dCxcbiAgS25vd2xlZGdlU2NvcGUzIGFzIEtub3dsZWRnZVNjb3BlLFxuICBDYWNoZUtleVByZWZpeDMgYXMgQ2FjaGVLZXlQcmVmaXgsXG4gIFJvbGUyIGFzIFJvbGUsXG4gIENoYW5uZWxUeXBlMiBhcyBDaGFubmVsVHlwZSxcbiAgQWdlbnRTdGF0dXMyIGFzIEFnZW50U3RhdHVzLFxuICBjcmVhdGVBY3Rpb25SZXN1bHQsXG4gIFNlcnZpY2VUeXBlMyBhcyBTZXJ2aWNlVHlwZSxcbiAgU2VydmljZTMgYXMgU2VydmljZSxcbiAgZ2V0VHlwZWRTZXJ2aWNlMiBhcyBnZXRUeXBlZFNlcnZpY2UsXG4gIGNyZWF0ZVNlcnZpY2VFcnJvcjIgYXMgY3JlYXRlU2VydmljZUVycm9yLFxuICBNb2RlbFR5cGUyIGFzIE1vZGVsVHlwZSxcbiAgVkVDVE9SX0RJTVMyIGFzIFZFQ1RPUl9ESU1TLFxuICBFdmVudFR5cGUyIGFzIEV2ZW50VHlwZSxcbiAgUGxhdGZvcm1QcmVmaXgyIGFzIFBsYXRmb3JtUHJlZml4LFxuICBURUVNb2RlMiBhcyBURUVNb2RlLFxuICBUZWVUeXBlMiBhcyBUZWVUeXBlLFxuICBJVG9rZW5EYXRhU2VydmljZSxcbiAgU09DS0VUX01FU1NBR0VfVFlQRTIgYXMgU09DS0VUX01FU1NBR0VfVFlQRSxcbiAgSVdhbGxldFNlcnZpY2UsXG4gIElMcFNlcnZpY2UsXG4gIElQZGZTZXJ2aWNlLFxuICBJVmlkZW9TZXJ2aWNlLFxuICBJQnJvd3NlclNlcnZpY2UsXG4gIElUcmFuc2NyaXB0aW9uU2VydmljZSxcbiAgSVdlYlNlYXJjaFNlcnZpY2UsXG4gIElFbWFpbFNlcnZpY2UsXG4gIElNZXNzYWdlU2VydmljZSxcbiAgSVBvc3RTZXJ2aWNlLFxuICBTZW50cnksXG4gIGNyZWF0ZUxvZ2dlcixcbiAgbG9nZ2VyLFxuICBlbGl6YUxvZ2dlcixcbiAgY29tcG9zZVByb21wdCxcbiAgY29tcG9zZVByb21wdEZyb21TdGF0ZSxcbiAgYWRkSGVhZGVyLFxuICBmb3JtYXRQb3N0cyxcbiAgZm9ybWF0TWVzc2FnZXMsXG4gIGZvcm1hdFRpbWVzdGFtcCxcbiAgcGFyc2VLZXlWYWx1ZVhtbCxcbiAgcGFyc2VKU09OT2JqZWN0RnJvbVRleHQsXG4gIG5vcm1hbGl6ZUpzb25TdHJpbmcsXG4gIHRydW5jYXRlVG9Db21wbGV0ZVNlbnRlbmNlLFxuICBzcGxpdENodW5rcyxcbiAgdHJpbVRva2VucyxcbiAgc2FmZVJlcGxhY2VyLFxuICBwYXJzZUJvb2xlYW5Gcm9tVGV4dDIgYXMgcGFyc2VCb29sZWFuRnJvbVRleHQsXG4gIHZhbGlkYXRlVXVpZCxcbiAgc3RyaW5nVG9VdWlkLFxuICBnZXRDb250ZW50VHlwZUZyb21NaW1lVHlwZSxcbiAgZ2V0TG9jYWxTZXJ2ZXJVcmwsXG4gIGNoYXJhY3RlclNjaGVtYSxcbiAgdmFsaWRhdGVDaGFyYWN0ZXIsXG4gIHBhcnNlQW5kVmFsaWRhdGVDaGFyYWN0ZXIsXG4gIGlzVmFsaWRDaGFyYWN0ZXIsXG4gIGNvbXBvc2VBY3Rpb25FeGFtcGxlczIgYXMgY29tcG9zZUFjdGlvbkV4YW1wbGVzLFxuICBmb3JtYXRBY3Rpb25OYW1lczIgYXMgZm9ybWF0QWN0aW9uTmFtZXMsXG4gIGZvcm1hdEFjdGlvbnMyIGFzIGZvcm1hdEFjdGlvbnMsXG4gIERhdGFiYXNlQWRhcHRlcjIgYXMgRGF0YWJhc2VBZGFwdGVyLFxuICBmaW5kRW50aXR5QnlOYW1lLFxuICBjcmVhdGVVbmlxdWVVdWlkLFxuICBnZXRFbnRpdHlEZXRhaWxzLFxuICBmb3JtYXRFbnRpdGllcyxcbiAgc2hvdWxkUmVzcG9uZFRlbXBsYXRlLFxuICBtZXNzYWdlSGFuZGxlclRlbXBsYXRlLFxuICBwb3N0Q3JlYXRpb25UZW1wbGF0ZSxcbiAgYm9vbGVhbkZvb3RlcixcbiAgaW1hZ2VEZXNjcmlwdGlvblRlbXBsYXRlLFxuICBnZXRVc2VyU2VydmVyUm9sZSxcbiAgZmluZFdvcmxkc0Zvck93bmVyLFxuICBTZW1hcGhvcmUsXG4gIEFnZW50UnVudGltZSxcbiAgY3JlYXRlU2V0dGluZ0Zyb21Db25maWcsXG4gIGdldFNhbHQsXG4gIGVuY3J5cHRTdHJpbmdWYWx1ZSxcbiAgZGVjcnlwdFN0cmluZ1ZhbHVlLFxuICBzYWx0U2V0dGluZ1ZhbHVlLFxuICB1bnNhbHRTZXR0aW5nVmFsdWUsXG4gIHNhbHRXb3JsZFNldHRpbmdzLFxuICB1bnNhbHRXb3JsZFNldHRpbmdzLFxuICB1cGRhdGVXb3JsZFNldHRpbmdzLFxuICBnZXRXb3JsZFNldHRpbmdzLFxuICBpbml0aWFsaXplT25ib2FyZGluZyxcbiAgZW5jcnlwdGVkQ2hhcmFjdGVyLFxuICBkZWNyeXB0ZWRDaGFyYWN0ZXIsXG4gIGVuY3J5cHRPYmplY3RWYWx1ZXMsXG4gIGRlY3J5cHRPYmplY3RWYWx1ZXMsXG4gIFNlcnZpY2VCdWlsZGVyLFxuICBjcmVhdGVTZXJ2aWNlLFxuICBkZWZpbmVTZXJ2aWNlLFxuICBhc1VVSUQgYXMgYXNVVUlEMixcbiAgTW9kZWxUeXBlIGFzIE1vZGVsVHlwZTIsXG4gIFNlcnZpY2VUeXBlMixcbiAgTWVtb3J5VHlwZSBhcyBNZW1vcnlUeXBlMixcbiAgQ29udGVudFR5cGUgYXMgQ29udGVudFR5cGUyLFxuICBDaGFubmVsVHlwZSBhcyBDaGFubmVsVHlwZTIsXG4gIEFnZW50U3RhdHVzIGFzIEFnZW50U3RhdHVzMixcbiAgS25vd2xlZGdlU2NvcGUyLFxuICBDYWNoZUtleVByZWZpeDIsXG4gIFRFRU1vZGUgYXMgVEVFTW9kZTIsXG4gIFRlZVR5cGUgYXMgVGVlVHlwZTIsXG4gIFJvbGUgYXMgUm9sZTIsXG4gIEV2ZW50VHlwZSBhcyBFdmVudFR5cGUyLFxuICBQbGF0Zm9ybVByZWZpeCBhcyBQbGF0Zm9ybVByZWZpeDIsXG4gIFNPQ0tFVF9NRVNTQUdFX1RZUEUgYXMgU09DS0VUX01FU1NBR0VfVFlQRTIsXG4gIGNyZWF0ZU1lc3NhZ2VNZW1vcnkgYXMgY3JlYXRlTWVzc2FnZU1lbW9yeTIsXG4gIGdldFR5cGVkU2VydmljZSBhcyBnZXRUeXBlZFNlcnZpY2UyLFxuICBpc0RvY3VtZW50TWV0YWRhdGEgYXMgaXNEb2N1bWVudE1ldGFkYXRhMixcbiAgaXNGcmFnbWVudE1ldGFkYXRhIGFzIGlzRnJhZ21lbnRNZXRhZGF0YTIsXG4gIGlzTWVzc2FnZU1ldGFkYXRhIGFzIGlzTWVzc2FnZU1ldGFkYXRhMixcbiAgaXNEZXNjcmlwdGlvbk1ldGFkYXRhIGFzIGlzRGVzY3JpcHRpb25NZXRhZGF0YTIsXG4gIGlzQ3VzdG9tTWV0YWRhdGEgYXMgaXNDdXN0b21NZXRhZGF0YTIsXG4gIGlzRG9jdW1lbnRNZW1vcnkgYXMgaXNEb2N1bWVudE1lbW9yeTIsXG4gIGlzRnJhZ21lbnRNZW1vcnkgYXMgaXNGcmFnbWVudE1lbW9yeTIsXG4gIGdldE1lbW9yeVRleHQgYXMgZ2V0TWVtb3J5VGV4dDIsXG4gIGNyZWF0ZVNlcnZpY2VFcnJvciBhcyBjcmVhdGVTZXJ2aWNlRXJyb3IyLFxuICBWRUNUT1JfRElNUyBhcyBWRUNUT1JfRElNUzIsXG4gIFNlcnZpY2UyLFxuICBjb21wb3NlQWN0aW9uRXhhbXBsZXMgYXMgY29tcG9zZUFjdGlvbkV4YW1wbGVzMixcbiAgZm9ybWF0QWN0aW9uTmFtZXMgYXMgZm9ybWF0QWN0aW9uTmFtZXMyLFxuICBmb3JtYXRBY3Rpb25zIGFzIGZvcm1hdEFjdGlvbnMyLFxuICBEYXRhYmFzZUFkYXB0ZXIgYXMgRGF0YWJhc2VBZGFwdGVyMixcbiAgZmluZEVudGl0eUJ5TmFtZTIsXG4gIGNyZWF0ZVVuaXF1ZVV1aWQyLFxuICBnZXRFbnRpdHlEZXRhaWxzMixcbiAgZm9ybWF0RW50aXRpZXMyLFxuICBsb2dnZXIyLFxuICBlbGl6YUxvZ2dlcjIsXG4gIHNob3VsZFJlc3BvbmRUZW1wbGF0ZTIsXG4gIG1lc3NhZ2VIYW5kbGVyVGVtcGxhdGUyLFxuICBwb3N0Q3JlYXRpb25UZW1wbGF0ZTIsXG4gIGJvb2xlYW5Gb290ZXIyLFxuICBpbWFnZURlc2NyaXB0aW9uVGVtcGxhdGUyLFxuICBnZXRVc2VyU2VydmVyUm9sZTIsXG4gIGZpbmRXb3JsZHNGb3JPd25lcjIsXG4gIFNlbWFwaG9yZTIsXG4gIEFnZW50UnVudGltZTIsXG4gIGNyZWF0ZVNldHRpbmdGcm9tQ29uZmlnMixcbiAgZ2V0U2FsdDIsXG4gIGVuY3J5cHRTdHJpbmdWYWx1ZTIsXG4gIGRlY3J5cHRTdHJpbmdWYWx1ZTIsXG4gIHNhbHRTZXR0aW5nVmFsdWUyLFxuICB1bnNhbHRTZXR0aW5nVmFsdWUyLFxuICBzYWx0V29ybGRTZXR0aW5nczIsXG4gIHVuc2FsdFdvcmxkU2V0dGluZ3MyLFxuICB1cGRhdGVXb3JsZFNldHRpbmdzMixcbiAgZ2V0V29ybGRTZXR0aW5nczIsXG4gIGluaXRpYWxpemVPbmJvYXJkaW5nMixcbiAgZW5jcnlwdGVkQ2hhcmFjdGVyMixcbiAgZGVjcnlwdGVkQ2hhcmFjdGVyMixcbiAgZW5jcnlwdE9iamVjdFZhbHVlczIsXG4gIGRlY3J5cHRPYmplY3RWYWx1ZXMyLFxuICBjb21wb3NlUHJvbXB0MixcbiAgY29tcG9zZVByb21wdEZyb21TdGF0ZTIsXG4gIGFkZEhlYWRlcjIsXG4gIGZvcm1hdFBvc3RzMixcbiAgZm9ybWF0TWVzc2FnZXMyLFxuICBmb3JtYXRUaW1lc3RhbXAyLFxuICB2YWxpZGF0ZVV1aWQyLFxuICBzdHJpbmdUb1V1aWQyLFxuICB0cnVuY2F0ZVRvQ29tcGxldGVTZW50ZW5jZTIsXG4gIHBhcnNlS2V5VmFsdWVYbWwyLFxuICBwYXJzZUpTT05PYmplY3RGcm9tVGV4dDIsXG4gIHBhcnNlQm9vbGVhbkZyb21UZXh0MyBhcyBwYXJzZUJvb2xlYW5Gcm9tVGV4dDIsXG4gIHNhZmVSZXBsYWNlcjIsXG4gIHRyaW1Ub2tlbnMyLFxuICBTZXJ2aWNlQnVpbGRlcjIsXG4gIGNyZWF0ZVNlcnZpY2UyLFxuICBkZWZpbmVTZXJ2aWNlMixcbiAgdjJfZXhwb3J0cyxcbiAgZ2V0QWN0b3JEZXRhaWxzLFxuICBmb3JtYXRBY3RvcnMsXG4gIGZvcm1hdE1lc3NhZ2VzMyxcbiAgZm9ybWF0VGltZXN0YW1wMyxcbiAgZm9ybWF0UG9zdHMzLFxuICBBZ2VudFJ1bnRpbWUzLFxuICBhc1VVSUQzLFxuICBnZW5lcmF0ZVV1aWRGcm9tU3RyaW5nLFxuICB2MV9leHBvcnRzLFxuICBkZWZhdWx0U3BlY1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/dist/chunk-P3YTG22Y.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/dist/chunk-R5U7XKVJ.js":
/*!***********************************************************!*\
  !*** ./node_modules/@elizaos/core/dist/chunk-R5U7XKVJ.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __export: () => (/* binding */ __export),\n/* harmony export */   __require: () => (/* binding */ __require)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __require = /* @__PURE__ */ ((x) => typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x, {\n  get: (a, b) => (typeof require !== \"undefined\" ? require : a)[b]\n}) : x)(function(x) {\n  if (typeof require !== \"undefined\") return require.apply(this, arguments);\n  throw Error('Dynamic require of \"' + x + '\" is not supported');\n});\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9kaXN0L2NodW5rLVI1VTdYS1ZKLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7O0FBS0UiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZG1pbi9Eb2N1bWVudHMvcHJvamVjdHMvcGlnZ3ktcG90L25vZGVfbW9kdWxlcy9AZWxpemFvcy9jb3JlL2Rpc3QvY2h1bmstUjVVN1hLVkouanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX3JlcXVpcmUgPSAvKiBAX19QVVJFX18gKi8gKCh4KSA9PiB0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHJlcXVpcmUgOiB0eXBlb2YgUHJveHkgIT09IFwidW5kZWZpbmVkXCIgPyBuZXcgUHJveHkoeCwge1xuICBnZXQ6IChhLCBiKSA9PiAodHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIgPyByZXF1aXJlIDogYSlbYl1cbn0pIDogeCkoZnVuY3Rpb24oeCkge1xuICBpZiAodHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIpIHJldHVybiByZXF1aXJlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHRocm93IEVycm9yKCdEeW5hbWljIHJlcXVpcmUgb2YgXCInICsgeCArICdcIiBpcyBub3Qgc3VwcG9ydGVkJyk7XG59KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcblxuZXhwb3J0IHtcbiAgX19yZXF1aXJlLFxuICBfX2V4cG9ydFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/dist/chunk-R5U7XKVJ.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/dist/chunk-U2ADTLZY.js":
/*!***********************************************************!*\
  !*** ./node_modules/@elizaos/core/dist/chunk-U2ADTLZY.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertContentToV1: () => (/* binding */ convertContentToV1),\n/* harmony export */   convertContentToV2: () => (/* binding */ convertContentToV2),\n/* harmony export */   fromV2ActionExample: () => (/* binding */ fromV2ActionExample),\n/* harmony export */   toV2ActionExample: () => (/* binding */ toV2ActionExample)\n/* harmony export */ });\n// src/specs/v1/actionExample.ts\nfunction convertContentToV1(content) {\n  if (!content) {\n    return { text: \"\" };\n  }\n  return {\n    text: content.text || \"\",\n    // V2 uses 'actions' array, V1 might use 'action' string\n    action: Array.isArray(content.actions) && content.actions.length > 0 ? content.actions[0] : void 0,\n    // Copy all other properties\n    ...Object.entries(content).filter(([key]) => ![\"text\", \"actions\", \"action\"].includes(key)).reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {})\n  };\n}\nfunction convertContentToV2(content) {\n  if (!content) {\n    return { text: \"\" };\n  }\n  return {\n    text: content.text || \"\",\n    // V1 uses 'action' string, V2 uses 'actions' array\n    actions: content.action ? [content.action] : [],\n    // Copy all other properties\n    ...Object.entries(content).filter(([key]) => ![\"text\", \"action\"].includes(key)).reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {})\n  };\n}\nfunction fromV2ActionExample(exampleV2) {\n  if (!exampleV2) {\n    return { user: \"\", content: { text: \"\" } };\n  }\n  return {\n    user: exampleV2.name || \"\",\n    content: convertContentToV1(exampleV2.content)\n  };\n}\nfunction toV2ActionExample(example) {\n  if (!example) {\n    return { name: \"\", content: { text: \"\" } };\n  }\n  return {\n    name: example.user || \"\",\n    content: convertContentToV2(example.content)\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9kaXN0L2NodW5rLVUyQURUTFpZLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0lBQWdJLHNCQUFzQixLQUFLO0FBQzNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFIQUFxSCxzQkFBc0IsS0FBSztBQUNoSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEscUJBQXFCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHFCQUFxQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBT0UiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZG1pbi9Eb2N1bWVudHMvcHJvamVjdHMvcGlnZ3ktcG90L25vZGVfbW9kdWxlcy9AZWxpemFvcy9jb3JlL2Rpc3QvY2h1bmstVTJBRFRMWlkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NwZWNzL3YxL2FjdGlvbkV4YW1wbGUudHNcbmZ1bmN0aW9uIGNvbnZlcnRDb250ZW50VG9WMShjb250ZW50KSB7XG4gIGlmICghY29udGVudCkge1xuICAgIHJldHVybiB7IHRleHQ6IFwiXCIgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHRleHQ6IGNvbnRlbnQudGV4dCB8fCBcIlwiLFxuICAgIC8vIFYyIHVzZXMgJ2FjdGlvbnMnIGFycmF5LCBWMSBtaWdodCB1c2UgJ2FjdGlvbicgc3RyaW5nXG4gICAgYWN0aW9uOiBBcnJheS5pc0FycmF5KGNvbnRlbnQuYWN0aW9ucykgJiYgY29udGVudC5hY3Rpb25zLmxlbmd0aCA+IDAgPyBjb250ZW50LmFjdGlvbnNbMF0gOiB2b2lkIDAsXG4gICAgLy8gQ29weSBhbGwgb3RoZXIgcHJvcGVydGllc1xuICAgIC4uLk9iamVjdC5lbnRyaWVzKGNvbnRlbnQpLmZpbHRlcigoW2tleV0pID0+ICFbXCJ0ZXh0XCIsIFwiYWN0aW9uc1wiLCBcImFjdGlvblwiXS5pbmNsdWRlcyhrZXkpKS5yZWR1Y2UoKG9iaiwgW2tleSwgdmFsdWVdKSA9PiAoeyAuLi5vYmosIFtrZXldOiB2YWx1ZSB9KSwge30pXG4gIH07XG59XG5mdW5jdGlvbiBjb252ZXJ0Q29udGVudFRvVjIoY29udGVudCkge1xuICBpZiAoIWNvbnRlbnQpIHtcbiAgICByZXR1cm4geyB0ZXh0OiBcIlwiIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0ZXh0OiBjb250ZW50LnRleHQgfHwgXCJcIixcbiAgICAvLyBWMSB1c2VzICdhY3Rpb24nIHN0cmluZywgVjIgdXNlcyAnYWN0aW9ucycgYXJyYXlcbiAgICBhY3Rpb25zOiBjb250ZW50LmFjdGlvbiA/IFtjb250ZW50LmFjdGlvbl0gOiBbXSxcbiAgICAvLyBDb3B5IGFsbCBvdGhlciBwcm9wZXJ0aWVzXG4gICAgLi4uT2JqZWN0LmVudHJpZXMoY29udGVudCkuZmlsdGVyKChba2V5XSkgPT4gIVtcInRleHRcIiwgXCJhY3Rpb25cIl0uaW5jbHVkZXMoa2V5KSkucmVkdWNlKChvYmosIFtrZXksIHZhbHVlXSkgPT4gKHsgLi4ub2JqLCBba2V5XTogdmFsdWUgfSksIHt9KVxuICB9O1xufVxuZnVuY3Rpb24gZnJvbVYyQWN0aW9uRXhhbXBsZShleGFtcGxlVjIpIHtcbiAgaWYgKCFleGFtcGxlVjIpIHtcbiAgICByZXR1cm4geyB1c2VyOiBcIlwiLCBjb250ZW50OiB7IHRleHQ6IFwiXCIgfSB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgdXNlcjogZXhhbXBsZVYyLm5hbWUgfHwgXCJcIixcbiAgICBjb250ZW50OiBjb252ZXJ0Q29udGVudFRvVjEoZXhhbXBsZVYyLmNvbnRlbnQpXG4gIH07XG59XG5mdW5jdGlvbiB0b1YyQWN0aW9uRXhhbXBsZShleGFtcGxlKSB7XG4gIGlmICghZXhhbXBsZSkge1xuICAgIHJldHVybiB7IG5hbWU6IFwiXCIsIGNvbnRlbnQ6IHsgdGV4dDogXCJcIiB9IH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBleGFtcGxlLnVzZXIgfHwgXCJcIixcbiAgICBjb250ZW50OiBjb252ZXJ0Q29udGVudFRvVjIoZXhhbXBsZS5jb250ZW50KVxuICB9O1xufVxuXG5leHBvcnQge1xuICBjb252ZXJ0Q29udGVudFRvVjEsXG4gIGNvbnZlcnRDb250ZW50VG9WMixcbiAgZnJvbVYyQWN0aW9uRXhhbXBsZSxcbiAgdG9WMkFjdGlvbkV4YW1wbGVcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/dist/chunk-U2ADTLZY.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/dist/chunk-WO7Z3GE6.js":
/*!***********************************************************!*\
  !*** ./node_modules/@elizaos/core/dist/chunk-WO7Z3GE6.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionTimelineType: () => (/* binding */ ActionTimelineType),\n/* harmony export */   CacheKeyPrefix: () => (/* binding */ CacheKeyPrefix),\n/* harmony export */   CacheStore: () => (/* binding */ CacheStore),\n/* harmony export */   GoalStatus: () => (/* binding */ GoalStatus),\n/* harmony export */   IrysDataType: () => (/* binding */ IrysDataType),\n/* harmony export */   IrysMessageType: () => (/* binding */ IrysMessageType),\n/* harmony export */   KnowledgeScope: () => (/* binding */ KnowledgeScope),\n/* harmony export */   LoggingLevel: () => (/* binding */ LoggingLevel),\n/* harmony export */   ModelClass: () => (/* binding */ ModelClass),\n/* harmony export */   ModelProviderName: () => (/* binding */ ModelProviderName),\n/* harmony export */   Service: () => (/* binding */ Service),\n/* harmony export */   ServiceType: () => (/* binding */ ServiceType),\n/* harmony export */   TokenizerType: () => (/* binding */ TokenizerType),\n/* harmony export */   TranscriptionProvider: () => (/* binding */ TranscriptionProvider)\n/* harmony export */ });\n// src/specs/v1/types.ts\nvar GoalStatus = /* @__PURE__ */ ((GoalStatus2) => {\n  GoalStatus2[\"DONE\"] = \"DONE\";\n  GoalStatus2[\"FAILED\"] = \"FAILED\";\n  GoalStatus2[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  return GoalStatus2;\n})(GoalStatus || {});\nvar ModelClass = /* @__PURE__ */ ((ModelClass2) => {\n  ModelClass2[\"SMALL\"] = \"small\";\n  ModelClass2[\"MEDIUM\"] = \"medium\";\n  ModelClass2[\"LARGE\"] = \"large\";\n  ModelClass2[\"EMBEDDING\"] = \"embedding\";\n  ModelClass2[\"IMAGE\"] = \"image\";\n  return ModelClass2;\n})(ModelClass || {});\nvar ModelProviderName = /* @__PURE__ */ ((ModelProviderName2) => {\n  ModelProviderName2[\"OPENAI\"] = \"openai\";\n  ModelProviderName2[\"ETERNALAI\"] = \"eternalai\";\n  ModelProviderName2[\"ANTHROPIC\"] = \"anthropic\";\n  ModelProviderName2[\"GROK\"] = \"grok\";\n  ModelProviderName2[\"GROQ\"] = \"groq\";\n  ModelProviderName2[\"LLAMACLOUD\"] = \"llama_cloud\";\n  ModelProviderName2[\"TOGETHER\"] = \"together\";\n  ModelProviderName2[\"LLAMALOCAL\"] = \"llama_local\";\n  ModelProviderName2[\"LMSTUDIO\"] = \"lmstudio\";\n  ModelProviderName2[\"GOOGLE\"] = \"google\";\n  ModelProviderName2[\"MISTRAL\"] = \"mistral\";\n  ModelProviderName2[\"CLAUDE_VERTEX\"] = \"claude_vertex\";\n  ModelProviderName2[\"REDPILL\"] = \"redpill\";\n  ModelProviderName2[\"OPENROUTER\"] = \"openrouter\";\n  ModelProviderName2[\"OLLAMA\"] = \"ollama\";\n  ModelProviderName2[\"HEURIST\"] = \"heurist\";\n  ModelProviderName2[\"GALADRIEL\"] = \"galadriel\";\n  ModelProviderName2[\"FAL\"] = \"falai\";\n  ModelProviderName2[\"GAIANET\"] = \"gaianet\";\n  ModelProviderName2[\"ALI_BAILIAN\"] = \"ali_bailian\";\n  ModelProviderName2[\"VOLENGINE\"] = \"volengine\";\n  ModelProviderName2[\"NANOGPT\"] = \"nanogpt\";\n  ModelProviderName2[\"HYPERBOLIC\"] = \"hyperbolic\";\n  ModelProviderName2[\"VENICE\"] = \"venice\";\n  ModelProviderName2[\"NVIDIA\"] = \"nvidia\";\n  ModelProviderName2[\"NINETEEN_AI\"] = \"nineteen_ai\";\n  ModelProviderName2[\"AKASH_CHAT_API\"] = \"akash_chat_api\";\n  ModelProviderName2[\"LIVEPEER\"] = \"livepeer\";\n  ModelProviderName2[\"LETZAI\"] = \"letzai\";\n  ModelProviderName2[\"DEEPSEEK\"] = \"deepseek\";\n  ModelProviderName2[\"INFERA\"] = \"infera\";\n  ModelProviderName2[\"BEDROCK\"] = \"bedrock\";\n  ModelProviderName2[\"ATOMA\"] = \"atoma\";\n  ModelProviderName2[\"SECRETAI\"] = \"secret_ai\";\n  ModelProviderName2[\"NEARAI\"] = \"nearai\";\n  return ModelProviderName2;\n})(ModelProviderName || {});\nvar CacheStore = /* @__PURE__ */ ((CacheStore2) => {\n  CacheStore2[\"REDIS\"] = \"redis\";\n  CacheStore2[\"DATABASE\"] = \"database\";\n  CacheStore2[\"FILESYSTEM\"] = \"filesystem\";\n  return CacheStore2;\n})(CacheStore || {});\nvar Service = class _Service {\n  static {\n    this.instance = null;\n  }\n  static get serviceType() {\n    throw new Error(\"Service must implement static serviceType getter\");\n  }\n  static getInstance() {\n    if (!_Service.instance) {\n      _Service.instance = new this();\n    }\n    return _Service.instance;\n  }\n  get serviceType() {\n    return this.constructor.serviceType;\n  }\n};\nvar IrysMessageType = /* @__PURE__ */ ((IrysMessageType2) => {\n  IrysMessageType2[\"REQUEST\"] = \"REQUEST\";\n  IrysMessageType2[\"DATA_STORAGE\"] = \"DATA_STORAGE\";\n  IrysMessageType2[\"REQUEST_RESPONSE\"] = \"REQUEST_RESPONSE\";\n  return IrysMessageType2;\n})(IrysMessageType || {});\nvar IrysDataType = /* @__PURE__ */ ((IrysDataType2) => {\n  IrysDataType2[\"FILE\"] = \"FILE\";\n  IrysDataType2[\"IMAGE\"] = \"IMAGE\";\n  IrysDataType2[\"OTHER\"] = \"OTHER\";\n  return IrysDataType2;\n})(IrysDataType || {});\nvar ServiceType = /* @__PURE__ */ ((ServiceType2) => {\n  ServiceType2[\"IMAGE_DESCRIPTION\"] = \"image_description\";\n  ServiceType2[\"TRANSCRIPTION\"] = \"transcription\";\n  ServiceType2[\"VIDEO\"] = \"video\";\n  ServiceType2[\"TEXT_GENERATION\"] = \"text_generation\";\n  ServiceType2[\"BROWSER\"] = \"browser\";\n  ServiceType2[\"SPEECH_GENERATION\"] = \"speech_generation\";\n  ServiceType2[\"PDF\"] = \"pdf\";\n  ServiceType2[\"INTIFACE\"] = \"intiface\";\n  ServiceType2[\"AWS_S3\"] = \"aws_s3\";\n  ServiceType2[\"BUTTPLUG\"] = \"buttplug\";\n  ServiceType2[\"SLACK\"] = \"slack\";\n  ServiceType2[\"VERIFIABLE_LOGGING\"] = \"verifiable_logging\";\n  ServiceType2[\"IRYS\"] = \"irys\";\n  ServiceType2[\"TEE_LOG\"] = \"tee_log\";\n  ServiceType2[\"GOPLUS_SECURITY\"] = \"goplus_security\";\n  ServiceType2[\"WEB_SEARCH\"] = \"web_search\";\n  ServiceType2[\"EMAIL_AUTOMATION\"] = \"email_automation\";\n  ServiceType2[\"NKN_CLIENT_SERVICE\"] = \"nkn_client_service\";\n  ServiceType2[\"DATABASE_MIGRATION\"] = \"database_migration\";\n  return ServiceType2;\n})(ServiceType || {});\nvar LoggingLevel = /* @__PURE__ */ ((LoggingLevel2) => {\n  LoggingLevel2[\"DEBUG\"] = \"debug\";\n  LoggingLevel2[\"VERBOSE\"] = \"verbose\";\n  LoggingLevel2[\"NONE\"] = \"none\";\n  return LoggingLevel2;\n})(LoggingLevel || {});\nvar TokenizerType = /* @__PURE__ */ ((TokenizerType2) => {\n  TokenizerType2[\"Auto\"] = \"auto\";\n  TokenizerType2[\"TikToken\"] = \"tiktoken\";\n  return TokenizerType2;\n})(TokenizerType || {});\nvar TranscriptionProvider = /* @__PURE__ */ ((TranscriptionProvider2) => {\n  TranscriptionProvider2[\"OpenAI\"] = \"openai\";\n  TranscriptionProvider2[\"Deepgram\"] = \"deepgram\";\n  TranscriptionProvider2[\"Local\"] = \"local\";\n  return TranscriptionProvider2;\n})(TranscriptionProvider || {});\nvar ActionTimelineType = /* @__PURE__ */ ((ActionTimelineType2) => {\n  ActionTimelineType2[\"ForYou\"] = \"foryou\";\n  ActionTimelineType2[\"Following\"] = \"following\";\n  return ActionTimelineType2;\n})(ActionTimelineType || {});\nvar KnowledgeScope = /* @__PURE__ */ ((KnowledgeScope2) => {\n  KnowledgeScope2[\"SHARED\"] = \"shared\";\n  KnowledgeScope2[\"PRIVATE\"] = \"private\";\n  return KnowledgeScope2;\n})(KnowledgeScope || {});\nvar CacheKeyPrefix = /* @__PURE__ */ ((CacheKeyPrefix2) => {\n  CacheKeyPrefix2[\"KNOWLEDGE\"] = \"knowledge\";\n  return CacheKeyPrefix2;\n})(CacheKeyPrefix || {});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/dist/chunk-WO7Z3GE6.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/dist/chunk-YIBXLDIR.js":
/*!***********************************************************!*\
  !*** ./node_modules/@elizaos/core/dist/chunk-YIBXLDIR.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromV2State: () => (/* binding */ fromV2State),\n/* harmony export */   toV2State: () => (/* binding */ toV2State)\n/* harmony export */ });\n// src/specs/v1/state.ts\nvar DEFAULT_STATE = {\n  bio: \"\",\n  lore: \"\",\n  messageDirections: \"\",\n  postDirections: \"\",\n  actors: \"\",\n  recentMessages: \"\",\n  recentMessagesData: []\n};\nfunction fromV2State(stateV2) {\n  const state = {\n    ...DEFAULT_STATE,\n    ...stateV2.values,\n    ...stateV2.data,\n    text: stateV2.text\n  };\n  for (const key in stateV2) {\n    if (key !== \"values\" && key !== \"data\" && key !== \"text\") {\n      state[key] = stateV2[key];\n    }\n  }\n  return state;\n}\nfunction toV2State(state) {\n  const stateV2 = {\n    values: {},\n    data: {},\n    text: state.text || \"\"\n  };\n  for (const key in state) {\n    if (key !== \"text\") {\n      stateV2[key] = state[key];\n    }\n  }\n  return stateV2;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9kaXN0L2NodW5rLVlJQlhMRElSLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUtFIiwic291cmNlcyI6WyIvVXNlcnMvYWRtaW4vRG9jdW1lbnRzL3Byb2plY3RzL3BpZ2d5LXBvdC9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9kaXN0L2NodW5rLVlJQlhMRElSLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zcGVjcy92MS9zdGF0ZS50c1xudmFyIERFRkFVTFRfU1RBVEUgPSB7XG4gIGJpbzogXCJcIixcbiAgbG9yZTogXCJcIixcbiAgbWVzc2FnZURpcmVjdGlvbnM6IFwiXCIsXG4gIHBvc3REaXJlY3Rpb25zOiBcIlwiLFxuICBhY3RvcnM6IFwiXCIsXG4gIHJlY2VudE1lc3NhZ2VzOiBcIlwiLFxuICByZWNlbnRNZXNzYWdlc0RhdGE6IFtdXG59O1xuZnVuY3Rpb24gZnJvbVYyU3RhdGUoc3RhdGVWMikge1xuICBjb25zdCBzdGF0ZSA9IHtcbiAgICAuLi5ERUZBVUxUX1NUQVRFLFxuICAgIC4uLnN0YXRlVjIudmFsdWVzLFxuICAgIC4uLnN0YXRlVjIuZGF0YSxcbiAgICB0ZXh0OiBzdGF0ZVYyLnRleHRcbiAgfTtcbiAgZm9yIChjb25zdCBrZXkgaW4gc3RhdGVWMikge1xuICAgIGlmIChrZXkgIT09IFwidmFsdWVzXCIgJiYga2V5ICE9PSBcImRhdGFcIiAmJiBrZXkgIT09IFwidGV4dFwiKSB7XG4gICAgICBzdGF0ZVtrZXldID0gc3RhdGVWMltrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RhdGU7XG59XG5mdW5jdGlvbiB0b1YyU3RhdGUoc3RhdGUpIHtcbiAgY29uc3Qgc3RhdGVWMiA9IHtcbiAgICB2YWx1ZXM6IHt9LFxuICAgIGRhdGE6IHt9LFxuICAgIHRleHQ6IHN0YXRlLnRleHQgfHwgXCJcIlxuICB9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBzdGF0ZSkge1xuICAgIGlmIChrZXkgIT09IFwidGV4dFwiKSB7XG4gICAgICBzdGF0ZVYyW2tleV0gPSBzdGF0ZVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RhdGVWMjtcbn1cblxuZXhwb3J0IHtcbiAgZnJvbVYyU3RhdGUsXG4gIHRvVjJTdGF0ZVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/dist/chunk-YIBXLDIR.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@elizaos/core/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentRuntime: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.AgentRuntime),\n/* harmony export */   AgentStatus: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.AgentStatus),\n/* harmony export */   CacheKeyPrefix: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.CacheKeyPrefix),\n/* harmony export */   ChannelType: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.ChannelType),\n/* harmony export */   ContentType: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.ContentType),\n/* harmony export */   DatabaseAdapter: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.DatabaseAdapter),\n/* harmony export */   EventType: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.EventType),\n/* harmony export */   IBrowserService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.IBrowserService),\n/* harmony export */   IEmailService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.IEmailService),\n/* harmony export */   ILpService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.ILpService),\n/* harmony export */   IMessageService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.IMessageService),\n/* harmony export */   IPdfService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.IPdfService),\n/* harmony export */   IPostService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.IPostService),\n/* harmony export */   ITokenDataService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.ITokenDataService),\n/* harmony export */   ITranscriptionService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.ITranscriptionService),\n/* harmony export */   IVideoService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.IVideoService),\n/* harmony export */   IWalletService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.IWalletService),\n/* harmony export */   IWebSearchService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.IWebSearchService),\n/* harmony export */   KnowledgeScope: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.KnowledgeScope),\n/* harmony export */   MemoryType: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.MemoryType),\n/* harmony export */   ModelType: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.ModelType),\n/* harmony export */   PlatformPrefix: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.PlatformPrefix),\n/* harmony export */   Role: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.Role),\n/* harmony export */   SOCKET_MESSAGE_TYPE: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.SOCKET_MESSAGE_TYPE),\n/* harmony export */   Semaphore: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.Semaphore),\n/* harmony export */   Sentry: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.Sentry),\n/* harmony export */   Service: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.Service),\n/* harmony export */   ServiceBuilder: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.ServiceBuilder),\n/* harmony export */   ServiceType: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.ServiceType),\n/* harmony export */   TEEMode: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.TEEMode),\n/* harmony export */   TeeType: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.TeeType),\n/* harmony export */   VECTOR_DIMS: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.VECTOR_DIMS),\n/* harmony export */   addHeader: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.addHeader),\n/* harmony export */   asUUID: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.asUUID),\n/* harmony export */   booleanFooter: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.booleanFooter),\n/* harmony export */   characterSchema: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.characterSchema),\n/* harmony export */   composeActionExamples: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.composeActionExamples),\n/* harmony export */   composePrompt: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.composePrompt),\n/* harmony export */   composePromptFromState: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.composePromptFromState),\n/* harmony export */   createActionResult: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.createActionResult),\n/* harmony export */   createLogger: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.createLogger),\n/* harmony export */   createMessageMemory: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.createMessageMemory),\n/* harmony export */   createService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.createService),\n/* harmony export */   createServiceError: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.createServiceError),\n/* harmony export */   createSettingFromConfig: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.createSettingFromConfig),\n/* harmony export */   createUniqueUuid: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueUuid),\n/* harmony export */   decryptObjectValues: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.decryptObjectValues),\n/* harmony export */   decryptSecret: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.decryptStringValue),\n/* harmony export */   decryptStringValue: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.decryptStringValue),\n/* harmony export */   decryptedCharacter: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.decryptedCharacter),\n/* harmony export */   defaultSpec: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.defaultSpec),\n/* harmony export */   defineService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.defineService),\n/* harmony export */   elizaLogger: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.elizaLogger),\n/* harmony export */   encryptObjectValues: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.encryptObjectValues),\n/* harmony export */   encryptStringValue: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.encryptStringValue),\n/* harmony export */   encryptedCharacter: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.encryptedCharacter),\n/* harmony export */   findEntityByName: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.findEntityByName),\n/* harmony export */   findWorldsForOwner: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.findWorldsForOwner),\n/* harmony export */   formatActionNames: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.formatActionNames),\n/* harmony export */   formatActions: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.formatActions),\n/* harmony export */   formatEntities: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.formatEntities),\n/* harmony export */   formatMessages: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.formatMessages),\n/* harmony export */   formatPosts: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.formatPosts),\n/* harmony export */   formatTimestamp: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.formatTimestamp),\n/* harmony export */   getContentTypeFromMimeType: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.getContentTypeFromMimeType),\n/* harmony export */   getEntityDetails: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.getEntityDetails),\n/* harmony export */   getLocalServerUrl: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.getLocalServerUrl),\n/* harmony export */   getMemoryText: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.getMemoryText),\n/* harmony export */   getSalt: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.getSalt),\n/* harmony export */   getTypedService: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.getTypedService),\n/* harmony export */   getUserServerRole: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.getUserServerRole),\n/* harmony export */   getWorldSettings: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.getWorldSettings),\n/* harmony export */   imageDescriptionTemplate: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.imageDescriptionTemplate),\n/* harmony export */   initializeOnboarding: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.initializeOnboarding),\n/* harmony export */   isCustomMetadata: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.isCustomMetadata),\n/* harmony export */   isDescriptionMetadata: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.isDescriptionMetadata),\n/* harmony export */   isDocumentMemory: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.isDocumentMemory),\n/* harmony export */   isDocumentMetadata: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.isDocumentMetadata),\n/* harmony export */   isFragmentMemory: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.isFragmentMemory),\n/* harmony export */   isFragmentMetadata: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.isFragmentMetadata),\n/* harmony export */   isMessageMetadata: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.isMessageMetadata),\n/* harmony export */   isValidCharacter: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.isValidCharacter),\n/* harmony export */   logger: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.logger),\n/* harmony export */   messageHandlerTemplate: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.messageHandlerTemplate),\n/* harmony export */   normalizeJsonString: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.normalizeJsonString),\n/* harmony export */   parseAndValidateCharacter: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.parseAndValidateCharacter),\n/* harmony export */   parseBooleanFromText: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.parseBooleanFromText),\n/* harmony export */   parseJSONObjectFromText: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.parseJSONObjectFromText),\n/* harmony export */   parseKeyValueXml: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.parseKeyValueXml),\n/* harmony export */   postCreationTemplate: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.postCreationTemplate),\n/* harmony export */   safeReplacer: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.safeReplacer),\n/* harmony export */   saltSettingValue: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.saltSettingValue),\n/* harmony export */   saltWorldSettings: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.saltWorldSettings),\n/* harmony export */   shouldRespondTemplate: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.shouldRespondTemplate),\n/* harmony export */   splitChunks: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.splitChunks),\n/* harmony export */   stringToUuid: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.stringToUuid),\n/* harmony export */   trimTokens: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.trimTokens),\n/* harmony export */   truncateToCompleteSentence: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.truncateToCompleteSentence),\n/* harmony export */   unsaltSettingValue: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.unsaltSettingValue),\n/* harmony export */   unsaltWorldSettings: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.unsaltWorldSettings),\n/* harmony export */   updateWorldSettings: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.updateWorldSettings),\n/* harmony export */   v1: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.v1_exports),\n/* harmony export */   v2: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.v2_exports),\n/* harmony export */   validateCharacter: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.validateCharacter),\n/* harmony export */   validateUuid: () => (/* reexport safe */ _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__.validateUuid)\n/* harmony export */ });\n/* harmony import */ var _chunk_P3YTG22Y_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-P3YTG22Y.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-P3YTG22Y.js\");\n/* harmony import */ var _chunk_2HSL25IJ_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-2HSL25IJ.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-2HSL25IJ.js\");\n/* harmony import */ var _chunk_WO7Z3GE6_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-WO7Z3GE6.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-WO7Z3GE6.js\");\n/* harmony import */ var _chunk_U2ADTLZY_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-U2ADTLZY.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-U2ADTLZY.js\");\n/* harmony import */ var _chunk_JX2SRFHQ_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-JX2SRFHQ.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-JX2SRFHQ.js\");\n/* harmony import */ var _chunk_YIBXLDIR_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunk-YIBXLDIR.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-YIBXLDIR.js\");\n/* harmony import */ var _chunk_R5U7XKVJ_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chunk-R5U7XKVJ.js */ \"(rsc)/./node_modules/@elizaos/core/dist/chunk-R5U7XKVJ.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5RzZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBMkczQiIsInNvdXJjZXMiOlsiL1VzZXJzL2FkbWluL0RvY3VtZW50cy9wcm9qZWN0cy9waWdneS1wb3Qvbm9kZV9tb2R1bGVzL0BlbGl6YW9zL2NvcmUvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZ2VudFJ1bnRpbWUsXG4gIEFnZW50U3RhdHVzLFxuICBDYWNoZUtleVByZWZpeCxcbiAgQ2hhbm5lbFR5cGUsXG4gIENvbnRlbnRUeXBlLFxuICBEYXRhYmFzZUFkYXB0ZXIsXG4gIEV2ZW50VHlwZSxcbiAgSUJyb3dzZXJTZXJ2aWNlLFxuICBJRW1haWxTZXJ2aWNlLFxuICBJTHBTZXJ2aWNlLFxuICBJTWVzc2FnZVNlcnZpY2UsXG4gIElQZGZTZXJ2aWNlLFxuICBJUG9zdFNlcnZpY2UsXG4gIElUb2tlbkRhdGFTZXJ2aWNlLFxuICBJVHJhbnNjcmlwdGlvblNlcnZpY2UsXG4gIElWaWRlb1NlcnZpY2UsXG4gIElXYWxsZXRTZXJ2aWNlLFxuICBJV2ViU2VhcmNoU2VydmljZSxcbiAgS25vd2xlZGdlU2NvcGUsXG4gIE1lbW9yeVR5cGUsXG4gIE1vZGVsVHlwZSxcbiAgUGxhdGZvcm1QcmVmaXgsXG4gIFJvbGUsXG4gIFNPQ0tFVF9NRVNTQUdFX1RZUEUsXG4gIFNlbWFwaG9yZSxcbiAgU2VudHJ5LFxuICBTZXJ2aWNlLFxuICBTZXJ2aWNlQnVpbGRlcixcbiAgU2VydmljZVR5cGUsXG4gIFRFRU1vZGUsXG4gIFRlZVR5cGUsXG4gIFZFQ1RPUl9ESU1TLFxuICBhZGRIZWFkZXIsXG4gIGFzVVVJRCxcbiAgYm9vbGVhbkZvb3RlcixcbiAgY2hhcmFjdGVyU2NoZW1hLFxuICBjb21wb3NlQWN0aW9uRXhhbXBsZXMsXG4gIGNvbXBvc2VQcm9tcHQsXG4gIGNvbXBvc2VQcm9tcHRGcm9tU3RhdGUsXG4gIGNyZWF0ZUFjdGlvblJlc3VsdCxcbiAgY3JlYXRlTG9nZ2VyLFxuICBjcmVhdGVNZXNzYWdlTWVtb3J5LFxuICBjcmVhdGVTZXJ2aWNlLFxuICBjcmVhdGVTZXJ2aWNlRXJyb3IsXG4gIGNyZWF0ZVNldHRpbmdGcm9tQ29uZmlnLFxuICBjcmVhdGVVbmlxdWVVdWlkLFxuICBkZWNyeXB0T2JqZWN0VmFsdWVzLFxuICBkZWNyeXB0U3RyaW5nVmFsdWUsXG4gIGRlY3J5cHRlZENoYXJhY3RlcixcbiAgZGVmYXVsdFNwZWMsXG4gIGRlZmluZVNlcnZpY2UsXG4gIGVsaXphTG9nZ2VyLFxuICBlbmNyeXB0T2JqZWN0VmFsdWVzLFxuICBlbmNyeXB0U3RyaW5nVmFsdWUsXG4gIGVuY3J5cHRlZENoYXJhY3RlcixcbiAgZmluZEVudGl0eUJ5TmFtZSxcbiAgZmluZFdvcmxkc0Zvck93bmVyLFxuICBmb3JtYXRBY3Rpb25OYW1lcyxcbiAgZm9ybWF0QWN0aW9ucyxcbiAgZm9ybWF0RW50aXRpZXMsXG4gIGZvcm1hdE1lc3NhZ2VzLFxuICBmb3JtYXRQb3N0cyxcbiAgZm9ybWF0VGltZXN0YW1wLFxuICBnZXRDb250ZW50VHlwZUZyb21NaW1lVHlwZSxcbiAgZ2V0RW50aXR5RGV0YWlscyxcbiAgZ2V0TG9jYWxTZXJ2ZXJVcmwsXG4gIGdldE1lbW9yeVRleHQsXG4gIGdldFNhbHQsXG4gIGdldFR5cGVkU2VydmljZSxcbiAgZ2V0VXNlclNlcnZlclJvbGUsXG4gIGdldFdvcmxkU2V0dGluZ3MsXG4gIGltYWdlRGVzY3JpcHRpb25UZW1wbGF0ZSxcbiAgaW5pdGlhbGl6ZU9uYm9hcmRpbmcsXG4gIGlzQ3VzdG9tTWV0YWRhdGEsXG4gIGlzRGVzY3JpcHRpb25NZXRhZGF0YSxcbiAgaXNEb2N1bWVudE1lbW9yeSxcbiAgaXNEb2N1bWVudE1ldGFkYXRhLFxuICBpc0ZyYWdtZW50TWVtb3J5LFxuICBpc0ZyYWdtZW50TWV0YWRhdGEsXG4gIGlzTWVzc2FnZU1ldGFkYXRhLFxuICBpc1ZhbGlkQ2hhcmFjdGVyLFxuICBsb2dnZXIsXG4gIG1lc3NhZ2VIYW5kbGVyVGVtcGxhdGUsXG4gIG5vcm1hbGl6ZUpzb25TdHJpbmcsXG4gIHBhcnNlQW5kVmFsaWRhdGVDaGFyYWN0ZXIsXG4gIHBhcnNlQm9vbGVhbkZyb21UZXh0LFxuICBwYXJzZUpTT05PYmplY3RGcm9tVGV4dCxcbiAgcGFyc2VLZXlWYWx1ZVhtbCxcbiAgcG9zdENyZWF0aW9uVGVtcGxhdGUsXG4gIHNhZmVSZXBsYWNlcixcbiAgc2FsdFNldHRpbmdWYWx1ZSxcbiAgc2FsdFdvcmxkU2V0dGluZ3MsXG4gIHNob3VsZFJlc3BvbmRUZW1wbGF0ZSxcbiAgc3BsaXRDaHVua3MsXG4gIHN0cmluZ1RvVXVpZCxcbiAgdHJpbVRva2VucyxcbiAgdHJ1bmNhdGVUb0NvbXBsZXRlU2VudGVuY2UsXG4gIHVuc2FsdFNldHRpbmdWYWx1ZSxcbiAgdW5zYWx0V29ybGRTZXR0aW5ncyxcbiAgdXBkYXRlV29ybGRTZXR0aW5ncyxcbiAgdjFfZXhwb3J0cyxcbiAgdjJfZXhwb3J0cyxcbiAgdmFsaWRhdGVDaGFyYWN0ZXIsXG4gIHZhbGlkYXRlVXVpZFxufSBmcm9tIFwiLi9jaHVuay1QM1lURzIyWS5qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay0ySFNMMjVJSi5qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1XTzdaM0dFNi5qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1VMkFEVExaWS5qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1KWDJTUkZIUS5qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1ZSUJYTERJUi5qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1SNVU3WEtWSi5qc1wiO1xuZXhwb3J0IHtcbiAgQWdlbnRSdW50aW1lLFxuICBBZ2VudFN0YXR1cyxcbiAgQ2FjaGVLZXlQcmVmaXgsXG4gIENoYW5uZWxUeXBlLFxuICBDb250ZW50VHlwZSxcbiAgRGF0YWJhc2VBZGFwdGVyLFxuICBFdmVudFR5cGUsXG4gIElCcm93c2VyU2VydmljZSxcbiAgSUVtYWlsU2VydmljZSxcbiAgSUxwU2VydmljZSxcbiAgSU1lc3NhZ2VTZXJ2aWNlLFxuICBJUGRmU2VydmljZSxcbiAgSVBvc3RTZXJ2aWNlLFxuICBJVG9rZW5EYXRhU2VydmljZSxcbiAgSVRyYW5zY3JpcHRpb25TZXJ2aWNlLFxuICBJVmlkZW9TZXJ2aWNlLFxuICBJV2FsbGV0U2VydmljZSxcbiAgSVdlYlNlYXJjaFNlcnZpY2UsXG4gIEtub3dsZWRnZVNjb3BlLFxuICBNZW1vcnlUeXBlLFxuICBNb2RlbFR5cGUsXG4gIFBsYXRmb3JtUHJlZml4LFxuICBSb2xlLFxuICBTT0NLRVRfTUVTU0FHRV9UWVBFLFxuICBTZW1hcGhvcmUsXG4gIFNlbnRyeSxcbiAgU2VydmljZSxcbiAgU2VydmljZUJ1aWxkZXIsXG4gIFNlcnZpY2VUeXBlLFxuICBURUVNb2RlLFxuICBUZWVUeXBlLFxuICBWRUNUT1JfRElNUyxcbiAgYWRkSGVhZGVyLFxuICBhc1VVSUQsXG4gIGJvb2xlYW5Gb290ZXIsXG4gIGNoYXJhY3RlclNjaGVtYSxcbiAgY29tcG9zZUFjdGlvbkV4YW1wbGVzLFxuICBjb21wb3NlUHJvbXB0LFxuICBjb21wb3NlUHJvbXB0RnJvbVN0YXRlLFxuICBjcmVhdGVBY3Rpb25SZXN1bHQsXG4gIGNyZWF0ZUxvZ2dlcixcbiAgY3JlYXRlTWVzc2FnZU1lbW9yeSxcbiAgY3JlYXRlU2VydmljZSxcbiAgY3JlYXRlU2VydmljZUVycm9yLFxuICBjcmVhdGVTZXR0aW5nRnJvbUNvbmZpZyxcbiAgY3JlYXRlVW5pcXVlVXVpZCxcbiAgZGVjcnlwdE9iamVjdFZhbHVlcyxcbiAgZGVjcnlwdFN0cmluZ1ZhbHVlIGFzIGRlY3J5cHRTZWNyZXQsXG4gIGRlY3J5cHRTdHJpbmdWYWx1ZSxcbiAgZGVjcnlwdGVkQ2hhcmFjdGVyLFxuICBkZWZhdWx0U3BlYyxcbiAgZGVmaW5lU2VydmljZSxcbiAgZWxpemFMb2dnZXIsXG4gIGVuY3J5cHRPYmplY3RWYWx1ZXMsXG4gIGVuY3J5cHRTdHJpbmdWYWx1ZSxcbiAgZW5jcnlwdGVkQ2hhcmFjdGVyLFxuICBmaW5kRW50aXR5QnlOYW1lLFxuICBmaW5kV29ybGRzRm9yT3duZXIsXG4gIGZvcm1hdEFjdGlvbk5hbWVzLFxuICBmb3JtYXRBY3Rpb25zLFxuICBmb3JtYXRFbnRpdGllcyxcbiAgZm9ybWF0TWVzc2FnZXMsXG4gIGZvcm1hdFBvc3RzLFxuICBmb3JtYXRUaW1lc3RhbXAsXG4gIGdldENvbnRlbnRUeXBlRnJvbU1pbWVUeXBlLFxuICBnZXRFbnRpdHlEZXRhaWxzLFxuICBnZXRMb2NhbFNlcnZlclVybCxcbiAgZ2V0TWVtb3J5VGV4dCxcbiAgZ2V0U2FsdCxcbiAgZ2V0VHlwZWRTZXJ2aWNlLFxuICBnZXRVc2VyU2VydmVyUm9sZSxcbiAgZ2V0V29ybGRTZXR0aW5ncyxcbiAgaW1hZ2VEZXNjcmlwdGlvblRlbXBsYXRlLFxuICBpbml0aWFsaXplT25ib2FyZGluZyxcbiAgaXNDdXN0b21NZXRhZGF0YSxcbiAgaXNEZXNjcmlwdGlvbk1ldGFkYXRhLFxuICBpc0RvY3VtZW50TWVtb3J5LFxuICBpc0RvY3VtZW50TWV0YWRhdGEsXG4gIGlzRnJhZ21lbnRNZW1vcnksXG4gIGlzRnJhZ21lbnRNZXRhZGF0YSxcbiAgaXNNZXNzYWdlTWV0YWRhdGEsXG4gIGlzVmFsaWRDaGFyYWN0ZXIsXG4gIGxvZ2dlcixcbiAgbWVzc2FnZUhhbmRsZXJUZW1wbGF0ZSxcbiAgbm9ybWFsaXplSnNvblN0cmluZyxcbiAgcGFyc2VBbmRWYWxpZGF0ZUNoYXJhY3RlcixcbiAgcGFyc2VCb29sZWFuRnJvbVRleHQsXG4gIHBhcnNlSlNPTk9iamVjdEZyb21UZXh0LFxuICBwYXJzZUtleVZhbHVlWG1sLFxuICBwb3N0Q3JlYXRpb25UZW1wbGF0ZSxcbiAgc2FmZVJlcGxhY2VyLFxuICBzYWx0U2V0dGluZ1ZhbHVlLFxuICBzYWx0V29ybGRTZXR0aW5ncyxcbiAgc2hvdWxkUmVzcG9uZFRlbXBsYXRlLFxuICBzcGxpdENodW5rcyxcbiAgc3RyaW5nVG9VdWlkLFxuICB0cmltVG9rZW5zLFxuICB0cnVuY2F0ZVRvQ29tcGxldGVTZW50ZW5jZSxcbiAgdW5zYWx0U2V0dGluZ1ZhbHVlLFxuICB1bnNhbHRXb3JsZFNldHRpbmdzLFxuICB1cGRhdGVXb3JsZFNldHRpbmdzLFxuICB2MV9leHBvcnRzIGFzIHYxLFxuICB2Ml9leHBvcnRzIGFzIHYyLFxuICB2YWxpZGF0ZUNoYXJhY3RlcixcbiAgdmFsaWRhdGVVdWlkXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/ZodError.js":
/*!********************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/zod/v3/ZodError.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZodError: () => (/* binding */ ZodError),\n/* harmony export */   ZodIssueCode: () => (/* binding */ ZodIssueCode),\n/* harmony export */   quotelessJson: () => (/* binding */ quotelessJson)\n/* harmony export */ });\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/util.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/helpers/util.js\");\n\nconst ZodIssueCode = _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__.util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__.util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                const firstEl = sub.path[0];\n                fieldErrors[firstEl] = fieldErrors[firstEl] || [];\n                fieldErrors[firstEl].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvem9kL3YzL1pvZEVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDbEMscUJBQXFCLGtEQUFJO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0EsMERBQTBEO0FBQzFELGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsTUFBTTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsa0RBQUk7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZG1pbi9Eb2N1bWVudHMvcHJvamVjdHMvcGlnZ3ktcG90L25vZGVfbW9kdWxlcy9AZWxpemFvcy9jb3JlL25vZGVfbW9kdWxlcy96b2QvdjMvWm9kRXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXRpbCB9IGZyb20gXCIuL2hlbHBlcnMvdXRpbC5qc1wiO1xuZXhwb3J0IGNvbnN0IFpvZElzc3VlQ29kZSA9IHV0aWwuYXJyYXlUb0VudW0oW1xuICAgIFwiaW52YWxpZF90eXBlXCIsXG4gICAgXCJpbnZhbGlkX2xpdGVyYWxcIixcbiAgICBcImN1c3RvbVwiLFxuICAgIFwiaW52YWxpZF91bmlvblwiLFxuICAgIFwiaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yXCIsXG4gICAgXCJpbnZhbGlkX2VudW1fdmFsdWVcIixcbiAgICBcInVucmVjb2duaXplZF9rZXlzXCIsXG4gICAgXCJpbnZhbGlkX2FyZ3VtZW50c1wiLFxuICAgIFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiLFxuICAgIFwiaW52YWxpZF9kYXRlXCIsXG4gICAgXCJpbnZhbGlkX3N0cmluZ1wiLFxuICAgIFwidG9vX3NtYWxsXCIsXG4gICAgXCJ0b29fYmlnXCIsXG4gICAgXCJpbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlc1wiLFxuICAgIFwibm90X211bHRpcGxlX29mXCIsXG4gICAgXCJub3RfZmluaXRlXCIsXG5dKTtcbmV4cG9ydCBjb25zdCBxdW90ZWxlc3NKc29uID0gKG9iaikgPT4ge1xuICAgIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShvYmosIG51bGwsIDIpO1xuICAgIHJldHVybiBqc29uLnJlcGxhY2UoL1wiKFteXCJdKylcIjovZywgXCIkMTpcIik7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGdldCBlcnJvcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzc3VlcztcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaXNzdWVzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaXNzdWVzID0gW107XG4gICAgICAgIHRoaXMuYWRkSXNzdWUgPSAoc3ViKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3Vlcywgc3ViXTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGRJc3N1ZXMgPSAoc3VicyA9IFtdKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3VlcywgLi4uc3Vic107XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGFjdHVhbFByb3RvID0gbmV3LnRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBiYW4vYmFuXG4gICAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgYWN0dWFsUHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fX3Byb3RvX18gPSBhY3R1YWxQcm90bztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSBcIlpvZEVycm9yXCI7XG4gICAgICAgIHRoaXMuaXNzdWVzID0gaXNzdWVzO1xuICAgIH1cbiAgICBmb3JtYXQoX21hcHBlcikge1xuICAgICAgICBjb25zdCBtYXBwZXIgPSBfbWFwcGVyIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoaXNzdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNzdWUubWVzc2FnZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZpZWxkRXJyb3JzID0geyBfZXJyb3JzOiBbXSB9O1xuICAgICAgICBjb25zdCBwcm9jZXNzRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXNzdWUgb2YgZXJyb3IuaXNzdWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF91bmlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzc3VlLnVuaW9uRXJyb3JzLm1hcChwcm9jZXNzRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfcmV0dXJuX3R5cGVcIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRXJyb3IoaXNzdWUucmV0dXJuVHlwZUVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX2FyZ3VtZW50c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NFcnJvcihpc3N1ZS5hcmd1bWVudHNFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkRXJyb3JzLl9lcnJvcnMucHVzaChtYXBwZXIoaXNzdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyID0gZmllbGRFcnJvcnM7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBpc3N1ZS5wYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSBpc3N1ZS5wYXRoW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVybWluYWwgPSBpID09PSBpc3N1ZS5wYXRoLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRlcm1pbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHR5cGVvZiBlbCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIGlmICh0eXBlb2YgZWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGNvbnN0IGVycm9yQXJyYXk6IGFueSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZXJyb3JBcnJheS5fZXJyb3JzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IGVycm9yQXJyYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0uX2Vycm9ycy5wdXNoKG1hcHBlcihpc3N1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IGN1cnJbZWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwcm9jZXNzRXJyb3IodGhpcyk7XG4gICAgICAgIHJldHVybiBmaWVsZEVycm9ycztcbiAgICB9XG4gICAgc3RhdGljIGFzc2VydCh2YWx1ZSkge1xuICAgICAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIFpvZEVycm9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3QgYSBab2RFcnJvcjogJHt2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbiAgICB9XG4gICAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmlzc3VlcywgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIsIDIpO1xuICAgIH1cbiAgICBnZXQgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNzdWVzLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgZmxhdHRlbihtYXBwZXIgPSAoaXNzdWUpID0+IGlzc3VlLm1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZmllbGRFcnJvcnMgPSB7fTtcbiAgICAgICAgY29uc3QgZm9ybUVycm9ycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHN1YiBvZiB0aGlzLmlzc3Vlcykge1xuICAgICAgICAgICAgaWYgKHN1Yi5wYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdEVsID0gc3ViLnBhdGhbMF07XG4gICAgICAgICAgICAgICAgZmllbGRFcnJvcnNbZmlyc3RFbF0gPSBmaWVsZEVycm9yc1tmaXJzdEVsXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBmaWVsZEVycm9yc1tmaXJzdEVsXS5wdXNoKG1hcHBlcihzdWIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvcm1FcnJvcnMucHVzaChtYXBwZXIoc3ViKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZm9ybUVycm9ycywgZmllbGRFcnJvcnMgfTtcbiAgICB9XG4gICAgZ2V0IGZvcm1FcnJvcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZsYXR0ZW4oKTtcbiAgICB9XG59XG5ab2RFcnJvci5jcmVhdGUgPSAoaXNzdWVzKSA9PiB7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IoaXNzdWVzKTtcbiAgICByZXR1cm4gZXJyb3I7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/ZodError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/errors.js":
/*!******************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/zod/v3/errors.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultErrorMap: () => (/* reexport safe */ _locales_en_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   getErrorMap: () => (/* binding */ getErrorMap),\n/* harmony export */   setErrorMap: () => (/* binding */ setErrorMap)\n/* harmony export */ });\n/* harmony import */ var _locales_en_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locales/en.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/locales/en.js\");\n\nlet overrideErrorMap = _locales_en_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvem9kL3YzL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThDO0FBQzlDLHVCQUF1QixzREFBZTtBQUNYO0FBQ3BCO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2FkbWluL0RvY3VtZW50cy9wcm9qZWN0cy9waWdneS1wb3Qvbm9kZV9tb2R1bGVzL0BlbGl6YW9zL2NvcmUvbm9kZV9tb2R1bGVzL3pvZC92My9lcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmF1bHRFcnJvck1hcCBmcm9tIFwiLi9sb2NhbGVzL2VuLmpzXCI7XG5sZXQgb3ZlcnJpZGVFcnJvck1hcCA9IGRlZmF1bHRFcnJvck1hcDtcbmV4cG9ydCB7IGRlZmF1bHRFcnJvck1hcCB9O1xuZXhwb3J0IGZ1bmN0aW9uIHNldEVycm9yTWFwKG1hcCkge1xuICAgIG92ZXJyaWRlRXJyb3JNYXAgPSBtYXA7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JNYXAoKSB7XG4gICAgcmV0dXJuIG92ZXJyaWRlRXJyb3JNYXA7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/helpers/errorUtil.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/zod/v3/helpers/errorUtil.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errorUtil: () => (/* binding */ errorUtil)\n/* harmony export */ });\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    // biome-ignore lint:\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message?.message;\n})(errorUtil || (errorUtil = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvZXJyb3JVdGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0Esc0VBQXNFLFVBQVU7QUFDaEY7QUFDQTtBQUNBLENBQUMsOEJBQThCIiwic291cmNlcyI6WyIvVXNlcnMvYWRtaW4vRG9jdW1lbnRzL3Byb2plY3RzL3BpZ2d5LXBvdC9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvZXJyb3JVdGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgZXJyb3JVdGlsO1xuKGZ1bmN0aW9uIChlcnJvclV0aWwpIHtcbiAgICBlcnJvclV0aWwuZXJyVG9PYmogPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2UgfSA6IG1lc3NhZ2UgfHwge307XG4gICAgLy8gYmlvbWUtaWdub3JlIGxpbnQ6XG4gICAgZXJyb3JVdGlsLnRvU3RyaW5nID0gKG1lc3NhZ2UpID0+IHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiID8gbWVzc2FnZSA6IG1lc3NhZ2U/Lm1lc3NhZ2U7XG59KShlcnJvclV0aWwgfHwgKGVycm9yVXRpbCA9IHt9KSk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/helpers/errorUtil.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/helpers/parseUtil.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/zod/v3/helpers/parseUtil.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DIRTY: () => (/* binding */ DIRTY),\n/* harmony export */   EMPTY_PATH: () => (/* binding */ EMPTY_PATH),\n/* harmony export */   INVALID: () => (/* binding */ INVALID),\n/* harmony export */   OK: () => (/* binding */ OK),\n/* harmony export */   ParseStatus: () => (/* binding */ ParseStatus),\n/* harmony export */   addIssueToContext: () => (/* binding */ addIssueToContext),\n/* harmony export */   isAborted: () => (/* binding */ isAborted),\n/* harmony export */   isAsync: () => (/* binding */ isAsync),\n/* harmony export */   isDirty: () => (/* binding */ isDirty),\n/* harmony export */   isValid: () => (/* binding */ isValid),\n/* harmony export */   makeIssue: () => (/* binding */ makeIssue)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/errors.js\");\n/* harmony import */ var _locales_en_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../locales/en.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/locales/en.js\");\n\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.getErrorMap)();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === _locales_en_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] ? undefined : _locales_en_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvcGFyc2VVdGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMkM7QUFDSTtBQUN4QztBQUNQLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxrQ0FBa0M7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ1Asd0JBQXdCLHVEQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsc0RBQWUsZUFBZSxzREFBZTtBQUN6RTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNPO0FBQ1A7QUFDQSxDQUFDO0FBQ00sNEJBQTRCLHdCQUF3QjtBQUNwRCx5QkFBeUIsd0JBQXdCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYWRtaW4vRG9jdW1lbnRzL3Byb2plY3RzL3BpZ2d5LXBvdC9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvcGFyc2VVdGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEVycm9yTWFwIH0gZnJvbSBcIi4uL2Vycm9ycy5qc1wiO1xuaW1wb3J0IGRlZmF1bHRFcnJvck1hcCBmcm9tIFwiLi4vbG9jYWxlcy9lbi5qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VJc3N1ZSA9IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCB7IGRhdGEsIHBhdGgsIGVycm9yTWFwcywgaXNzdWVEYXRhIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgZnVsbFBhdGggPSBbLi4ucGF0aCwgLi4uKGlzc3VlRGF0YS5wYXRoIHx8IFtdKV07XG4gICAgY29uc3QgZnVsbElzc3VlID0ge1xuICAgICAgICAuLi5pc3N1ZURhdGEsXG4gICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgIH07XG4gICAgaWYgKGlzc3VlRGF0YS5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmlzc3VlRGF0YSxcbiAgICAgICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgICAgICAgICAgbWVzc2FnZTogaXNzdWVEYXRhLm1lc3NhZ2UsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xuICAgIGNvbnN0IG1hcHMgPSBlcnJvck1hcHNcbiAgICAgICAgLmZpbHRlcigobSkgPT4gISFtKVxuICAgICAgICAuc2xpY2UoKVxuICAgICAgICAucmV2ZXJzZSgpO1xuICAgIGZvciAoY29uc3QgbWFwIG9mIG1hcHMpIHtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gbWFwKGZ1bGxJc3N1ZSwgeyBkYXRhLCBkZWZhdWx0RXJyb3I6IGVycm9yTWVzc2FnZSB9KS5tZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5pc3N1ZURhdGEsXG4gICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgRU1QVFlfUEFUSCA9IFtdO1xuZXhwb3J0IGZ1bmN0aW9uIGFkZElzc3VlVG9Db250ZXh0KGN0eCwgaXNzdWVEYXRhKSB7XG4gICAgY29uc3Qgb3ZlcnJpZGVNYXAgPSBnZXRFcnJvck1hcCgpO1xuICAgIGNvbnN0IGlzc3VlID0gbWFrZUlzc3VlKHtcbiAgICAgICAgaXNzdWVEYXRhOiBpc3N1ZURhdGEsXG4gICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgZXJyb3JNYXBzOiBbXG4gICAgICAgICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCwgLy8gY29udGV4dHVhbCBlcnJvciBtYXAgaXMgZmlyc3QgcHJpb3JpdHlcbiAgICAgICAgICAgIGN0eC5zY2hlbWFFcnJvck1hcCwgLy8gdGhlbiBzY2hlbWEtYm91bmQgbWFwIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgb3ZlcnJpZGVNYXAsIC8vIHRoZW4gZ2xvYmFsIG92ZXJyaWRlIG1hcFxuICAgICAgICAgICAgb3ZlcnJpZGVNYXAgPT09IGRlZmF1bHRFcnJvck1hcCA/IHVuZGVmaW5lZCA6IGRlZmF1bHRFcnJvck1hcCwgLy8gdGhlbiBnbG9iYWwgZGVmYXVsdCBtYXBcbiAgICAgICAgXS5maWx0ZXIoKHgpID0+ICEheCksXG4gICAgfSk7XG4gICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaChpc3N1ZSk7XG59XG5leHBvcnQgY2xhc3MgUGFyc2VTdGF0dXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gXCJ2YWxpZFwiO1xuICAgIH1cbiAgICBkaXJ0eSgpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IFwidmFsaWRcIilcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcImRpcnR5XCI7XG4gICAgfVxuICAgIGFib3J0KCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZSAhPT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gXCJhYm9ydGVkXCI7XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cykge1xuICAgICAgICBjb25zdCBhcnJheVZhbHVlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiByZXN1bHRzKSB7XG4gICAgICAgICAgICBpZiAocy5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKHMuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICBhcnJheVZhbHVlLnB1c2gocy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBhcnJheVZhbHVlIH07XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBtZXJnZU9iamVjdEFzeW5jKHN0YXR1cywgcGFpcnMpIHtcbiAgICAgICAgY29uc3Qgc3luY1BhaXJzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgcGFpci5rZXk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgICBzeW5jUGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHN5bmNQYWlycyk7XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycykge1xuICAgICAgICBjb25zdCBmaW5hbE9iamVjdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gcGFpcjtcbiAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGlmIChrZXkudmFsdWUgIT09IFwiX19wcm90b19fXCIgJiYgKHR5cGVvZiB2YWx1ZS52YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiB8fCBwYWlyLmFsd2F5c1NldCkpIHtcbiAgICAgICAgICAgICAgICBmaW5hbE9iamVjdFtrZXkudmFsdWVdID0gdmFsdWUudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBmaW5hbE9iamVjdCB9O1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBJTlZBTElEID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgc3RhdHVzOiBcImFib3J0ZWRcIixcbn0pO1xuZXhwb3J0IGNvbnN0IERJUlRZID0gKHZhbHVlKSA9PiAoeyBzdGF0dXM6IFwiZGlydHlcIiwgdmFsdWUgfSk7XG5leHBvcnQgY29uc3QgT0sgPSAodmFsdWUpID0+ICh7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZSB9KTtcbmV4cG9ydCBjb25zdCBpc0Fib3J0ZWQgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiO1xuZXhwb3J0IGNvbnN0IGlzRGlydHkgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiZGlydHlcIjtcbmV4cG9ydCBjb25zdCBpc1ZhbGlkID0gKHgpID0+IHguc3RhdHVzID09PSBcInZhbGlkXCI7XG5leHBvcnQgY29uc3QgaXNBc3luYyA9ICh4KSA9PiB0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB4IGluc3RhbmNlb2YgUHJvbWlzZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/helpers/parseUtil.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/helpers/util.js":
/*!************************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/zod/v3/helpers/util.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZodParsedType: () => (/* binding */ ZodParsedType),\n/* harmony export */   getParsedType: () => (/* binding */ getParsedType),\n/* harmony export */   objectUtil: () => (/* binding */ objectUtil),\n/* harmony export */   util: () => (/* binding */ util)\n/* harmony export */ });\nvar util;\n(function (util) {\n    util.assertEqual = (_) => { };\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && Number.isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array.map((val) => (typeof val === \"string\" ? `'${val}'` : val)).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvdXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsSUFBSTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQkFBb0I7QUFDZDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQ0FBZ0M7QUFDMUI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYWRtaW4vRG9jdW1lbnRzL3Byb2plY3RzL3BpZ2d5LXBvdC9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIHV0aWw7XG4oZnVuY3Rpb24gKHV0aWwpIHtcbiAgICB1dGlsLmFzc2VydEVxdWFsID0gKF8pID0+IHsgfTtcbiAgICBmdW5jdGlvbiBhc3NlcnRJcyhfYXJnKSB7IH1cbiAgICB1dGlsLmFzc2VydElzID0gYXNzZXJ0SXM7XG4gICAgZnVuY3Rpb24gYXNzZXJ0TmV2ZXIoX3gpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfVxuICAgIHV0aWwuYXNzZXJ0TmV2ZXIgPSBhc3NlcnROZXZlcjtcbiAgICB1dGlsLmFycmF5VG9FbnVtID0gKGl0ZW1zKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICAgIG9ialtpdGVtXSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICAgIHV0aWwuZ2V0VmFsaWRFbnVtVmFsdWVzID0gKG9iaikgPT4ge1xuICAgICAgICBjb25zdCB2YWxpZEtleXMgPSB1dGlsLm9iamVjdEtleXMob2JqKS5maWx0ZXIoKGspID0+IHR5cGVvZiBvYmpbb2JqW2tdXSAhPT0gXCJudW1iZXJcIik7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkID0ge307XG4gICAgICAgIGZvciAoY29uc3QgayBvZiB2YWxpZEtleXMpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkW2tdID0gb2JqW2tdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1dGlsLm9iamVjdFZhbHVlcyhmaWx0ZXJlZCk7XG4gICAgfTtcbiAgICB1dGlsLm9iamVjdFZhbHVlcyA9IChvYmopID0+IHtcbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0S2V5cyhvYmopLm1hcChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9ialtlXTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB1dGlsLm9iamVjdEtleXMgPSB0eXBlb2YgT2JqZWN0LmtleXMgPT09IFwiZnVuY3Rpb25cIiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhbi9iYW5cbiAgICAgICAgPyAob2JqKSA9PiBPYmplY3Qua2V5cyhvYmopIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFuL2JhblxuICAgICAgICA6IChvYmplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICB9O1xuICAgIHV0aWwuZmluZCA9IChhcnIsIGNoZWNrZXIpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGFycikge1xuICAgICAgICAgICAgaWYgKGNoZWNrZXIoaXRlbSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIHV0aWwuaXNJbnRlZ2VyID0gdHlwZW9mIE51bWJlci5pc0ludGVnZXIgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/ICh2YWwpID0+IE51bWJlci5pc0ludGVnZXIodmFsKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhbi9iYW5cbiAgICAgICAgOiAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICYmIE51bWJlci5pc0Zpbml0ZSh2YWwpICYmIE1hdGguZmxvb3IodmFsKSA9PT0gdmFsO1xuICAgIGZ1bmN0aW9uIGpvaW5WYWx1ZXMoYXJyYXksIHNlcGFyYXRvciA9IFwiIHwgXCIpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcCgodmFsKSA9PiAodHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiA/IGAnJHt2YWx9J2AgOiB2YWwpKS5qb2luKHNlcGFyYXRvcik7XG4gICAgfVxuICAgIHV0aWwuam9pblZhbHVlcyA9IGpvaW5WYWx1ZXM7XG4gICAgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIgPSAoXywgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG59KSh1dGlsIHx8ICh1dGlsID0ge30pKTtcbmV4cG9ydCB2YXIgb2JqZWN0VXRpbDtcbihmdW5jdGlvbiAob2JqZWN0VXRpbCkge1xuICAgIG9iamVjdFV0aWwubWVyZ2VTaGFwZXMgPSAoZmlyc3QsIHNlY29uZCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZmlyc3QsXG4gICAgICAgICAgICAuLi5zZWNvbmQsIC8vIHNlY29uZCBvdmVyd3JpdGVzIGZpcnN0XG4gICAgICAgIH07XG4gICAgfTtcbn0pKG9iamVjdFV0aWwgfHwgKG9iamVjdFV0aWwgPSB7fSkpO1xuZXhwb3J0IGNvbnN0IFpvZFBhcnNlZFR5cGUgPSB1dGlsLmFycmF5VG9FbnVtKFtcbiAgICBcInN0cmluZ1wiLFxuICAgIFwibmFuXCIsXG4gICAgXCJudW1iZXJcIixcbiAgICBcImludGVnZXJcIixcbiAgICBcImZsb2F0XCIsXG4gICAgXCJib29sZWFuXCIsXG4gICAgXCJkYXRlXCIsXG4gICAgXCJiaWdpbnRcIixcbiAgICBcInN5bWJvbFwiLFxuICAgIFwiZnVuY3Rpb25cIixcbiAgICBcInVuZGVmaW5lZFwiLFxuICAgIFwibnVsbFwiLFxuICAgIFwiYXJyYXlcIixcbiAgICBcIm9iamVjdFwiLFxuICAgIFwidW5rbm93blwiLFxuICAgIFwicHJvbWlzZVwiLFxuICAgIFwidm9pZFwiLFxuICAgIFwibmV2ZXJcIixcbiAgICBcIm1hcFwiLFxuICAgIFwic2V0XCIsXG5dKTtcbmV4cG9ydCBjb25zdCBnZXRQYXJzZWRUeXBlID0gKGRhdGEpID0+IHtcbiAgICBjb25zdCB0ID0gdHlwZW9mIGRhdGE7XG4gICAgc3dpdGNoICh0KSB7XG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZDtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuc3RyaW5nO1xuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLmlzTmFOKGRhdGEpID8gWm9kUGFyc2VkVHlwZS5uYW4gOiBab2RQYXJzZWRUeXBlLm51bWJlcjtcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmJvb2xlYW47XG4gICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuZnVuY3Rpb247XG4gICAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmJpZ2ludDtcbiAgICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuc3ltYm9sO1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmFycmF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5udWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEudGhlbiAmJiB0eXBlb2YgZGF0YS50aGVuID09PSBcImZ1bmN0aW9uXCIgJiYgZGF0YS5jYXRjaCAmJiB0eXBlb2YgZGF0YS5jYXRjaCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUucHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgTWFwICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5tYXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIFNldCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBEYXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuZGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLm9iamVjdDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnVua25vd247XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/helpers/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/locales/en.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/zod/v3/locales/en.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ZodError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ZodError.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/util.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/helpers/util.js\");\n\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type:\n            if (issue.received === _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.jsonStringifyReplacer)}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.keys, \", \")}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.options)}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"bigint\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.assertNever(issue);\n    }\n    return { message };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (errorMap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/locales/en.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@elizaos/core/node_modules/zod/v3/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: () => (/* binding */ BRAND),\n/* harmony export */   NEVER: () => (/* binding */ NEVER),\n/* harmony export */   Schema: () => (/* binding */ ZodType),\n/* harmony export */   ZodAny: () => (/* binding */ ZodAny),\n/* harmony export */   ZodArray: () => (/* binding */ ZodArray),\n/* harmony export */   ZodBigInt: () => (/* binding */ ZodBigInt),\n/* harmony export */   ZodBoolean: () => (/* binding */ ZodBoolean),\n/* harmony export */   ZodBranded: () => (/* binding */ ZodBranded),\n/* harmony export */   ZodCatch: () => (/* binding */ ZodCatch),\n/* harmony export */   ZodDate: () => (/* binding */ ZodDate),\n/* harmony export */   ZodDefault: () => (/* binding */ ZodDefault),\n/* harmony export */   ZodDiscriminatedUnion: () => (/* binding */ ZodDiscriminatedUnion),\n/* harmony export */   ZodEffects: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodEnum: () => (/* binding */ ZodEnum),\n/* harmony export */   ZodFirstPartyTypeKind: () => (/* binding */ ZodFirstPartyTypeKind),\n/* harmony export */   ZodFunction: () => (/* binding */ ZodFunction),\n/* harmony export */   ZodIntersection: () => (/* binding */ ZodIntersection),\n/* harmony export */   ZodLazy: () => (/* binding */ ZodLazy),\n/* harmony export */   ZodLiteral: () => (/* binding */ ZodLiteral),\n/* harmony export */   ZodMap: () => (/* binding */ ZodMap),\n/* harmony export */   ZodNaN: () => (/* binding */ ZodNaN),\n/* harmony export */   ZodNativeEnum: () => (/* binding */ ZodNativeEnum),\n/* harmony export */   ZodNever: () => (/* binding */ ZodNever),\n/* harmony export */   ZodNull: () => (/* binding */ ZodNull),\n/* harmony export */   ZodNullable: () => (/* binding */ ZodNullable),\n/* harmony export */   ZodNumber: () => (/* binding */ ZodNumber),\n/* harmony export */   ZodObject: () => (/* binding */ ZodObject),\n/* harmony export */   ZodOptional: () => (/* binding */ ZodOptional),\n/* harmony export */   ZodPipeline: () => (/* binding */ ZodPipeline),\n/* harmony export */   ZodPromise: () => (/* binding */ ZodPromise),\n/* harmony export */   ZodReadonly: () => (/* binding */ ZodReadonly),\n/* harmony export */   ZodRecord: () => (/* binding */ ZodRecord),\n/* harmony export */   ZodSchema: () => (/* binding */ ZodType),\n/* harmony export */   ZodSet: () => (/* binding */ ZodSet),\n/* harmony export */   ZodString: () => (/* binding */ ZodString),\n/* harmony export */   ZodSymbol: () => (/* binding */ ZodSymbol),\n/* harmony export */   ZodTransformer: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodTuple: () => (/* binding */ ZodTuple),\n/* harmony export */   ZodType: () => (/* binding */ ZodType),\n/* harmony export */   ZodUndefined: () => (/* binding */ ZodUndefined),\n/* harmony export */   ZodUnion: () => (/* binding */ ZodUnion),\n/* harmony export */   ZodUnknown: () => (/* binding */ ZodUnknown),\n/* harmony export */   ZodVoid: () => (/* binding */ ZodVoid),\n/* harmony export */   any: () => (/* binding */ anyType),\n/* harmony export */   array: () => (/* binding */ arrayType),\n/* harmony export */   bigint: () => (/* binding */ bigIntType),\n/* harmony export */   boolean: () => (/* binding */ booleanType),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   date: () => (/* binding */ dateType),\n/* harmony export */   datetimeRegex: () => (/* binding */ datetimeRegex),\n/* harmony export */   discriminatedUnion: () => (/* binding */ discriminatedUnionType),\n/* harmony export */   effect: () => (/* binding */ effectsType),\n/* harmony export */   \"enum\": () => (/* binding */ enumType),\n/* harmony export */   \"function\": () => (/* binding */ functionType),\n/* harmony export */   \"instanceof\": () => (/* binding */ instanceOfType),\n/* harmony export */   intersection: () => (/* binding */ intersectionType),\n/* harmony export */   late: () => (/* binding */ late),\n/* harmony export */   lazy: () => (/* binding */ lazyType),\n/* harmony export */   literal: () => (/* binding */ literalType),\n/* harmony export */   map: () => (/* binding */ mapType),\n/* harmony export */   nan: () => (/* binding */ nanType),\n/* harmony export */   nativeEnum: () => (/* binding */ nativeEnumType),\n/* harmony export */   never: () => (/* binding */ neverType),\n/* harmony export */   \"null\": () => (/* binding */ nullType),\n/* harmony export */   nullable: () => (/* binding */ nullableType),\n/* harmony export */   number: () => (/* binding */ numberType),\n/* harmony export */   object: () => (/* binding */ objectType),\n/* harmony export */   oboolean: () => (/* binding */ oboolean),\n/* harmony export */   onumber: () => (/* binding */ onumber),\n/* harmony export */   optional: () => (/* binding */ optionalType),\n/* harmony export */   ostring: () => (/* binding */ ostring),\n/* harmony export */   pipeline: () => (/* binding */ pipelineType),\n/* harmony export */   preprocess: () => (/* binding */ preprocessType),\n/* harmony export */   promise: () => (/* binding */ promiseType),\n/* harmony export */   record: () => (/* binding */ recordType),\n/* harmony export */   set: () => (/* binding */ setType),\n/* harmony export */   strictObject: () => (/* binding */ strictObjectType),\n/* harmony export */   string: () => (/* binding */ stringType),\n/* harmony export */   symbol: () => (/* binding */ symbolType),\n/* harmony export */   transformer: () => (/* binding */ effectsType),\n/* harmony export */   tuple: () => (/* binding */ tupleType),\n/* harmony export */   undefined: () => (/* binding */ undefinedType),\n/* harmony export */   union: () => (/* binding */ unionType),\n/* harmony export */   unknown: () => (/* binding */ unknownType),\n/* harmony export */   \"void\": () => (/* binding */ voidType)\n/* harmony export */ });\n/* harmony import */ var _ZodError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ZodError.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/errors.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/locales/en.js\");\n/* harmony import */ var _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/errorUtil.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/helpers/errorUtil.js\");\n/* harmony import */ var _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/parseUtil.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/helpers/parseUtil.js\");\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/util.js */ \"(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/helpers/util.js\");\n\n\n\n\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (Array.isArray(this._key)) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message ?? ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: message ?? required_error ?? ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: message ?? invalid_type_error ?? ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: params?.async ?? false,\n                contextualErrorMap: params?.errorMap,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if (err?.message?.toLowerCase()?.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params?.errorMap,\n                async: true,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    let secondsRegexSource = `[0-5]\\\\d`;\n    if (args.precision) {\n        secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n    }\n    const secondsQuantifier = args.precision ? \"+\" : \"?\"; // require seconds if precision is nonzero\n    return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        if (!header)\n            return false;\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (\"typ\" in decoded && decoded?.typ !== \"JWT\")\n            return false;\n        if (!decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"email\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"emoji\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"uuid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"nanoid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"cuid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"cuid2\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"ulid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"url\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"regex\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"duration\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"ip\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"jwt\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"cidr\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"base64\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"base64url\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            offset: options?.offset ?? false,\n            local: options?.local ?? false,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options?.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options?.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options?.position,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options?.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / 10 ** decCount;\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        let ctx = undefined;\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" || (ch.kind === \"multipleOf\" && _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null;\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (Number.isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_date,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: params?.coerce || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: tooBig ? _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big : _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(shape);\n        this._cached = { shape, keys };\n        return this._cached;\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") {\n            }\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message).message ?? defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(mask)) {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape)) {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape)) {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape)) {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(result.ctx.common.issues));\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(issues));\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(a);\n    const bType = (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n        const bKeys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(b);\n        const sharedKeys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date && +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAborted)(parsedLeft) || (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAborted)(parsedRight)) {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_intersection_types,\n                });\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n            }\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isDirty)(parsedLeft) || (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isDirty)(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\n// type ZodTupleItems = [ZodTypeAny, ...ZodTypeAny[]];\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.map) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.set) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.function) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.makeIssue)({\n                data: args,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0,_errors_js__WEBPACK_IMPORTED_MODULE_4__.getErrorMap)(), _errors_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]].filter((x) => !!x),\n                issueData: {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.makeIssue)({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0,_errors_js__WEBPACK_IMPORTED_MODULE_4__.getErrorMap)(), _errors_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]].filter((x) => !!x),\n                issueData: {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(async function (...args) {\n                const error = new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args ? args : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(this._def.values);\n        }\n        if (!this._cache.has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.string && ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.number) {\n            const expectedValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectValues(nativeEnumValues);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.getValidEnumValues(this._def.values));\n        }\n        if (!this._cache.has(input.data)) {\n            const expectedValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectValues(nativeEnumValues);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.promise && ctx.common.async === false) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const promisified = ctx.parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    if (result.status === \"dirty\")\n                        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                    if (status.value === \"dirty\")\n                        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (result.status === \"dirty\")\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                if (status.value === \"dirty\")\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!(0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(base))\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {\n                    if (!(0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(base))\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({\n                        status: status.value,\n                        value: result,\n                    }));\n                });\n            }\n        }\n        _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\n\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.null) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(result) ? result.then((data) => freeze(data)) : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = params.fatal ?? fatal ?? true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = params.fatal ?? fatal ?? true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\n\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n// requires TS 4.4+\nclass Class {\n    constructor(..._) { }\n}\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\n\nconst NEVER = _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvem9kL3YzL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdEO0FBQ0c7QUFDUjtBQUMyRjtBQUN2RTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDhEQUFPO0FBQ2YsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGtEQUFRO0FBQzFDO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw0REFBNEQ7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsK0RBQWE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwrREFBYTtBQUNyQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDhEQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwrREFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDhEQUFPO0FBQ25CO0FBQ0E7QUFD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O0FBQ21EO0FBQzVDO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNEQUFzRDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxTQUFTO0FBQy9DLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AseUNBQXlDLHNCQUFzQjtBQUMvRCx5Q0FBeUMsc0JBQXNCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCx5Q0FBeUMsc0JBQXNCO0FBQy9ELHFDQUFxQyxzQkFBc0I7QUFDM0Q7QUFDdzNCO0FBQ2ozQixjQUFjLDBEQUFPIiwic291cmNlcyI6WyIvVXNlcnMvYWRtaW4vRG9jdW1lbnRzL3Byb2plY3RzL3BpZ2d5LXBvdC9ub2RlX21vZHVsZXMvQGVsaXphb3MvY29yZS9ub2RlX21vZHVsZXMvem9kL3YzL3R5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFpvZEVycm9yLCBab2RJc3N1ZUNvZGUsIH0gZnJvbSBcIi4vWm9kRXJyb3IuanNcIjtcbmltcG9ydCB7IGRlZmF1bHRFcnJvck1hcCwgZ2V0RXJyb3JNYXAgfSBmcm9tIFwiLi9lcnJvcnMuanNcIjtcbmltcG9ydCB7IGVycm9yVXRpbCB9IGZyb20gXCIuL2hlbHBlcnMvZXJyb3JVdGlsLmpzXCI7XG5pbXBvcnQgeyBESVJUWSwgSU5WQUxJRCwgT0ssIFBhcnNlU3RhdHVzLCBhZGRJc3N1ZVRvQ29udGV4dCwgaXNBYm9ydGVkLCBpc0FzeW5jLCBpc0RpcnR5LCBpc1ZhbGlkLCBtYWtlSXNzdWUsIH0gZnJvbSBcIi4vaGVscGVycy9wYXJzZVV0aWwuanNcIjtcbmltcG9ydCB7IHV0aWwsIFpvZFBhcnNlZFR5cGUsIGdldFBhcnNlZFR5cGUgfSBmcm9tIFwiLi9oZWxwZXJzL3V0aWwuanNcIjtcbmNsYXNzIFBhcnNlSW5wdXRMYXp5UGF0aCB7XG4gICAgY29uc3RydWN0b3IocGFyZW50LCB2YWx1ZSwgcGF0aCwga2V5KSB7XG4gICAgICAgIHRoaXMuX2NhY2hlZFBhdGggPSBbXTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuZGF0YSA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9wYXRoID0gcGF0aDtcbiAgICAgICAgdGhpcy5fa2V5ID0ga2V5O1xuICAgIH1cbiAgICBnZXQgcGF0aCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZWRQYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fa2V5KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZFBhdGgucHVzaCguLi50aGlzLl9wYXRoLCAuLi50aGlzLl9rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkUGF0aC5wdXNoKC4uLnRoaXMuX3BhdGgsIHRoaXMuX2tleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFBhdGg7XG4gICAgfVxufVxuY29uc3QgaGFuZGxlUmVzdWx0ID0gKGN0eCwgcmVzdWx0KSA9PiB7XG4gICAgaWYgKGlzVmFsaWQocmVzdWx0KSkge1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBkYXRhOiByZXN1bHQudmFsdWUgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICghY3R4LmNvbW1vbi5pc3N1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYWxpZGF0aW9uIGZhaWxlZCBidXQgbm8gaXNzdWVzIGRldGVjdGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXJyb3I7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IoY3R4LmNvbW1vbi5pc3N1ZXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG59O1xuZnVuY3Rpb24gcHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpIHtcbiAgICBpZiAoIXBhcmFtcylcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIGNvbnN0IHsgZXJyb3JNYXAsIGludmFsaWRfdHlwZV9lcnJvciwgcmVxdWlyZWRfZXJyb3IsIGRlc2NyaXB0aW9uIH0gPSBwYXJhbXM7XG4gICAgaWYgKGVycm9yTWFwICYmIChpbnZhbGlkX3R5cGVfZXJyb3IgfHwgcmVxdWlyZWRfZXJyb3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgdXNlIFwiaW52YWxpZF90eXBlX2Vycm9yXCIgb3IgXCJyZXF1aXJlZF9lcnJvclwiIGluIGNvbmp1bmN0aW9uIHdpdGggY3VzdG9tIGVycm9yIG1hcC5gKTtcbiAgICB9XG4gICAgaWYgKGVycm9yTWFwKVxuICAgICAgICByZXR1cm4geyBlcnJvck1hcDogZXJyb3JNYXAsIGRlc2NyaXB0aW9uIH07XG4gICAgY29uc3QgY3VzdG9tTWFwID0gKGlzcywgY3R4KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgbWVzc2FnZSB9ID0gcGFyYW1zO1xuICAgICAgICBpZiAoaXNzLmNvZGUgPT09IFwiaW52YWxpZF9lbnVtX3ZhbHVlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IG1lc3NhZ2UgPz8gY3R4LmRlZmF1bHRFcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY3R4LmRhdGEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IG1lc3NhZ2UgPz8gcmVxdWlyZWRfZXJyb3IgPz8gY3R4LmRlZmF1bHRFcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc3MuY29kZSAhPT0gXCJpbnZhbGlkX3R5cGVcIilcbiAgICAgICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICAgICAgcmV0dXJuIHsgbWVzc2FnZTogbWVzc2FnZSA/PyBpbnZhbGlkX3R5cGVfZXJyb3IgPz8gY3R4LmRlZmF1bHRFcnJvciB9O1xuICAgIH07XG4gICAgcmV0dXJuIHsgZXJyb3JNYXA6IGN1c3RvbU1hcCwgZGVzY3JpcHRpb24gfTtcbn1cbmV4cG9ydCBjbGFzcyBab2RUeXBlIHtcbiAgICBnZXQgZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuZGVzY3JpcHRpb247XG4gICAgfVxuICAgIF9nZXRUeXBlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRQYXJzZWRUeXBlKGlucHV0LmRhdGEpO1xuICAgIH1cbiAgICBfZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCkge1xuICAgICAgICByZXR1cm4gKGN0eCB8fCB7XG4gICAgICAgICAgICBjb21tb246IGlucHV0LnBhcmVudC5jb21tb24sXG4gICAgICAgICAgICBkYXRhOiBpbnB1dC5kYXRhLFxuICAgICAgICAgICAgcGFyc2VkVHlwZTogZ2V0UGFyc2VkVHlwZShpbnB1dC5kYXRhKSxcbiAgICAgICAgICAgIHNjaGVtYUVycm9yTWFwOiB0aGlzLl9kZWYuZXJyb3JNYXAsXG4gICAgICAgICAgICBwYXRoOiBpbnB1dC5wYXRoLFxuICAgICAgICAgICAgcGFyZW50OiBpbnB1dC5wYXJlbnQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6IG5ldyBQYXJzZVN0YXR1cygpLFxuICAgICAgICAgICAgY3R4OiB7XG4gICAgICAgICAgICAgICAgY29tbW9uOiBpbnB1dC5wYXJlbnQuY29tbW9uLFxuICAgICAgICAgICAgICAgIGRhdGE6IGlucHV0LmRhdGEsXG4gICAgICAgICAgICAgICAgcGFyc2VkVHlwZTogZ2V0UGFyc2VkVHlwZShpbnB1dC5kYXRhKSxcbiAgICAgICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgICAgICAgICAgIHBhdGg6IGlucHV0LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBpbnB1dC5wYXJlbnQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBfcGFyc2VTeW5jKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlKGlucHV0KTtcbiAgICAgICAgaWYgKGlzQXN5bmMocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3luY2hyb25vdXMgcGFyc2UgZW5jb3VudGVyZWQgcHJvbWlzZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgX3BhcnNlQXN5bmMoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fcGFyc2UoaW5wdXQpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gICAgfVxuICAgIHBhcnNlKGRhdGEsIHBhcmFtcykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNhZmVQYXJzZShkYXRhLCBwYXJhbXMpO1xuICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XG4gICAgICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgICB9XG4gICAgc2FmZVBhcnNlKGRhdGEsIHBhcmFtcykge1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgIGFzeW5jOiBwYXJhbXM/LmFzeW5jID8/IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbnRleHR1YWxFcnJvck1hcDogcGFyYW1zPy5lcnJvck1hcCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXRoOiBwYXJhbXM/LnBhdGggfHwgW10sXG4gICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoZGF0YSksXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlU3luYyh7IGRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZVJlc3VsdChjdHgsIHJlc3VsdCk7XG4gICAgfVxuICAgIFwifnZhbGlkYXRlXCIoZGF0YSkge1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgIGFzeW5jOiAhIXRoaXNbXCJ+c3RhbmRhcmRcIl0uYXN5bmMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aDogW10sXG4gICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoZGF0YSksXG4gICAgICAgIH07XG4gICAgICAgIGlmICghdGhpc1tcIn5zdGFuZGFyZFwiXS5hc3luYykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZVN5bmMoeyBkYXRhLCBwYXRoOiBbXSwgcGFyZW50OiBjdHggfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQocmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZXM6IGN0eC5jb21tb24uaXNzdWVzLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnI/Lm1lc3NhZ2U/LnRvTG93ZXJDYXNlKCk/LmluY2x1ZGVzKFwiZW5jb3VudGVyZWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tcIn5zdGFuZGFyZFwiXS5hc3luYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5jb21tb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlQXN5bmMoeyBkYXRhLCBwYXRoOiBbXSwgcGFyZW50OiBjdHggfSkudGhlbigocmVzdWx0KSA9PiBpc1ZhbGlkKHJlc3VsdClcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQudmFsdWUsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICBpc3N1ZXM6IGN0eC5jb21tb24uaXNzdWVzLFxuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlQXN5bmMoZGF0YSwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2FmZVBhcnNlQXN5bmMoZGF0YSwgcGFyYW1zKTtcbiAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xuICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgfVxuICAgIGFzeW5jIHNhZmVQYXJzZUFzeW5jKGRhdGEsIHBhcmFtcykge1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgIGNvbnRleHR1YWxFcnJvck1hcDogcGFyYW1zPy5lcnJvck1hcCxcbiAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXRoOiBwYXJhbXM/LnBhdGggfHwgW10sXG4gICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoZGF0YSksXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG1heWJlQXN5bmNSZXN1bHQgPSB0aGlzLl9wYXJzZSh7IGRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKGlzQXN5bmMobWF5YmVBc3luY1Jlc3VsdCkgPyBtYXliZUFzeW5jUmVzdWx0IDogUHJvbWlzZS5yZXNvbHZlKG1heWJlQXN5bmNSZXN1bHQpKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZVJlc3VsdChjdHgsIHJlc3VsdCk7XG4gICAgfVxuICAgIHJlZmluZShjaGVjaywgbWVzc2FnZSkge1xuICAgICAgICBjb25zdCBnZXRJc3N1ZVByb3BlcnRpZXMgPSAodmFsKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIG1lc3NhZ2UgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UodmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudCgodmFsLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNoZWNrKHZhbCk7XG4gICAgICAgICAgICBjb25zdCBzZXRFcnJvciA9ICgpID0+IGN0eC5hZGRJc3N1ZSh7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmN1c3RvbSxcbiAgICAgICAgICAgICAgICAuLi5nZXRJc3N1ZVByb3BlcnRpZXModmFsKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBQcm9taXNlICE9PSBcInVuZGVmaW5lZFwiICYmIHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgc2V0RXJyb3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlZmluZW1lbnQoY2hlY2ssIHJlZmluZW1lbnREYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWZpbmVtZW50KCh2YWwsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFjaGVjayh2YWwpKSB7XG4gICAgICAgICAgICAgICAgY3R4LmFkZElzc3VlKHR5cGVvZiByZWZpbmVtZW50RGF0YSA9PT0gXCJmdW5jdGlvblwiID8gcmVmaW5lbWVudERhdGEodmFsLCBjdHgpIDogcmVmaW5lbWVudERhdGEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3JlZmluZW1lbnQocmVmaW5lbWVudCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEVmZmVjdHMoe1xuICAgICAgICAgICAgc2NoZW1hOiB0aGlzLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzLFxuICAgICAgICAgICAgZWZmZWN0OiB7IHR5cGU6IFwicmVmaW5lbWVudFwiLCByZWZpbmVtZW50IH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdXBlclJlZmluZShyZWZpbmVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWZpbmVtZW50KHJlZmluZW1lbnQpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihkZWYpIHtcbiAgICAgICAgLyoqIEFsaWFzIG9mIHNhZmVQYXJzZUFzeW5jICovXG4gICAgICAgIHRoaXMuc3BhID0gdGhpcy5zYWZlUGFyc2VBc3luYztcbiAgICAgICAgdGhpcy5fZGVmID0gZGVmO1xuICAgICAgICB0aGlzLnBhcnNlID0gdGhpcy5wYXJzZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNhZmVQYXJzZSA9IHRoaXMuc2FmZVBhcnNlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucGFyc2VBc3luYyA9IHRoaXMucGFyc2VBc3luYy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNhZmVQYXJzZUFzeW5jID0gdGhpcy5zYWZlUGFyc2VBc3luYy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNwYSA9IHRoaXMuc3BhLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVmaW5lID0gdGhpcy5yZWZpbmUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5yZWZpbmVtZW50ID0gdGhpcy5yZWZpbmVtZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3VwZXJSZWZpbmUgPSB0aGlzLnN1cGVyUmVmaW5lLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub3B0aW9uYWwgPSB0aGlzLm9wdGlvbmFsLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMubnVsbGFibGUgPSB0aGlzLm51bGxhYmxlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMubnVsbGlzaCA9IHRoaXMubnVsbGlzaC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmFycmF5ID0gdGhpcy5hcnJheS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnByb21pc2UgPSB0aGlzLnByb21pc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vciA9IHRoaXMub3IuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5hbmQgPSB0aGlzLmFuZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuYnJhbmQgPSB0aGlzLmJyYW5kLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZGVmYXVsdCA9IHRoaXMuZGVmYXVsdC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmNhdGNoID0gdGhpcy5jYXRjaC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRlc2NyaWJlID0gdGhpcy5kZXNjcmliZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnBpcGUgPSB0aGlzLnBpcGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5yZWFkb25seSA9IHRoaXMucmVhZG9ubHkuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5pc051bGxhYmxlID0gdGhpcy5pc051bGxhYmxlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaXNPcHRpb25hbCA9IHRoaXMuaXNPcHRpb25hbC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzW1wifnN0YW5kYXJkXCJdID0ge1xuICAgICAgICAgICAgdmVyc2lvbjogMSxcbiAgICAgICAgICAgIHZlbmRvcjogXCJ6b2RcIixcbiAgICAgICAgICAgIHZhbGlkYXRlOiAoZGF0YSkgPT4gdGhpc1tcIn52YWxpZGF0ZVwiXShkYXRhKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgb3B0aW9uYWwoKSB7XG4gICAgICAgIHJldHVybiBab2RPcHRpb25hbC5jcmVhdGUodGhpcywgdGhpcy5fZGVmKTtcbiAgICB9XG4gICAgbnVsbGFibGUoKSB7XG4gICAgICAgIHJldHVybiBab2ROdWxsYWJsZS5jcmVhdGUodGhpcywgdGhpcy5fZGVmKTtcbiAgICB9XG4gICAgbnVsbGlzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubnVsbGFibGUoKS5vcHRpb25hbCgpO1xuICAgIH1cbiAgICBhcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIFpvZEFycmF5LmNyZWF0ZSh0aGlzKTtcbiAgICB9XG4gICAgcHJvbWlzZSgpIHtcbiAgICAgICAgcmV0dXJuIFpvZFByb21pc2UuY3JlYXRlKHRoaXMsIHRoaXMuX2RlZik7XG4gICAgfVxuICAgIG9yKG9wdGlvbikge1xuICAgICAgICByZXR1cm4gWm9kVW5pb24uY3JlYXRlKFt0aGlzLCBvcHRpb25dLCB0aGlzLl9kZWYpO1xuICAgIH1cbiAgICBhbmQoaW5jb21pbmcpIHtcbiAgICAgICAgcmV0dXJuIFpvZEludGVyc2VjdGlvbi5jcmVhdGUodGhpcywgaW5jb21pbmcsIHRoaXMuX2RlZik7XG4gICAgfVxuICAgIHRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcy5fZGVmKSxcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcyxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyxcbiAgICAgICAgICAgIGVmZmVjdDogeyB0eXBlOiBcInRyYW5zZm9ybVwiLCB0cmFuc2Zvcm0gfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRlZmF1bHQoZGVmKSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZUZ1bmMgPSB0eXBlb2YgZGVmID09PSBcImZ1bmN0aW9uXCIgPyBkZWYgOiAoKSA9PiBkZWY7XG4gICAgICAgIHJldHVybiBuZXcgWm9kRGVmYXVsdCh7XG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXMuX2RlZiksXG4gICAgICAgICAgICBpbm5lclR5cGU6IHRoaXMsXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZUZ1bmMsXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERlZmF1bHQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBicmFuZCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RCcmFuZGVkKHtcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQnJhbmRlZCxcbiAgICAgICAgICAgIHR5cGU6IHRoaXMsXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXMuX2RlZiksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaChkZWYpIHtcbiAgICAgICAgY29uc3QgY2F0Y2hWYWx1ZUZ1bmMgPSB0eXBlb2YgZGVmID09PSBcImZ1bmN0aW9uXCIgPyBkZWYgOiAoKSA9PiBkZWY7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQ2F0Y2goe1xuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlzLl9kZWYpLFxuICAgICAgICAgICAgaW5uZXJUeXBlOiB0aGlzLFxuICAgICAgICAgICAgY2F0Y2hWYWx1ZTogY2F0Y2hWYWx1ZUZ1bmMsXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZENhdGNoLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGVzY3JpYmUoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgY29uc3QgVGhpcyA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIHJldHVybiBuZXcgVGhpcyh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBpcGUodGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBab2RQaXBlbGluZS5jcmVhdGUodGhpcywgdGFyZ2V0KTtcbiAgICB9XG4gICAgcmVhZG9ubHkoKSB7XG4gICAgICAgIHJldHVybiBab2RSZWFkb25seS5jcmVhdGUodGhpcyk7XG4gICAgfVxuICAgIGlzT3B0aW9uYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNhZmVQYXJzZSh1bmRlZmluZWQpLnN1Y2Nlc3M7XG4gICAgfVxuICAgIGlzTnVsbGFibGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNhZmVQYXJzZShudWxsKS5zdWNjZXNzO1xuICAgIH1cbn1cbmNvbnN0IGN1aWRSZWdleCA9IC9eY1teXFxzLV17OCx9JC9pO1xuY29uc3QgY3VpZDJSZWdleCA9IC9eWzAtOWEtel0rJC87XG5jb25zdCB1bGlkUmVnZXggPSAvXlswLTlBLUhKS01OUC1UVi1aXXsyNn0kL2k7XG4vLyBjb25zdCB1dWlkUmVnZXggPVxuLy8gICAvXihbYS1mMC05XXs4fS1bYS1mMC05XXs0fS1bMS01XVthLWYwLTldezN9LVthLWYwLTldezR9LVthLWYwLTldezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pO1xuY29uc3QgdXVpZFJlZ2V4ID0gL15bMC05YS1mQS1GXXs4fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXsxMn0kL2k7XG5jb25zdCBuYW5vaWRSZWdleCA9IC9eW2EtejAtOV8tXXsyMX0kL2k7XG5jb25zdCBqd3RSZWdleCA9IC9eW0EtWmEtejAtOS1fXStcXC5bQS1aYS16MC05LV9dK1xcLltBLVphLXowLTktX10qJC87XG5jb25zdCBkdXJhdGlvblJlZ2V4ID0gL15bLStdP1AoPyEkKSg/Oig/OlstK10/XFxkK1kpfCg/OlstK10/XFxkK1suLF1cXGQrWSQpKT8oPzooPzpbLStdP1xcZCtNKXwoPzpbLStdP1xcZCtbLixdXFxkK00kKSk/KD86KD86Wy0rXT9cXGQrVyl8KD86Wy0rXT9cXGQrWy4sXVxcZCtXJCkpPyg/Oig/OlstK10/XFxkK0QpfCg/OlstK10/XFxkK1suLF1cXGQrRCQpKT8oPzpUKD89W1xcZCstXSkoPzooPzpbLStdP1xcZCtIKXwoPzpbLStdP1xcZCtbLixdXFxkK0gkKSk/KD86KD86Wy0rXT9cXGQrTSl8KD86Wy0rXT9cXGQrWy4sXVxcZCtNJCkpPyg/OlstK10/XFxkKyg/OlsuLF1cXGQrKT9TKT8pPz8kLztcbi8vIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ2MTgxLzE1NTAxNTVcbi8vIG9sZCB2ZXJzaW9uOiB0b28gc2xvdywgZGlkbid0IHN1cHBvcnQgdW5pY29kZVxuLy8gY29uc3QgZW1haWxSZWdleCA9IC9eKCgoW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKyhcXC4oW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKykqKXwoKFxceDIyKSgoKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KChbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHg3Zl18XFx4MjF8W1xceDIzLVxceDViXXxbXFx4NWQtXFx4N2VdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoXFxcXChbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGQtXFx4N2ZdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpKSooKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KFxceDIyKSkpQCgoKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSQvaTtcbi8vb2xkIGVtYWlsIHJlZ2V4XG4vLyBjb25zdCBlbWFpbFJlZ2V4ID0gL14oKFtePD4oKVtcXF0uLDs6XFxzQFwiXSsoXFwuW148PigpW1xcXS4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKCg/IS0pKFtePD4oKVtcXF0uLDs6XFxzQFwiXStcXC4pK1tePD4oKVtcXF0uLDs6XFxzQFwiXXsxLH0pW14tPD4oKVtcXF0uLDs6XFxzQFwiXSQvaTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuLy8gY29uc3QgZW1haWxSZWdleCA9XG4vLyAgIC9eKChbXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcXFwiXSspKil8KFxcXCIuK1xcXCIpKUAoKFxcWygoKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKVxcLil7M30oKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKVxcXSl8KFxcW0lQdjY6KChbYS1mMC05XXsxLDR9Oil7N318OjooW2EtZjAtOV17MSw0fTopezAsNn18KFthLWYwLTldezEsNH06KXsxfTooW2EtZjAtOV17MSw0fTopezAsNX18KFthLWYwLTldezEsNH06KXsyfTooW2EtZjAtOV17MSw0fTopezAsNH18KFthLWYwLTldezEsNH06KXszfTooW2EtZjAtOV17MSw0fTopezAsM318KFthLWYwLTldezEsNH06KXs0fTooW2EtZjAtOV17MSw0fTopezAsMn18KFthLWYwLTldezEsNH06KXs1fTooW2EtZjAtOV17MSw0fTopezAsMX0pKFthLWYwLTldezEsNH18KCgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpXFwuKXszfSgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpKVxcXSl8KFtBLVphLXowLTldKFtBLVphLXowLTktXSpbQS1aYS16MC05XSkqKFxcLltBLVphLXpdezIsfSkrKSkkLztcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxuLy8gICAvXlthLXpBLVowLTlcXC5cXCFcXCNcXCRcXCVcXCZcXCdcXCpcXCtcXC9cXD1cXD9cXF5cXF9cXGBcXHtcXHxcXH1cXH5cXC1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvO1xuLy8gY29uc3QgZW1haWxSZWdleCA9XG4vLyAgIC9eKD86W2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKyg/OlxcLlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSspKnxcIig/OltcXHgwMS1cXHgwOFxceDBiXFx4MGNcXHgwZS1cXHgxZlxceDIxXFx4MjMtXFx4NWJcXHg1ZC1cXHg3Zl18XFxcXFtcXHgwMS1cXHgwOVxceDBiXFx4MGNcXHgwZS1cXHg3Zl0pKlwiKUAoPzooPzpbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XFwuKStbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/fFxcWyg/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/fFthLXowLTktXSpbYS16MC05XTooPzpbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHgyMS1cXHg1YVxceDUzLVxceDdmXXxcXFxcW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBlLVxceDdmXSkrKVxcXSkkL2k7XG5jb25zdCBlbWFpbFJlZ2V4ID0gL14oPyFcXC4pKD8hLipcXC5cXC4pKFtBLVowLTlfJytcXC1cXC5dKilbQS1aMC05XystXUAoW0EtWjAtOV1bQS1aMC05XFwtXSpcXC4pK1tBLVpdezIsfSQvaTtcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxuLy8gICAvXlthLXowLTkuISMkJSbigJkqKy89P15fYHt8fX4tXStAW2EtejAtOS1dKyg/OlxcLlthLXowLTlcXC1dKykqJC9pO1xuLy8gZnJvbSBodHRwczovL3RoZWtldmluc2NvdHQuY29tL2Vtb2ppcy1pbi1qYXZhc2NyaXB0LyN3cml0aW5nLWEtcmVndWxhci1leHByZXNzaW9uXG5jb25zdCBfZW1vamlSZWdleCA9IGBeKFxcXFxwe0V4dGVuZGVkX1BpY3RvZ3JhcGhpY318XFxcXHB7RW1vamlfQ29tcG9uZW50fSkrJGA7XG5sZXQgZW1vamlSZWdleDtcbi8vIGZhc3Rlciwgc2ltcGxlciwgc2FmZXJcbmNvbnN0IGlwdjRSZWdleCA9IC9eKD86KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKVxcLil7M30oPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pJC87XG5jb25zdCBpcHY0Q2lkclJlZ2V4ID0gL14oPzooPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSlcXC8oM1swLTJdfFsxMl0/WzAtOV0pJC87XG4vLyBjb25zdCBpcHY2UmVnZXggPVxuLy8gL14oKFthLWYwLTldezEsNH06KXs3fXw6OihbYS1mMC05XXsxLDR9Oil7MCw2fXwoW2EtZjAtOV17MSw0fTopezF9OihbYS1mMC05XXsxLDR9Oil7MCw1fXwoW2EtZjAtOV17MSw0fTopezJ9OihbYS1mMC05XXsxLDR9Oil7MCw0fXwoW2EtZjAtOV17MSw0fTopezN9OihbYS1mMC05XXsxLDR9Oil7MCwzfXwoW2EtZjAtOV17MSw0fTopezR9OihbYS1mMC05XXsxLDR9Oil7MCwyfXwoW2EtZjAtOV17MSw0fTopezV9OihbYS1mMC05XXsxLDR9Oil7MCwxfSkoW2EtZjAtOV17MSw0fXwoKCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXC4pezN9KCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSkpJC87XG5jb25zdCBpcHY2UmVnZXggPSAvXigoWzAtOWEtZkEtRl17MSw0fTopezcsN31bMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw3fTp8KFswLTlhLWZBLUZdezEsNH06KXsxLDZ9OlswLTlhLWZBLUZdezEsNH18KFswLTlhLWZBLUZdezEsNH06KXsxLDV9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDJ9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwzfXwoWzAtOWEtZkEtRl17MSw0fTopezEsM30oOlswLTlhLWZBLUZdezEsNH0pezEsNH18KFswLTlhLWZBLUZdezEsNH06KXsxLDJ9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDV9fFswLTlhLWZBLUZdezEsNH06KCg6WzAtOWEtZkEtRl17MSw0fSl7MSw2fSl8OigoOlswLTlhLWZBLUZdezEsNH0pezEsN318Oil8ZmU4MDooOlswLTlhLWZBLUZdezAsNH0pezAsNH0lWzAtOWEtekEtWl17MSx9fDo6KGZmZmYoOjB7MSw0fSl7MCwxfTopezAsMX0oKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSl8KFswLTlhLWZBLUZdezEsNH06KXsxLDR9OigoMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pXFwuKXszLDN9KDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKSkkLztcbmNvbnN0IGlwdjZDaWRyUmVnZXggPSAvXigoWzAtOWEtZkEtRl17MSw0fTopezcsN31bMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw3fTp8KFswLTlhLWZBLUZdezEsNH06KXsxLDZ9OlswLTlhLWZBLUZdezEsNH18KFswLTlhLWZBLUZdezEsNH06KXsxLDV9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDJ9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwzfXwoWzAtOWEtZkEtRl17MSw0fTopezEsM30oOlswLTlhLWZBLUZdezEsNH0pezEsNH18KFswLTlhLWZBLUZdezEsNH06KXsxLDJ9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDV9fFswLTlhLWZBLUZdezEsNH06KCg6WzAtOWEtZkEtRl17MSw0fSl7MSw2fSl8OigoOlswLTlhLWZBLUZdezEsNH0pezEsN318Oil8ZmU4MDooOlswLTlhLWZBLUZdezAsNH0pezAsNH0lWzAtOWEtekEtWl17MSx9fDo6KGZmZmYoOjB7MSw0fSl7MCwxfTopezAsMX0oKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSl8KFswLTlhLWZBLUZdezEsNH06KXsxLDR9OigoMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pXFwuKXszLDN9KDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKSlcXC8oMTJbMC04XXwxWzAxXVswLTldfFsxLTldP1swLTldKSQvO1xuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzg2MDM5Mi9kZXRlcm1pbmUtaWYtc3RyaW5nLWlzLWluLWJhc2U2NC11c2luZy1qYXZhc2NyaXB0XG5jb25zdCBiYXNlNjRSZWdleCA9IC9eKFswLTlhLXpBLVorL117NH0pKigoWzAtOWEtekEtWisvXXsyfT09KXwoWzAtOWEtekEtWisvXXszfT0pKT8kLztcbi8vIGh0dHBzOi8vYmFzZTY0Lmd1cnUvc3RhbmRhcmRzL2Jhc2U2NHVybFxuY29uc3QgYmFzZTY0dXJsUmVnZXggPSAvXihbMC05YS16QS1aLV9dezR9KSooKFswLTlhLXpBLVotX117Mn0oPT0pPyl8KFswLTlhLXpBLVotX117M30oPSk/KSk/JC87XG4vLyBzaW1wbGVcbi8vIGNvbnN0IGRhdGVSZWdleFNvdXJjZSA9IGBcXFxcZHs0fS1cXFxcZHsyfS1cXFxcZHsyfWA7XG4vLyBubyBsZWFwIHllYXIgdmFsaWRhdGlvblxuLy8gY29uc3QgZGF0ZVJlZ2V4U291cmNlID0gYFxcXFxkezR9LSgoMFsxMzU3OF18MTB8MTIpLTMxfCgwWzEzLTldfDFbMC0yXSktMzB8KDBbMS05XXwxWzAtMl0pLSgwWzEtOV18MVxcXFxkfDJcXFxcZCkpYDtcbi8vIHdpdGggbGVhcCB5ZWFyIHZhbGlkYXRpb25cbmNvbnN0IGRhdGVSZWdleFNvdXJjZSA9IGAoKFxcXFxkXFxcXGRbMjQ2OF1bMDQ4XXxcXFxcZFxcXFxkWzEzNTc5XVsyNl18XFxcXGRcXFxcZDBbNDhdfFswMjQ2OF1bMDQ4XTAwfFsxMzU3OV1bMjZdMDApLTAyLTI5fFxcXFxkezR9LSgoMFsxMzU3OF18MVswMl0pLSgwWzEtOV18WzEyXVxcXFxkfDNbMDFdKXwoMFs0NjldfDExKS0oMFsxLTldfFsxMl1cXFxcZHwzMCl8KDAyKS0oMFsxLTldfDFcXFxcZHwyWzAtOF0pKSlgO1xuY29uc3QgZGF0ZVJlZ2V4ID0gbmV3IFJlZ0V4cChgXiR7ZGF0ZVJlZ2V4U291cmNlfSRgKTtcbmZ1bmN0aW9uIHRpbWVSZWdleFNvdXJjZShhcmdzKSB7XG4gICAgbGV0IHNlY29uZHNSZWdleFNvdXJjZSA9IGBbMC01XVxcXFxkYDtcbiAgICBpZiAoYXJncy5wcmVjaXNpb24pIHtcbiAgICAgICAgc2Vjb25kc1JlZ2V4U291cmNlID0gYCR7c2Vjb25kc1JlZ2V4U291cmNlfVxcXFwuXFxcXGR7JHthcmdzLnByZWNpc2lvbn19YDtcbiAgICB9XG4gICAgZWxzZSBpZiAoYXJncy5wcmVjaXNpb24gPT0gbnVsbCkge1xuICAgICAgICBzZWNvbmRzUmVnZXhTb3VyY2UgPSBgJHtzZWNvbmRzUmVnZXhTb3VyY2V9KFxcXFwuXFxcXGQrKT9gO1xuICAgIH1cbiAgICBjb25zdCBzZWNvbmRzUXVhbnRpZmllciA9IGFyZ3MucHJlY2lzaW9uID8gXCIrXCIgOiBcIj9cIjsgLy8gcmVxdWlyZSBzZWNvbmRzIGlmIHByZWNpc2lvbiBpcyBub256ZXJvXG4gICAgcmV0dXJuIGAoWzAxXVxcXFxkfDJbMC0zXSk6WzAtNV1cXFxcZCg6JHtzZWNvbmRzUmVnZXhTb3VyY2V9KSR7c2Vjb25kc1F1YW50aWZpZXJ9YDtcbn1cbmZ1bmN0aW9uIHRpbWVSZWdleChhcmdzKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoYF4ke3RpbWVSZWdleFNvdXJjZShhcmdzKX0kYCk7XG59XG4vLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMxNDMyMzFcbmV4cG9ydCBmdW5jdGlvbiBkYXRldGltZVJlZ2V4KGFyZ3MpIHtcbiAgICBsZXQgcmVnZXggPSBgJHtkYXRlUmVnZXhTb3VyY2V9VCR7dGltZVJlZ2V4U291cmNlKGFyZ3MpfWA7XG4gICAgY29uc3Qgb3B0cyA9IFtdO1xuICAgIG9wdHMucHVzaChhcmdzLmxvY2FsID8gYFo/YCA6IGBaYCk7XG4gICAgaWYgKGFyZ3Mub2Zmc2V0KVxuICAgICAgICBvcHRzLnB1c2goYChbKy1dXFxcXGR7Mn06P1xcXFxkezJ9KWApO1xuICAgIHJlZ2V4ID0gYCR7cmVnZXh9KCR7b3B0cy5qb2luKFwifFwiKX0pYDtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChgXiR7cmVnZXh9JGApO1xufVxuZnVuY3Rpb24gaXNWYWxpZElQKGlwLCB2ZXJzaW9uKSB7XG4gICAgaWYgKCh2ZXJzaW9uID09PSBcInY0XCIgfHwgIXZlcnNpb24pICYmIGlwdjRSZWdleC50ZXN0KGlwKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCh2ZXJzaW9uID09PSBcInY2XCIgfHwgIXZlcnNpb24pICYmIGlwdjZSZWdleC50ZXN0KGlwKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNWYWxpZEpXVChqd3QsIGFsZykge1xuICAgIGlmICghand0UmVnZXgudGVzdChqd3QpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgW2hlYWRlcl0gPSBqd3Quc3BsaXQoXCIuXCIpO1xuICAgICAgICBpZiAoIWhlYWRlcilcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gQ29udmVydCBiYXNlNjR1cmwgdG8gYmFzZTY0XG4gICAgICAgIGNvbnN0IGJhc2U2NCA9IGhlYWRlclxuICAgICAgICAgICAgLnJlcGxhY2UoLy0vZywgXCIrXCIpXG4gICAgICAgICAgICAucmVwbGFjZSgvXy9nLCBcIi9cIilcbiAgICAgICAgICAgIC5wYWRFbmQoaGVhZGVyLmxlbmd0aCArICgoNCAtIChoZWFkZXIubGVuZ3RoICUgNCkpICUgNCksIFwiPVwiKTtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IEpTT04ucGFyc2UoYXRvYihiYXNlNjQpKTtcbiAgICAgICAgaWYgKHR5cGVvZiBkZWNvZGVkICE9PSBcIm9iamVjdFwiIHx8IGRlY29kZWQgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChcInR5cFwiIGluIGRlY29kZWQgJiYgZGVjb2RlZD8udHlwICE9PSBcIkpXVFwiKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIWRlY29kZWQuYWxnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoYWxnICYmIGRlY29kZWQuYWxnICE9PSBhbGcpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1ZhbGlkQ2lkcihpcCwgdmVyc2lvbikge1xuICAgIGlmICgodmVyc2lvbiA9PT0gXCJ2NFwiIHx8ICF2ZXJzaW9uKSAmJiBpcHY0Q2lkclJlZ2V4LnRlc3QoaXApKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoKHZlcnNpb24gPT09IFwidjZcIiB8fCAhdmVyc2lvbikgJiYgaXB2NkNpZHJSZWdleC50ZXN0KGlwKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGNsYXNzIFpvZFN0cmluZyBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IFN0cmluZyhpbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnN0cmluZykge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5zdHJpbmcsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgbGV0IGN0eCA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA8IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA+IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibGVuZ3RoXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBpbnB1dC5kYXRhLmxlbmd0aCA+IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gaW5wdXQuZGF0YS5sZW5ndGggPCBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vQmlnIHx8IHRvb1NtYWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9vQmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZW1haWxcIikge1xuICAgICAgICAgICAgICAgIGlmICghZW1haWxSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiZW1haWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVtb2ppXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVtb2ppUmVnZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZW1vamlSZWdleCA9IG5ldyBSZWdFeHAoX2Vtb2ppUmVnZXgsIFwidVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFlbW9qaVJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJlbW9qaVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidXVpZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1dWlkUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInV1aWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm5hbm9pZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFuYW5vaWRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwibmFub2lkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJjdWlkXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWN1aWRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiY3VpZDJcIikge1xuICAgICAgICAgICAgICAgIGlmICghY3VpZDJSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInVsaWRcIikge1xuICAgICAgICAgICAgICAgIGlmICghdWxpZFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1bGlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ1cmxcIikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBVUkwoaW5wdXQuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1cmxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInJlZ2V4XCIpIHtcbiAgICAgICAgICAgICAgICBjaGVjay5yZWdleC5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlc3RSZXN1bHQgPSBjaGVjay5yZWdleC50ZXN0KGlucHV0LmRhdGEpO1xuICAgICAgICAgICAgICAgIGlmICghdGVzdFJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInJlZ2V4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0cmltXCIpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5kYXRhID0gaW5wdXQuZGF0YS50cmltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImluY2x1ZGVzXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmRhdGEuaW5jbHVkZXMoY2hlY2sudmFsdWUsIGNoZWNrLnBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IGluY2x1ZGVzOiBjaGVjay52YWx1ZSwgcG9zaXRpb246IGNoZWNrLnBvc2l0aW9uIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0b0xvd2VyQ2FzZVwiKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuZGF0YSA9IGlucHV0LmRhdGEudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidG9VcHBlckNhc2VcIikge1xuICAgICAgICAgICAgICAgIGlucHV0LmRhdGEgPSBpbnB1dC5kYXRhLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInN0YXJ0c1dpdGhcIikge1xuICAgICAgICAgICAgICAgIGlmICghaW5wdXQuZGF0YS5zdGFydHNXaXRoKGNoZWNrLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IHN0YXJ0c1dpdGg6IGNoZWNrLnZhbHVlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJlbmRzV2l0aFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5kYXRhLmVuZHNXaXRoKGNoZWNrLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IGVuZHNXaXRoOiBjaGVjay52YWx1ZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZGF0ZXRpbWVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gZGF0ZXRpbWVSZWdleChjaGVjayk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImRhdGVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gZGF0ZVJlZ2V4O1xuICAgICAgICAgICAgICAgIGlmICghcmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInRpbWVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gdGltZVJlZ2V4KGNoZWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ0aW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJkdXJhdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkdXJhdGlvblJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJkdXJhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiaXBcIikge1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZElQKGlucHV0LmRhdGEsIGNoZWNrLnZlcnNpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiaXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImp3dFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkSldUKGlucHV0LmRhdGEsIGNoZWNrLmFsZykpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJqd3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImNpZHJcIikge1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZENpZHIoaW5wdXQuZGF0YSwgY2hlY2sudmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJjaWRyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJiYXNlNjRcIikge1xuICAgICAgICAgICAgICAgIGlmICghYmFzZTY0UmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImJhc2U2NFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiYmFzZTY0dXJsXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWJhc2U2NHVybFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJiYXNlNjR1cmxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGNoZWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGlucHV0LmRhdGEgfTtcbiAgICB9XG4gICAgX3JlZ2V4KHJlZ2V4LCB2YWxpZGF0aW9uLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmluZW1lbnQoKGRhdGEpID0+IHJlZ2V4LnRlc3QoZGF0YSksIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb24sXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RTdHJpbmcoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZW1haWwobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImVtYWlsXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgdXJsKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1cmxcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBlbW9qaShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZW1vamlcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICB1dWlkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1dWlkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgbmFub2lkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJuYW5vaWRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBjdWlkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJjdWlkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgY3VpZDIobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImN1aWQyXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgdWxpZChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwidWxpZFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIGJhc2U2NChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiYmFzZTY0XCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgYmFzZTY0dXJsKG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gYmFzZTY0dXJsIGVuY29kaW5nIGlzIGEgbW9kaWZpY2F0aW9uIG9mIGJhc2U2NCB0aGF0IGNhbiBzYWZlbHkgYmUgdXNlZCBpbiBVUkxzIGFuZCBmaWxlbmFtZXNcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwiYmFzZTY0dXJsXCIsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBqd3Qob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImp3dFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucykgfSk7XG4gICAgfVxuICAgIGlwKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJpcFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucykgfSk7XG4gICAgfVxuICAgIGNpZHIob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImNpZHJcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnMpIH0pO1xuICAgIH1cbiAgICBkYXRldGltZShvcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgICAgICBraW5kOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICAgICAgcHJlY2lzaW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIG9mZnNldDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbG9jYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJkYXRldGltZVwiLFxuICAgICAgICAgICAgcHJlY2lzaW9uOiB0eXBlb2Ygb3B0aW9ucz8ucHJlY2lzaW9uID09PSBcInVuZGVmaW5lZFwiID8gbnVsbCA6IG9wdGlvbnM/LnByZWNpc2lvbixcbiAgICAgICAgICAgIG9mZnNldDogb3B0aW9ucz8ub2Zmc2V0ID8/IGZhbHNlLFxuICAgICAgICAgICAgbG9jYWw6IG9wdGlvbnM/LmxvY2FsID8/IGZhbHNlLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnM/Lm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGF0ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZGF0ZVwiLCBtZXNzYWdlIH0pO1xuICAgIH1cbiAgICB0aW1lKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAgICAgIGtpbmQ6IFwidGltZVwiLFxuICAgICAgICAgICAgICAgIHByZWNpc2lvbjogbnVsbCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBvcHRpb25zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwidGltZVwiLFxuICAgICAgICAgICAgcHJlY2lzaW9uOiB0eXBlb2Ygb3B0aW9ucz8ucHJlY2lzaW9uID09PSBcInVuZGVmaW5lZFwiID8gbnVsbCA6IG9wdGlvbnM/LnByZWNpc2lvbixcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zPy5tZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGR1cmF0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJkdXJhdGlvblwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIHJlZ2V4KHJlZ2V4LCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcInJlZ2V4XCIsXG4gICAgICAgICAgICByZWdleDogcmVnZXgsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbmNsdWRlcyh2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJpbmNsdWRlc1wiLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgcG9zaXRpb246IG9wdGlvbnM/LnBvc2l0aW9uLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnM/Lm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhcnRzV2l0aCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJzdGFydHNXaXRoXCIsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbmRzV2l0aCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJlbmRzV2l0aFwiLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWluKG1pbkxlbmd0aCwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiBtaW5MZW5ndGgsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IG1heExlbmd0aCxcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxlbmd0aChsZW4sIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibGVuZ3RoXCIsXG4gICAgICAgICAgICB2YWx1ZTogbGVuLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBgLm1pbigxKWBcbiAgICAgKi9cbiAgICBub25lbXB0eShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbigxLCBlcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkpO1xuICAgIH1cbiAgICB0cmltKCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCB7IGtpbmQ6IFwidHJpbVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9Mb3dlckNhc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIHsga2luZDogXCJ0b0xvd2VyQ2FzZVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9VcHBlckNhc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIHsga2luZDogXCJ0b1VwcGVyQ2FzZVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGlzRGF0ZXRpbWUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZGF0ZXRpbWVcIik7XG4gICAgfVxuICAgIGdldCBpc0RhdGUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZGF0ZVwiKTtcbiAgICB9XG4gICAgZ2V0IGlzVGltZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ0aW1lXCIpO1xuICAgIH1cbiAgICBnZXQgaXNEdXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJkdXJhdGlvblwiKTtcbiAgICB9XG4gICAgZ2V0IGlzRW1haWwoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZW1haWxcIik7XG4gICAgfVxuICAgIGdldCBpc1VSTCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ1cmxcIik7XG4gICAgfVxuICAgIGdldCBpc0Vtb2ppKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImVtb2ppXCIpO1xuICAgIH1cbiAgICBnZXQgaXNVVUlEKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcInV1aWRcIik7XG4gICAgfVxuICAgIGdldCBpc05BTk9JRCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJuYW5vaWRcIik7XG4gICAgfVxuICAgIGdldCBpc0NVSUQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY3VpZFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQ1VJRDIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY3VpZDJcIik7XG4gICAgfVxuICAgIGdldCBpc1VMSUQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwidWxpZFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzSVAoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiaXBcIik7XG4gICAgfVxuICAgIGdldCBpc0NJRFIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY2lkclwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQmFzZTY0KCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImJhc2U2NFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQmFzZTY0dXJsKCkge1xuICAgICAgICAvLyBiYXNlNjR1cmwgZW5jb2RpbmcgaXMgYSBtb2RpZmljYXRpb24gb2YgYmFzZTY0IHRoYXQgY2FuIHNhZmVseSBiZSB1c2VkIGluIFVSTHMgYW5kIGZpbGVuYW1lc1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImJhc2U2NHVybFwiKTtcbiAgICB9XG4gICAgZ2V0IG1pbkxlbmd0aCgpIHtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBnZXQgbWF4TGVuZ3RoKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxufVxuWm9kU3RyaW5nLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAgIGNoZWNrczogW10sXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3RyaW5nLFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlID8/IGZhbHNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzk2NjQ4NC93aHktZG9lcy1tb2R1bHVzLW9wZXJhdG9yLXJldHVybi1mcmFjdGlvbmFsLW51bWJlci1pbi1qYXZhc2NyaXB0LzMxNzExMDM0IzMxNzExMDM0XG5mdW5jdGlvbiBmbG9hdFNhZmVSZW1haW5kZXIodmFsLCBzdGVwKSB7XG4gICAgY29uc3QgdmFsRGVjQ291bnQgPSAodmFsLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aDtcbiAgICBjb25zdCBzdGVwRGVjQ291bnQgPSAoc3RlcC50b1N0cmluZygpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGg7XG4gICAgY29uc3QgZGVjQ291bnQgPSB2YWxEZWNDb3VudCA+IHN0ZXBEZWNDb3VudCA/IHZhbERlY0NvdW50IDogc3RlcERlY0NvdW50O1xuICAgIGNvbnN0IHZhbEludCA9IE51bWJlci5wYXJzZUludCh2YWwudG9GaXhlZChkZWNDb3VudCkucmVwbGFjZShcIi5cIiwgXCJcIikpO1xuICAgIGNvbnN0IHN0ZXBJbnQgPSBOdW1iZXIucGFyc2VJbnQoc3RlcC50b0ZpeGVkKGRlY0NvdW50KS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XG4gICAgcmV0dXJuICh2YWxJbnQgJSBzdGVwSW50KSAvIDEwICoqIGRlY0NvdW50O1xufVxuZXhwb3J0IGNsYXNzIFpvZE51bWJlciBleHRlbmRzIFpvZFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm1pbiA9IHRoaXMuZ3RlO1xuICAgICAgICB0aGlzLm1heCA9IHRoaXMubHRlO1xuICAgICAgICB0aGlzLnN0ZXAgPSB0aGlzLm11bHRpcGxlT2Y7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IE51bWJlcihpbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bWJlcikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5udW1iZXIsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJpbnRcIikge1xuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0ludGVnZXIoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBcImZsb2F0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlID8gaW5wdXQuZGF0YSA8IGNoZWNrLnZhbHVlIDogaW5wdXQuZGF0YSA8PSBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhID4gY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhID49IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIGlmIChmbG9hdFNhZmVSZW1haW5kZXIoaW5wdXQuZGF0YSwgY2hlY2sudmFsdWUpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5ub3RfbXVsdGlwbGVfb2YsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZU9mOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImZpbml0ZVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLm5vdF9maW5pdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhIH07XG4gICAgfVxuICAgIGd0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgZ3QodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtaW5cIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBsdGUodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIHRydWUsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIGx0KHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWF4XCIsIHZhbHVlLCBmYWxzZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgc2V0TGltaXQoa2luZCwgdmFsdWUsIGluY2x1c2l2ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZE51bWJlcih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFtcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9kZWYuY2hlY2tzLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2FkZENoZWNrKGNoZWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGludChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImludFwiLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5lZ2F0aXZlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25wb3NpdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25uZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtdWx0aXBsZU9mKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm11bHRpcGxlT2ZcIixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZpbml0ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImZpbml0ZVwiLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2FmZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KS5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBtaW5WYWx1ZSgpIHtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBnZXQgbWF4VmFsdWUoKSB7XG4gICAgICAgIGxldCBtYXggPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gICAgZ2V0IGlzSW50KCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImludFwiIHx8IChjaC5raW5kID09PSBcIm11bHRpcGxlT2ZcIiAmJiB1dGlsLmlzSW50ZWdlcihjaC52YWx1ZSkpKTtcbiAgICB9XG4gICAgZ2V0IGlzRmluaXRlKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwiZmluaXRlXCIgfHwgY2gua2luZCA9PT0gXCJpbnRcIiB8fCBjaC5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2gua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOdW1iZXIuaXNGaW5pdGUobWluKSAmJiBOdW1iZXIuaXNGaW5pdGUobWF4KTtcbiAgICB9XG59XG5ab2ROdW1iZXIuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcbiAgICAgICAgY2hlY2tzOiBbXSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdW1iZXIsXG4gICAgICAgIGNvZXJjZTogcGFyYW1zPy5jb2VyY2UgfHwgZmFsc2UsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kQmlnSW50IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubWluID0gdGhpcy5ndGU7XG4gICAgICAgIHRoaXMubWF4ID0gdGhpcy5sdGU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpbnB1dC5kYXRhID0gQmlnSW50KGlucHV0LmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRJbnZhbGlkSW5wdXQoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYmlnaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW52YWxpZElucHV0KGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlID8gaW5wdXQuZGF0YSA8IGNoZWNrLnZhbHVlIDogaW5wdXQuZGF0YSA8PSBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYmlnaW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhID4gY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhID49IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJpZ2ludFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhICUgY2hlY2sudmFsdWUgIT09IEJpZ0ludCgwKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUubm90X211bHRpcGxlX29mLFxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGVPZjogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhIH07XG4gICAgfVxuICAgIF9nZXRJbnZhbGlkSW5wdXQoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5iaWdpbnQsXG4gICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgZ3RlKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCB0cnVlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBndCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgZmFsc2UsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIGx0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1heFwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgbHQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBzZXRMaW1pdChraW5kLCB2YWx1ZSwgaW5jbHVzaXZlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQmlnSW50KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogW1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5jaGVja3MsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RCaWdJbnQoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbmVnYXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbm9ucG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25uZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IEJpZ0ludCgwKSxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG11bHRpcGxlT2YodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibXVsdGlwbGVPZlwiLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgbWluVmFsdWUoKSB7XG4gICAgICAgIGxldCBtaW4gPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICAgICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgZ2V0IG1heFZhbHVlKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxufVxuWm9kQmlnSW50LmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEJpZ0ludCh7XG4gICAgICAgIGNoZWNrczogW10sXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQmlnSW50LFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlID8/IGZhbHNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEJvb2xlYW4gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5jb2VyY2UpIHtcbiAgICAgICAgICAgIGlucHV0LmRhdGEgPSBCb29sZWFuKGlucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYm9vbGVhbikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5ib29sZWFuLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZEJvb2xlYW4uY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kQm9vbGVhbih7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQm9vbGVhbixcbiAgICAgICAgY29lcmNlOiBwYXJhbXM/LmNvZXJjZSB8fCBmYWxzZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2REYXRlIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLl9kZWYuY29lcmNlKSB7XG4gICAgICAgICAgICBpbnB1dC5kYXRhID0gbmV3IERhdGUoaW5wdXQuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5kYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmRhdGUsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGlucHV0LmRhdGEuZ2V0VGltZSgpKSkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfZGF0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbmV3IFBhcnNlU3RhdHVzKCk7XG4gICAgICAgIGxldCBjdHggPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2sgb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoZWNrLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZGF0YS5nZXRUaW1lKCkgPCBjaGVjay52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmRhdGEuZ2V0VGltZSgpID4gY2hlY2sudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoY2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6IHN0YXR1cy52YWx1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZShpbnB1dC5kYXRhLmdldFRpbWUoKSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9hZGRDaGVjayhjaGVjaykge1xuICAgICAgICByZXR1cm4gbmV3IFpvZERhdGUoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWluKG1pbkRhdGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWluXCIsXG4gICAgICAgICAgICB2YWx1ZTogbWluRGF0ZS5nZXRUaW1lKCksXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4RGF0ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBtYXhEYXRlLmdldFRpbWUoKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBtaW5EYXRlKCkge1xuICAgICAgICBsZXQgbWluID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaW4gIT0gbnVsbCA/IG5ldyBEYXRlKG1pbikgOiBudWxsO1xuICAgIH1cbiAgICBnZXQgbWF4RGF0ZSgpIHtcbiAgICAgICAgbGV0IG1heCA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF4ID09PSBudWxsIHx8IGNoLnZhbHVlIDwgbWF4KVxuICAgICAgICAgICAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4ICE9IG51bGwgPyBuZXcgRGF0ZShtYXgpIDogbnVsbDtcbiAgICB9XG59XG5ab2REYXRlLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZERhdGUoe1xuICAgICAgICBjaGVja3M6IFtdLFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlIHx8IGZhbHNlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERhdGUsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kU3ltYm9sIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuc3ltYm9sKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnN5bWJvbCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2RTeW1ib2wuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kU3ltYm9sKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTeW1ib2wsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVW5kZWZpbmVkIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2RVbmRlZmluZWQuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVW5kZWZpbmVkKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmRlZmluZWQsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTnVsbCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubnVsbCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2ROdWxsLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE51bGwoe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bGwsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kQW55IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIC8vIHRvIHByZXZlbnQgaW5zdGFuY2VzIG9mIG90aGVyIGNsYXNzZXMgZnJvbSBleHRlbmRpbmcgWm9kQW55LiB0aGlzIGNhdXNlcyBpc3N1ZXMgd2l0aCBjYXRjaGFsbCBpbiBab2RPYmplY3QuXG4gICAgICAgIHRoaXMuX2FueSA9IHRydWU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxufVxuWm9kQW55LmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEFueSh7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQW55LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZFVua25vd24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgLy8gcmVxdWlyZWRcbiAgICAgICAgdGhpcy5fdW5rbm93biA9IHRydWU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxufVxuWm9kVW5rbm93bi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RVbmtub3duKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmtub3duLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZE5ldmVyIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubmV2ZXIsXG4gICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG59XG5ab2ROZXZlci5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROZXZlcih7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmV2ZXIsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVm9pZCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS52b2lkLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZFZvaWQuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVm9pZCh7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVm9pZCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RBcnJheSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCwgc3RhdHVzIH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBkZWYgPSB0aGlzLl9kZWY7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5hcnJheSxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYuZXhhY3RMZW5ndGggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvb0JpZyA9IGN0eC5kYXRhLmxlbmd0aCA+IGRlZi5leGFjdExlbmd0aC52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY3R4LmRhdGEubGVuZ3RoIDwgZGVmLmV4YWN0TGVuZ3RoLnZhbHVlO1xuICAgICAgICAgICAgaWYgKHRvb0JpZyB8fCB0b29TbWFsbCkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiB0b29CaWcgPyBab2RJc3N1ZUNvZGUudG9vX2JpZyA6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgIG1pbmltdW06ICh0b29TbWFsbCA/IGRlZi5leGFjdExlbmd0aC52YWx1ZSA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgICAgIG1heGltdW06ICh0b29CaWcgPyBkZWYuZXhhY3RMZW5ndGgudmFsdWUgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZi5leGFjdExlbmd0aC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYubWluTGVuZ3RoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoY3R4LmRhdGEubGVuZ3RoIDwgZGVmLm1pbkxlbmd0aC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBkZWYubWluTGVuZ3RoLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWluTGVuZ3RoLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZi5tYXhMZW5ndGggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdHguZGF0YS5sZW5ndGggPiBkZWYubWF4TGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBkZWYubWF4TGVuZ3RoLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWF4TGVuZ3RoLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbLi4uY3R4LmRhdGFdLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWYudHlwZS5fcGFyc2VBc3luYyhuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKTtcbiAgICAgICAgICAgIH0pKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBbLi4uY3R4LmRhdGFdLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRlZi50eXBlLl9wYXJzZVN5bmMobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdCk7XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGU7XG4gICAgfVxuICAgIG1pbihtaW5MZW5ndGgsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBtaW5MZW5ndGg6IHsgdmFsdWU6IG1pbkxlbmd0aCwgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQXJyYXkoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgbWF4TGVuZ3RoOiB7IHZhbHVlOiBtYXhMZW5ndGgsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGVuZ3RoKGxlbiwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGV4YWN0TGVuZ3RoOiB7IHZhbHVlOiBsZW4sIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbm9uZW1wdHkobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5taW4oMSwgbWVzc2FnZSk7XG4gICAgfVxufVxuWm9kQXJyYXkuY3JlYXRlID0gKHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAgIHR5cGU6IHNjaGVtYSxcbiAgICAgICAgbWluTGVuZ3RoOiBudWxsLFxuICAgICAgICBtYXhMZW5ndGg6IG51bGwsXG4gICAgICAgIGV4YWN0TGVuZ3RoOiBudWxsLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEFycmF5LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZnVuY3Rpb24gZGVlcFBhcnRpYWxpZnkoc2NoZW1hKSB7XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZE9iamVjdCkge1xuICAgICAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzY2hlbWEuc2hhcGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkU2NoZW1hID0gc2NoZW1hLnNoYXBlW2tleV07XG4gICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gWm9kT3B0aW9uYWwuY3JlYXRlKGRlZXBQYXJ0aWFsaWZ5KGZpZWxkU2NoZW1hKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4uc2NoZW1hLl9kZWYsXG4gICAgICAgICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RBcnJheSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcbiAgICAgICAgICAgIC4uLnNjaGVtYS5fZGVmLFxuICAgICAgICAgICAgdHlwZTogZGVlcFBhcnRpYWxpZnkoc2NoZW1hLmVsZW1lbnQpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kT3B0aW9uYWwpIHtcbiAgICAgICAgcmV0dXJuIFpvZE9wdGlvbmFsLmNyZWF0ZShkZWVwUGFydGlhbGlmeShzY2hlbWEudW53cmFwKCkpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kTnVsbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIFpvZE51bGxhYmxlLmNyZWF0ZShkZWVwUGFydGlhbGlmeShzY2hlbWEudW53cmFwKCkpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kVHVwbGUpIHtcbiAgICAgICAgcmV0dXJuIFpvZFR1cGxlLmNyZWF0ZShzY2hlbWEuaXRlbXMubWFwKChpdGVtKSA9PiBkZWVwUGFydGlhbGlmeShpdGVtKSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kT2JqZWN0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX2NhY2hlZCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBJbiBtb3N0IGNhc2VzLCB0aGlzIGlzIG5vIGxvbmdlciBuZWVkZWQgLSB1bmtub3duIHByb3BlcnRpZXMgYXJlIG5vdyBzaWxlbnRseSBzdHJpcHBlZC5cbiAgICAgICAgICogSWYgeW91IHdhbnQgdG8gcGFzcyB0aHJvdWdoIHVua25vd24gcHJvcGVydGllcywgdXNlIGAucGFzc3Rocm91Z2goKWAgaW5zdGVhZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubm9uc3RyaWN0ID0gdGhpcy5wYXNzdGhyb3VnaDtcbiAgICAgICAgLy8gZXh0ZW5kPFxuICAgICAgICAvLyAgIEF1Z21lbnRhdGlvbiBleHRlbmRzIFpvZFJhd1NoYXBlLFxuICAgICAgICAvLyAgIE5ld091dHB1dCBleHRlbmRzIHV0aWwuZmxhdHRlbjx7XG4gICAgICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBPdXRwdXRdOiBrIGV4dGVuZHMga2V5b2YgQXVnbWVudGF0aW9uXG4gICAgICAgIC8vICAgICAgID8gQXVnbWVudGF0aW9uW2tdW1wiX291dHB1dFwiXVxuICAgICAgICAvLyAgICAgICA6IGsgZXh0ZW5kcyBrZXlvZiBPdXRwdXRcbiAgICAgICAgLy8gICAgICAgPyBPdXRwdXRba11cbiAgICAgICAgLy8gICAgICAgOiBuZXZlcjtcbiAgICAgICAgLy8gICB9PixcbiAgICAgICAgLy8gICBOZXdJbnB1dCBleHRlbmRzIHV0aWwuZmxhdHRlbjx7XG4gICAgICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBJbnB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgICAgICAgLy8gICAgICAgPyBBdWdtZW50YXRpb25ba11bXCJfaW5wdXRcIl1cbiAgICAgICAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgSW5wdXRcbiAgICAgICAgLy8gICAgICAgPyBJbnB1dFtrXVxuICAgICAgICAvLyAgICAgICA6IG5ldmVyO1xuICAgICAgICAvLyAgIH0+XG4gICAgICAgIC8vID4oXG4gICAgICAgIC8vICAgYXVnbWVudGF0aW9uOiBBdWdtZW50YXRpb25cbiAgICAgICAgLy8gKTogWm9kT2JqZWN0PFxuICAgICAgICAvLyAgIGV4dGVuZFNoYXBlPFQsIEF1Z21lbnRhdGlvbj4sXG4gICAgICAgIC8vICAgVW5rbm93bktleXMsXG4gICAgICAgIC8vICAgQ2F0Y2hhbGwsXG4gICAgICAgIC8vICAgTmV3T3V0cHV0LFxuICAgICAgICAvLyAgIE5ld0lucHV0XG4gICAgICAgIC8vID4ge1xuICAgICAgICAvLyAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgLy8gICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgLy8gICAgIHNoYXBlOiAoKSA9PiAoe1xuICAgICAgICAvLyAgICAgICAuLi50aGlzLl9kZWYuc2hhcGUoKSxcbiAgICAgICAgLy8gICAgICAgLi4uYXVnbWVudGF0aW9uLFxuICAgICAgICAvLyAgICAgfSksXG4gICAgICAgIC8vICAgfSkgYXMgYW55O1xuICAgICAgICAvLyB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBVc2UgYC5leHRlbmRgIGluc3RlYWRcbiAgICAgICAgICogICovXG4gICAgICAgIHRoaXMuYXVnbWVudCA9IHRoaXMuZXh0ZW5kO1xuICAgIH1cbiAgICBfZ2V0Q2FjaGVkKCkge1xuICAgICAgICBpZiAodGhpcy5fY2FjaGVkICE9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZDtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB0aGlzLl9kZWYuc2hhcGUoKTtcbiAgICAgICAgY29uc3Qga2V5cyA9IHV0aWwub2JqZWN0S2V5cyhzaGFwZSk7XG4gICAgICAgIHRoaXMuX2NhY2hlZCA9IHsgc2hhcGUsIGtleXMgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZDtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUub2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IHsgc2hhcGUsIGtleXM6IHNoYXBlS2V5cyB9ID0gdGhpcy5fZ2V0Q2FjaGVkKCk7XG4gICAgICAgIGNvbnN0IGV4dHJhS2V5cyA9IFtdO1xuICAgICAgICBpZiAoISh0aGlzLl9kZWYuY2F0Y2hhbGwgaW5zdGFuY2VvZiBab2ROZXZlciAmJiB0aGlzLl9kZWYudW5rbm93bktleXMgPT09IFwic3RyaXBcIikpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGN0eC5kYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzaGFwZUtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBleHRyYUtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWlycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBzaGFwZUtleXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleVZhbGlkYXRvciA9IHNoYXBlW2tleV07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN0eC5kYXRhW2tleV07XG4gICAgICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBrZXk6IHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBrZXkgfSxcbiAgICAgICAgICAgICAgICB2YWx1ZToga2V5VmFsaWRhdG9yLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBrZXkpKSxcbiAgICAgICAgICAgICAgICBhbHdheXNTZXQ6IGtleSBpbiBjdHguZGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9kZWYuY2F0Y2hhbGwgaW5zdGFuY2VvZiBab2ROZXZlcikge1xuICAgICAgICAgICAgY29uc3QgdW5rbm93bktleXMgPSB0aGlzLl9kZWYudW5rbm93bktleXM7XG4gICAgICAgICAgICBpZiAodW5rbm93bktleXMgPT09IFwicGFzc3Rocm91Z2hcIikge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGV4dHJhS2V5cykge1xuICAgICAgICAgICAgICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBjdHguZGF0YVtrZXldIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHVua25vd25LZXlzID09PSBcInN0cmljdFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4dHJhS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnVucmVjb2duaXplZF9rZXlzLFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5czogZXh0cmFLZXlzLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodW5rbm93bktleXMgPT09IFwic3RyaXBcIikge1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnRlcm5hbCBab2RPYmplY3QgZXJyb3I6IGludmFsaWQgdW5rbm93bktleXMgdmFsdWUuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBydW4gY2F0Y2hhbGwgdmFsaWRhdGlvblxuICAgICAgICAgICAgY29uc3QgY2F0Y2hhbGwgPSB0aGlzLl9kZWYuY2F0Y2hhbGw7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBleHRyYUtleXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN0eC5kYXRhW2tleV07XG4gICAgICAgICAgICAgICAgcGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGtleTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleSB9LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2F0Y2hhbGwuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCB2YWx1ZSwgY3R4LnBhdGgsIGtleSkgLy8sIGN0eC5jaGlsZChrZXkpLCB2YWx1ZSwgZ2V0UGFyc2VkVHlwZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzeW5jUGFpcnMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgcGFpci5rZXk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFpci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3luY1BhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHdheXNTZXQ6IHBhaXIuYWx3YXlzU2V0LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bmNQYWlycztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHN5bmNQYWlycykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBzeW5jUGFpcnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBzaGFwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zaGFwZSgpO1xuICAgIH1cbiAgICBzdHJpY3QobWVzc2FnZSkge1xuICAgICAgICBlcnJvclV0aWwuZXJyVG9PYmo7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgICAgICAgICAgLi4uKG1lc3NhZ2UgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1hcDogKGlzc3VlLCBjdHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRFcnJvciA9IHRoaXMuX2RlZi5lcnJvck1hcD8uKGlzc3VlLCBjdHgpLm1lc3NhZ2UgPz8gY3R4LmRlZmF1bHRFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3N1ZS5jb2RlID09PSBcInVucmVjb2duaXplZF9rZXlzXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLm1lc3NhZ2UgPz8gZGVmYXVsdEVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZmF1bHRFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDoge30pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RyaXAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwYXNzdGhyb3VnaCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgdW5rbm93bktleXM6IFwicGFzc3Rocm91Z2hcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGNvbnN0IEF1Z21lbnRGYWN0b3J5ID1cbiAgICAvLyAgIDxEZWYgZXh0ZW5kcyBab2RPYmplY3REZWY+KGRlZjogRGVmKSA9PlxuICAgIC8vICAgPEF1Z21lbnRhdGlvbiBleHRlbmRzIFpvZFJhd1NoYXBlPihcbiAgICAvLyAgICAgYXVnbWVudGF0aW9uOiBBdWdtZW50YXRpb25cbiAgICAvLyAgICk6IFpvZE9iamVjdDxcbiAgICAvLyAgICAgZXh0ZW5kU2hhcGU8UmV0dXJuVHlwZTxEZWZbXCJzaGFwZVwiXT4sIEF1Z21lbnRhdGlvbj4sXG4gICAgLy8gICAgIERlZltcInVua25vd25LZXlzXCJdLFxuICAgIC8vICAgICBEZWZbXCJjYXRjaGFsbFwiXVxuICAgIC8vICAgPiA9PiB7XG4gICAgLy8gICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAvLyAgICAgICAuLi5kZWYsXG4gICAgLy8gICAgICAgc2hhcGU6ICgpID0+ICh7XG4gICAgLy8gICAgICAgICAuLi5kZWYuc2hhcGUoKSxcbiAgICAvLyAgICAgICAgIC4uLmF1Z21lbnRhdGlvbixcbiAgICAvLyAgICAgICB9KSxcbiAgICAvLyAgICAgfSkgYXMgYW55O1xuICAgIC8vICAgfTtcbiAgICBleHRlbmQoYXVnbWVudGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5zaGFwZSgpLFxuICAgICAgICAgICAgICAgIC4uLmF1Z21lbnRhdGlvbixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJpb3IgdG8gem9kQDEuMC4xMiB0aGVyZSB3YXMgYSBidWcgaW4gdGhlXG4gICAgICogaW5mZXJyZWQgdHlwZSBvZiBtZXJnZWQgb2JqZWN0cy4gUGxlYXNlXG4gICAgICogdXBncmFkZSBpZiB5b3UgYXJlIGV4cGVyaWVuY2luZyBpc3N1ZXMuXG4gICAgICovXG4gICAgbWVyZ2UobWVyZ2luZykge1xuICAgICAgICBjb25zdCBtZXJnZWQgPSBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgICAgICAgICBjYXRjaGFsbDogbWVyZ2luZy5fZGVmLmNhdGNoYWxsLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5fZGVmLnNoYXBlKCksXG4gICAgICAgICAgICAgICAgLi4ubWVyZ2luZy5fZGVmLnNoYXBlKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICB9XG4gICAgLy8gbWVyZ2U8XG4gICAgLy8gICBJbmNvbWluZyBleHRlbmRzIEFueVpvZE9iamVjdCxcbiAgICAvLyAgIEF1Z21lbnRhdGlvbiBleHRlbmRzIEluY29taW5nW1wic2hhcGVcIl0sXG4gICAgLy8gICBOZXdPdXRwdXQgZXh0ZW5kcyB7XG4gICAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIE91dHB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgICAvLyAgICAgICA/IEF1Z21lbnRhdGlvbltrXVtcIl9vdXRwdXRcIl1cbiAgICAvLyAgICAgICA6IGsgZXh0ZW5kcyBrZXlvZiBPdXRwdXRcbiAgICAvLyAgICAgICA/IE91dHB1dFtrXVxuICAgIC8vICAgICAgIDogbmV2ZXI7XG4gICAgLy8gICB9LFxuICAgIC8vICAgTmV3SW5wdXQgZXh0ZW5kcyB7XG4gICAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIElucHV0XTogayBleHRlbmRzIGtleW9mIEF1Z21lbnRhdGlvblxuICAgIC8vICAgICAgID8gQXVnbWVudGF0aW9uW2tdW1wiX2lucHV0XCJdXG4gICAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgSW5wdXRcbiAgICAvLyAgICAgICA/IElucHV0W2tdXG4gICAgLy8gICAgICAgOiBuZXZlcjtcbiAgICAvLyAgIH1cbiAgICAvLyA+KFxuICAgIC8vICAgbWVyZ2luZzogSW5jb21pbmdcbiAgICAvLyApOiBab2RPYmplY3Q8XG4gICAgLy8gICBleHRlbmRTaGFwZTxULCBSZXR1cm5UeXBlPEluY29taW5nW1wiX2RlZlwiXVtcInNoYXBlXCJdPj4sXG4gICAgLy8gICBJbmNvbWluZ1tcIl9kZWZcIl1bXCJ1bmtub3duS2V5c1wiXSxcbiAgICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcImNhdGNoYWxsXCJdLFxuICAgIC8vICAgTmV3T3V0cHV0LFxuICAgIC8vICAgTmV3SW5wdXRcbiAgICAvLyA+IHtcbiAgICAvLyAgIGNvbnN0IG1lcmdlZDogYW55ID0gbmV3IFpvZE9iamVjdCh7XG4gICAgLy8gICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgLy8gICAgIGNhdGNoYWxsOiBtZXJnaW5nLl9kZWYuY2F0Y2hhbGwsXG4gICAgLy8gICAgIHNoYXBlOiAoKSA9PlxuICAgIC8vICAgICAgIG9iamVjdFV0aWwubWVyZ2VTaGFwZXModGhpcy5fZGVmLnNoYXBlKCksIG1lcmdpbmcuX2RlZi5zaGFwZSgpKSxcbiAgICAvLyAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgLy8gICB9KSBhcyBhbnk7XG4gICAgLy8gICByZXR1cm4gbWVyZ2VkO1xuICAgIC8vIH1cbiAgICBzZXRLZXkoa2V5LCBzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXVnbWVudCh7IFtrZXldOiBzY2hlbWEgfSk7XG4gICAgfVxuICAgIC8vIG1lcmdlPEluY29taW5nIGV4dGVuZHMgQW55Wm9kT2JqZWN0PihcbiAgICAvLyAgIG1lcmdpbmc6IEluY29taW5nXG4gICAgLy8gKTogLy9ab2RPYmplY3Q8VCAmIEluY29taW5nW1wiX3NoYXBlXCJdLCBVbmtub3duS2V5cywgQ2F0Y2hhbGw+ID0gKG1lcmdpbmcpID0+IHtcbiAgICAvLyBab2RPYmplY3Q8XG4gICAgLy8gICBleHRlbmRTaGFwZTxULCBSZXR1cm5UeXBlPEluY29taW5nW1wiX2RlZlwiXVtcInNoYXBlXCJdPj4sXG4gICAgLy8gICBJbmNvbWluZ1tcIl9kZWZcIl1bXCJ1bmtub3duS2V5c1wiXSxcbiAgICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcImNhdGNoYWxsXCJdXG4gICAgLy8gPiB7XG4gICAgLy8gICAvLyBjb25zdCBtZXJnZWRTaGFwZSA9IG9iamVjdFV0aWwubWVyZ2VTaGFwZXMoXG4gICAgLy8gICAvLyAgIHRoaXMuX2RlZi5zaGFwZSgpLFxuICAgIC8vICAgLy8gICBtZXJnaW5nLl9kZWYuc2hhcGUoKVxuICAgIC8vICAgLy8gKTtcbiAgICAvLyAgIGNvbnN0IG1lcmdlZDogYW55ID0gbmV3IFpvZE9iamVjdCh7XG4gICAgLy8gICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgLy8gICAgIGNhdGNoYWxsOiBtZXJnaW5nLl9kZWYuY2F0Y2hhbGwsXG4gICAgLy8gICAgIHNoYXBlOiAoKSA9PlxuICAgIC8vICAgICAgIG9iamVjdFV0aWwubWVyZ2VTaGFwZXModGhpcy5fZGVmLnNoYXBlKCksIG1lcmdpbmcuX2RlZi5zaGFwZSgpKSxcbiAgICAvLyAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgLy8gICB9KSBhcyBhbnk7XG4gICAgLy8gICByZXR1cm4gbWVyZ2VkO1xuICAgIC8vIH1cbiAgICBjYXRjaGFsbChpbmRleCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjYXRjaGFsbDogaW5kZXgsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwaWNrKG1hc2spIHtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdXRpbC5vYmplY3RLZXlzKG1hc2spKSB7XG4gICAgICAgICAgICBpZiAobWFza1trZXldICYmIHRoaXMuc2hhcGVba2V5XSkge1xuICAgICAgICAgICAgICAgIHNoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+IHNoYXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb21pdChtYXNrKSB7XG4gICAgICAgIGNvbnN0IHNoYXBlID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHV0aWwub2JqZWN0S2V5cyh0aGlzLnNoYXBlKSkge1xuICAgICAgICAgICAgaWYgKCFtYXNrW2tleV0pIHtcbiAgICAgICAgICAgICAgICBzaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBzaGFwZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgZGVlcFBhcnRpYWwoKSB7XG4gICAgICAgIHJldHVybiBkZWVwUGFydGlhbGlmeSh0aGlzKTtcbiAgICB9XG4gICAgcGFydGlhbChtYXNrKSB7XG4gICAgICAgIGNvbnN0IG5ld1NoYXBlID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHV0aWwub2JqZWN0S2V5cyh0aGlzLnNoYXBlKSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGRTY2hlbWEgPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICBpZiAobWFzayAmJiAhbWFza1trZXldKSB7XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IGZpZWxkU2NoZW1hO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IGZpZWxkU2NoZW1hLm9wdGlvbmFsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+IG5ld1NoYXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVxdWlyZWQobWFzaykge1xuICAgICAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkpIHtcbiAgICAgICAgICAgIGlmIChtYXNrICYmICFtYXNrW2tleV0pIHtcbiAgICAgICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGRTY2hlbWEgPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICAgICAgbGV0IG5ld0ZpZWxkID0gZmllbGRTY2hlbWE7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG5ld0ZpZWxkIGluc3RhbmNlb2YgWm9kT3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RmllbGQgPSBuZXdGaWVsZC5fZGVmLmlubmVyVHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IG5ld0ZpZWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBuZXdTaGFwZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGtleW9mKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlWm9kRW51bSh1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkpO1xuICAgIH1cbn1cblpvZE9iamVjdC5jcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgc2hhcGU6ICgpID0+IHNoYXBlLFxuICAgICAgICB1bmtub3duS2V5czogXCJzdHJpcFwiLFxuICAgICAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuWm9kT2JqZWN0LnN0cmljdENyZWF0ZSA9IChzaGFwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICBzaGFwZTogKCkgPT4gc2hhcGUsXG4gICAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgICAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuWm9kT2JqZWN0LmxhenljcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgc2hhcGUsXG4gICAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXG4gICAgICAgIGNhdGNoYWxsOiBab2ROZXZlci5jcmVhdGUoKSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVW5pb24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9kZWYub3B0aW9ucztcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVzdWx0cyhyZXN1bHRzKSB7XG4gICAgICAgICAgICAvLyByZXR1cm4gZmlyc3QgaXNzdWUtZnJlZSB2YWxpZGF0aW9uIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQucmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgaXNzdWVzIGZyb20gZGlydHkgb3B0aW9uXG4gICAgICAgICAgICAgICAgICAgIGN0eC5jb21tb24uaXNzdWVzLnB1c2goLi4ucmVzdWx0LmN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmV0dXJuIGludmFsaWRcbiAgICAgICAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gcmVzdWx0cy5tYXAoKHJlc3VsdCkgPT4gbmV3IFpvZEVycm9yKHJlc3VsdC5jdHguY29tbW9uLmlzc3VlcykpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb24sXG4gICAgICAgICAgICAgICAgdW5pb25FcnJvcnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwob3B0aW9ucy5tYXAoYXN5bmMgKG9wdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ3R4ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5jdHgsXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY3R4LmNvbW1vbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogYXdhaXQgb3B0aW9uLl9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGNoaWxkQ3R4LFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgY3R4OiBjaGlsZEN0eCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkpLnRoZW4oaGFuZGxlUmVzdWx0cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZGlydHkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBpc3N1ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEN0eCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY3R4LFxuICAgICAgICAgICAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmN0eC5jb21tb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcHRpb24uX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjaGlsZEN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIiAmJiAhZGlydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB7IHJlc3VsdCwgY3R4OiBjaGlsZEN0eCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRDdHguY29tbW9uLmlzc3Vlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNzdWVzLnB1c2goY2hpbGRDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpcnR5KSB7XG4gICAgICAgICAgICAgICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaCguLi5kaXJ0eS5jdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpcnR5LnJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gaXNzdWVzLm1hcCgoaXNzdWVzKSA9PiBuZXcgWm9kRXJyb3IoaXNzdWVzKSk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbixcbiAgICAgICAgICAgICAgICB1bmlvbkVycm9ycyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9ucztcbiAgICB9XG59XG5ab2RVbmlvbi5jcmVhdGUgPSAodHlwZXMsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVW5pb24oe1xuICAgICAgICBvcHRpb25zOiB0eXBlcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmlvbixcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy9cbi8vLy8vLy8vLy8gICAgICBab2REaXNjcmltaW5hdGVkVW5pb24gICAgICAvLy8vLy8vLy8vXG4vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCBnZXREaXNjcmltaW5hdG9yID0gKHR5cGUpID0+IHtcbiAgICBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZExhenkpIHtcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS5zY2hlbWEpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kRWZmZWN0cykge1xuICAgICAgICByZXR1cm4gZ2V0RGlzY3JpbWluYXRvcih0eXBlLmlubmVyVHlwZSgpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZExpdGVyYWwpIHtcbiAgICAgICAgcmV0dXJuIFt0eXBlLnZhbHVlXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZEVudW0pIHtcbiAgICAgICAgcmV0dXJuIHR5cGUub3B0aW9ucztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE5hdGl2ZUVudW0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGJhbi9iYW5cbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0VmFsdWVzKHR5cGUuZW51bSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2REZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUuX2RlZi5pbm5lclR5cGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kVW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBbdW5kZWZpbmVkXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtudWxsXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE9wdGlvbmFsKSB7XG4gICAgICAgIHJldHVybiBbdW5kZWZpbmVkLCAuLi5nZXREaXNjcmltaW5hdG9yKHR5cGUudW53cmFwKCkpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE51bGxhYmxlKSB7XG4gICAgICAgIHJldHVybiBbbnVsbCwgLi4uZ2V0RGlzY3JpbWluYXRvcih0eXBlLnVud3JhcCgpKV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RCcmFuZGVkKSB7XG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUudW53cmFwKCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kUmVhZG9ubHkpIHtcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS51bndyYXAoKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RDYXRjaCkge1xuICAgICAgICByZXR1cm4gZ2V0RGlzY3JpbWluYXRvcih0eXBlLl9kZWYuaW5uZXJUeXBlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59O1xuZXhwb3J0IGNsYXNzIFpvZERpc2NyaW1pbmF0ZWRVbmlvbiBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5vYmplY3QsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXNjcmltaW5hdG9yID0gdGhpcy5kaXNjcmltaW5hdG9yO1xuICAgICAgICBjb25zdCBkaXNjcmltaW5hdG9yVmFsdWUgPSBjdHguZGF0YVtkaXNjcmltaW5hdG9yXTtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5vcHRpb25zTWFwLmdldChkaXNjcmltaW5hdG9yVmFsdWUpO1xuICAgICAgICBpZiAoIW9wdGlvbikge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvcixcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBBcnJheS5mcm9tKHRoaXMub3B0aW9uc01hcC5rZXlzKCkpLFxuICAgICAgICAgICAgICAgIHBhdGg6IFtkaXNjcmltaW5hdG9yXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb24uX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9uLl9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGRpc2NyaW1pbmF0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuZGlzY3JpbWluYXRvcjtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnNNYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9uc01hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBkaXNjcmltaW5hdGVkIHVuaW9uIHNjaGVtYS4gSXRzIGJlaGF2aW91ciBpcyB2ZXJ5IHNpbWlsYXIgdG8gdGhhdCBvZiB0aGUgbm9ybWFsIHoudW5pb24oKSBjb25zdHJ1Y3Rvci5cbiAgICAgKiBIb3dldmVyLCBpdCBvbmx5IGFsbG93cyBhIHVuaW9uIG9mIG9iamVjdHMsIGFsbCBvZiB3aGljaCBuZWVkIHRvIHNoYXJlIGEgZGlzY3JpbWluYXRvciBwcm9wZXJ0eS4gVGhpcyBwcm9wZXJ0eSBtdXN0XG4gICAgICogaGF2ZSBhIGRpZmZlcmVudCB2YWx1ZSBmb3IgZWFjaCBvYmplY3QgaW4gdGhlIHVuaW9uLlxuICAgICAqIEBwYXJhbSBkaXNjcmltaW5hdG9yIHRoZSBuYW1lIG9mIHRoZSBkaXNjcmltaW5hdG9yIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHR5cGVzIGFuIGFycmF5IG9mIG9iamVjdCBzY2hlbWFzXG4gICAgICogQHBhcmFtIHBhcmFtc1xuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGUoZGlzY3JpbWluYXRvciwgb3B0aW9ucywgcGFyYW1zKSB7XG4gICAgICAgIC8vIEdldCBhbGwgdGhlIHZhbGlkIGRpc2NyaW1pbmF0b3IgdmFsdWVzXG4gICAgICAgIGNvbnN0IG9wdGlvbnNNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIHRyeSB7XG4gICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBvcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBkaXNjcmltaW5hdG9yVmFsdWVzID0gZ2V0RGlzY3JpbWluYXRvcih0eXBlLnNoYXBlW2Rpc2NyaW1pbmF0b3JdKTtcbiAgICAgICAgICAgIGlmICghZGlzY3JpbWluYXRvclZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgZGlzY3JpbWluYXRvciB2YWx1ZSBmb3Iga2V5IFxcYCR7ZGlzY3JpbWluYXRvcn1cXGAgY291bGQgbm90IGJlIGV4dHJhY3RlZCBmcm9tIGFsbCBzY2hlbWEgb3B0aW9uc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBkaXNjcmltaW5hdG9yVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNNYXAuaGFzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERpc2NyaW1pbmF0b3IgcHJvcGVydHkgJHtTdHJpbmcoZGlzY3JpbWluYXRvcil9IGhhcyBkdXBsaWNhdGUgdmFsdWUgJHtTdHJpbmcodmFsdWUpfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRpb25zTWFwLnNldCh2YWx1ZSwgdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2REaXNjcmltaW5hdGVkVW5pb24oe1xuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REaXNjcmltaW5hdGVkVW5pb24sXG4gICAgICAgICAgICBkaXNjcmltaW5hdG9yLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnNNYXAsXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1lcmdlVmFsdWVzKGEsIGIpIHtcbiAgICBjb25zdCBhVHlwZSA9IGdldFBhcnNlZFR5cGUoYSk7XG4gICAgY29uc3QgYlR5cGUgPSBnZXRQYXJzZWRUeXBlKGIpO1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBkYXRhOiBhIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGFUeXBlID09PSBab2RQYXJzZWRUeXBlLm9iamVjdCAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5vYmplY3QpIHtcbiAgICAgICAgY29uc3QgYktleXMgPSB1dGlsLm9iamVjdEtleXMoYik7XG4gICAgICAgIGNvbnN0IHNoYXJlZEtleXMgPSB1dGlsLm9iamVjdEtleXMoYSkuZmlsdGVyKChrZXkpID0+IGJLZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEpO1xuICAgICAgICBjb25zdCBuZXdPYmogPSB7IC4uLmEsIC4uLmIgfTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Ygc2hhcmVkS2V5cykge1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlcyhhW2tleV0sIGJba2V5XSk7XG4gICAgICAgICAgICBpZiAoIXNoYXJlZFZhbHVlLnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdPYmpba2V5XSA9IHNoYXJlZFZhbHVlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGRhdGE6IG5ld09iaiB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChhVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdBcnJheSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1BID0gYVtpbmRleF07XG4gICAgICAgICAgICBjb25zdCBpdGVtQiA9IGJbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlcyhpdGVtQSwgaXRlbUIpO1xuICAgICAgICAgICAgaWYgKCFzaGFyZWRWYWx1ZS52YWxpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3QXJyYXkucHVzaChzaGFyZWRWYWx1ZS5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogbmV3QXJyYXkgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYVR5cGUgPT09IFpvZFBhcnNlZFR5cGUuZGF0ZSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5kYXRlICYmICthID09PSArYikge1xuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogYSB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFpvZEludGVyc2VjdGlvbiBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBoYW5kbGVQYXJzZWQgPSAocGFyc2VkTGVmdCwgcGFyc2VkUmlnaHQpID0+IHtcbiAgICAgICAgICAgIGlmIChpc0Fib3J0ZWQocGFyc2VkTGVmdCkgfHwgaXNBYm9ydGVkKHBhcnNlZFJpZ2h0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gbWVyZ2VWYWx1ZXMocGFyc2VkTGVmdC52YWx1ZSwgcGFyc2VkUmlnaHQudmFsdWUpO1xuICAgICAgICAgICAgaWYgKCFtZXJnZWQudmFsaWQpIHtcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRGlydHkocGFyc2VkTGVmdCkgfHwgaXNEaXJ0eShwYXJzZWRSaWdodCkpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogbWVyZ2VkLmRhdGEgfTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmLmxlZnQuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHRoaXMuX2RlZi5yaWdodC5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdKS50aGVuKChbbGVmdCwgcmlnaHRdKSA9PiBoYW5kbGVQYXJzZWQobGVmdCwgcmlnaHQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVQYXJzZWQodGhpcy5fZGVmLmxlZnQuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICB9KSwgdGhpcy5fZGVmLnJpZ2h0Ll9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuWm9kSW50ZXJzZWN0aW9uLmNyZWF0ZSA9IChsZWZ0LCByaWdodCwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RJbnRlcnNlY3Rpb24oe1xuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kSW50ZXJzZWN0aW9uLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8gdHlwZSBab2RUdXBsZUl0ZW1zID0gW1pvZFR5cGVBbnksIC4uLlpvZFR5cGVBbnlbXV07XG5leHBvcnQgY2xhc3MgWm9kVHVwbGUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmFycmF5KSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmFycmF5LFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5kYXRhLmxlbmd0aCA8IHRoaXMuX2RlZi5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgbWluaW11bTogdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdCA9IHRoaXMuX2RlZi5yZXN0O1xuICAgICAgICBpZiAoIXJlc3QgJiYgY3R4LmRhdGEubGVuZ3RoID4gdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgbWF4aW11bTogdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbXMgPSBbLi4uY3R4LmRhdGFdXG4gICAgICAgICAgICAubWFwKChpdGVtLCBpdGVtSW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuX2RlZi5pdGVtc1tpdGVtSW5kZXhdIHx8IHRoaXMuX2RlZi5yZXN0O1xuICAgICAgICAgICAgaWYgKCFzY2hlbWEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGl0ZW1JbmRleCkpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbHRlcigoeCkgPT4gISF4KTsgLy8gZmlsdGVyIG51bGxzXG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaXRlbXMpLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIGl0ZW1zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaXRlbXM7XG4gICAgfVxuICAgIHJlc3QocmVzdCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFR1cGxlKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHJlc3QsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblpvZFR1cGxlLmNyZWF0ZSA9IChzY2hlbWFzLCBwYXJhbXMpID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2NoZW1hcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhbiBhcnJheSBvZiBzY2hlbWFzIHRvIHoudHVwbGUoWyAuLi4gXSlcIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgWm9kVHVwbGUoe1xuICAgICAgICBpdGVtczogc2NoZW1hcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RUdXBsZSxcbiAgICAgICAgcmVzdDogbnVsbCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RSZWNvcmQgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBnZXQga2V5U2NoZW1hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgfVxuICAgIGdldCB2YWx1ZVNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUub2JqZWN0KSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhaXJzID0gW107XG4gICAgICAgIGNvbnN0IGtleVR5cGUgPSB0aGlzLl9kZWYua2V5VHlwZTtcbiAgICAgICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY3R4LmRhdGEpIHtcbiAgICAgICAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGtleSwgY3R4LnBhdGgsIGtleSkpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBjdHguZGF0YVtrZXldLCBjdHgucGF0aCwga2V5KSksXG4gICAgICAgICAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0QXN5bmMoc3RhdHVzLCBwYWlycyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZShmaXJzdCwgc2Vjb25kLCB0aGlyZCkge1xuICAgICAgICBpZiAoc2Vjb25kIGluc3RhbmNlb2YgWm9kVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RSZWNvcmQoe1xuICAgICAgICAgICAgICAgIGtleVR5cGU6IGZpcnN0LFxuICAgICAgICAgICAgICAgIHZhbHVlVHlwZTogc2Vjb25kLFxuICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVjb3JkLFxuICAgICAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcmQpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RSZWNvcmQoe1xuICAgICAgICAgICAga2V5VHlwZTogWm9kU3RyaW5nLmNyZWF0ZSgpLFxuICAgICAgICAgICAgdmFsdWVUeXBlOiBmaXJzdCxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVjb3JkLFxuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhzZWNvbmQpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kTWFwIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgZ2V0IGtleVNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5rZXlUeXBlO1xuICAgIH1cbiAgICBnZXQgdmFsdWVTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm1hcCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5tYXAsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlUeXBlID0gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgICAgIGNvbnN0IHBhaXJzID0gWy4uLmN0eC5kYXRhLmVudHJpZXMoKV0ubWFwKChba2V5LCB2YWx1ZV0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGtleSwgY3R4LnBhdGgsIFtpbmRleCwgXCJrZXlcIl0pKSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBbaW5kZXgsIFwidmFsdWVcIl0pKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgY29uc3QgZmluYWxNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImFib3J0ZWRcIiB8fCB2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJkaXJ0eVwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbE1hcC5zZXQoa2V5LnZhbHVlLCB2YWx1ZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxNYXAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmluYWxNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwYWlyLmtleTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhaXIudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsTWFwLnNldChrZXkudmFsdWUsIHZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxNYXAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cblpvZE1hcC5jcmVhdGUgPSAoa2V5VHlwZSwgdmFsdWVUeXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE1hcCh7XG4gICAgICAgIHZhbHVlVHlwZSxcbiAgICAgICAga2V5VHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RNYXAsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kU2V0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5zZXQpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuc2V0LFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVmID0gdGhpcy5fZGVmO1xuICAgICAgICBpZiAoZGVmLm1pblNpemUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdHguZGF0YS5zaXplIDwgZGVmLm1pblNpemUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgbWluaW11bTogZGVmLm1pblNpemUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWluU2l6ZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYubWF4U2l6ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGN0eC5kYXRhLnNpemUgPiBkZWYubWF4U2l6ZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogZGVmLm1heFNpemUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWF4U2l6ZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgICAgIGZ1bmN0aW9uIGZpbmFsaXplU2V0KGVsZW1lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRTZXQgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgcGFyc2VkU2V0LmFkZChlbGVtZW50LnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogcGFyc2VkU2V0IH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBbLi4uY3R4LmRhdGEudmFsdWVzKCldLm1hcCgoaXRlbSwgaSkgPT4gdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKSk7XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZWxlbWVudHMpLnRoZW4oKGVsZW1lbnRzKSA9PiBmaW5hbGl6ZVNldChlbGVtZW50cykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZpbmFsaXplU2V0KGVsZW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtaW4obWluU2l6ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFNldCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBtaW5TaXplOiB7IHZhbHVlOiBtaW5TaXplLCBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG1heChtYXhTaXplLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU2V0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIG1heFNpemU6IHsgdmFsdWU6IG1heFNpemUsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2l6ZShzaXplLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbihzaXplLCBtZXNzYWdlKS5tYXgoc2l6ZSwgbWVzc2FnZSk7XG4gICAgfVxuICAgIG5vbmVtcHR5KG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluKDEsIG1lc3NhZ2UpO1xuICAgIH1cbn1cblpvZFNldC5jcmVhdGUgPSAodmFsdWVUeXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFNldCh7XG4gICAgICAgIHZhbHVlVHlwZSxcbiAgICAgICAgbWluU2l6ZTogbnVsbCxcbiAgICAgICAgbWF4U2l6ZTogbnVsbCxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTZXQsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kRnVuY3Rpb24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy52YWxpZGF0ZSA9IHRoaXMuaW1wbGVtZW50O1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5mdW5jdGlvbikge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5mdW5jdGlvbixcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1ha2VBcmdzSXNzdWUoYXJncywgZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBtYWtlSXNzdWUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgZXJyb3JNYXBzOiBbY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAsIGN0eC5zY2hlbWFFcnJvck1hcCwgZ2V0RXJyb3JNYXAoKSwgZGVmYXVsdEVycm9yTWFwXS5maWx0ZXIoKHgpID0+ICEheCksXG4gICAgICAgICAgICAgICAgaXNzdWVEYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX2FyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzRXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYWtlUmV0dXJuc0lzc3VlKHJldHVybnMsIGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFrZUlzc3VlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiByZXR1cm5zLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIGVycm9yTWFwczogW2N0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLCBjdHguc2NoZW1hRXJyb3JNYXAsIGdldEVycm9yTWFwKCksIGRlZmF1bHRFcnJvck1hcF0uZmlsdGVyKCh4KSA9PiAhIXgpLFxuICAgICAgICAgICAgICAgIGlzc3VlRGF0YToge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9yZXR1cm5fdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZUVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyYW1zID0geyBlcnJvck1hcDogY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAgfTtcbiAgICAgICAgY29uc3QgZm4gPSBjdHguZGF0YTtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5yZXR1cm5zIGluc3RhbmNlb2YgWm9kUHJvbWlzZSkge1xuICAgICAgICAgICAgLy8gV291bGQgbG92ZSBhIHdheSB0byBhdm9pZCBkaXNhYmxpbmcgdGhpcyBydWxlLCBidXQgd2UgbmVlZFxuICAgICAgICAgICAgLy8gYW4gYWxpYXMgKHVzaW5nIGFuIGFycm93IGZ1bmN0aW9uIHdhcyB3aGF0IGNhdXNlZCAyNjUxKS5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgICAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIE9LKGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IoW10pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFyZ3MgPSBhd2FpdCBtZS5fZGVmLmFyZ3MucGFyc2VBc3luYyhhcmdzLCBwYXJhbXMpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmFkZElzc3VlKG1ha2VBcmdzSXNzdWUoYXJncywgZSkpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBSZWZsZWN0LmFwcGx5KGZuLCB0aGlzLCBwYXJzZWRBcmdzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRSZXR1cm5zID0gYXdhaXQgbWUuX2RlZi5yZXR1cm5zLl9kZWYudHlwZVxuICAgICAgICAgICAgICAgICAgICAucGFyc2VBc3luYyhyZXN1bHQsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmFkZElzc3VlKG1ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBlKSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWRSZXR1cm5zO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBXb3VsZCBsb3ZlIGEgd2F5IHRvIGF2b2lkIGRpc2FibGluZyB0aGlzIHJ1bGUsIGJ1dCB3ZSBuZWVkXG4gICAgICAgICAgICAvLyBhbiBhbGlhcyAodXNpbmcgYW4gYXJyb3cgZnVuY3Rpb24gd2FzIHdoYXQgY2F1c2VkIDI2NTEpLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gT0soZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRBcmdzID0gbWUuX2RlZi5hcmdzLnNhZmVQYXJzZShhcmdzLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyc2VkQXJncy5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBab2RFcnJvcihbbWFrZUFyZ3NJc3N1ZShhcmdzLCBwYXJzZWRBcmdzLmVycm9yKV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LmFwcGx5KGZuLCB0aGlzLCBwYXJzZWRBcmdzLmRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFJldHVybnMgPSBtZS5fZGVmLnJldHVybnMuc2FmZVBhcnNlKHJlc3VsdCwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICBpZiAoIXBhcnNlZFJldHVybnMuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgWm9kRXJyb3IoW21ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBwYXJzZWRSZXR1cm5zLmVycm9yKV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkUmV0dXJucy5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFyYW1ldGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5hcmdzO1xuICAgIH1cbiAgICByZXR1cm5UeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnJldHVybnM7XG4gICAgfVxuICAgIGFyZ3MoLi4uaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBhcmdzOiBab2RUdXBsZS5jcmVhdGUoaXRlbXMpLnJlc3QoWm9kVW5rbm93bi5jcmVhdGUoKSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm5zKHJldHVyblR5cGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICByZXR1cm5zOiByZXR1cm5UeXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW1wbGVtZW50KGZ1bmMpIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdGVkRnVuYyA9IHRoaXMucGFyc2UoZnVuYyk7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZWRGdW5jO1xuICAgIH1cbiAgICBzdHJpY3RJbXBsZW1lbnQoZnVuYykge1xuICAgICAgICBjb25zdCB2YWxpZGF0ZWRGdW5jID0gdGhpcy5wYXJzZShmdW5jKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlZEZ1bmM7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGUoYXJncywgcmV0dXJucywgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kRnVuY3Rpb24oe1xuICAgICAgICAgICAgYXJnczogKGFyZ3MgPyBhcmdzIDogWm9kVHVwbGUuY3JlYXRlKFtdKS5yZXN0KFpvZFVua25vd24uY3JlYXRlKCkpKSxcbiAgICAgICAgICAgIHJldHVybnM6IHJldHVybnMgfHwgWm9kVW5rbm93bi5jcmVhdGUoKSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRnVuY3Rpb24sXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBab2RMYXp5IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgZ2V0IHNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5nZXR0ZXIoKTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBsYXp5U2NoZW1hID0gdGhpcy5fZGVmLmdldHRlcigpO1xuICAgICAgICByZXR1cm4gbGF6eVNjaGVtYS5fcGFyc2UoeyBkYXRhOiBjdHguZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4IH0pO1xuICAgIH1cbn1cblpvZExhenkuY3JlYXRlID0gKGdldHRlciwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RMYXp5KHtcbiAgICAgICAgZ2V0dGVyOiBnZXR0ZXIsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTGF6eSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RMaXRlcmFsIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5kYXRhICE9PSB0aGlzLl9kZWYudmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9saXRlcmFsLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiB0aGlzLl9kZWYudmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWU7XG4gICAgfVxufVxuWm9kTGl0ZXJhbC5jcmVhdGUgPSAodmFsdWUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTGl0ZXJhbCh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RMaXRlcmFsLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZnVuY3Rpb24gY3JlYXRlWm9kRW51bSh2YWx1ZXMsIHBhcmFtcykge1xuICAgIHJldHVybiBuZXcgWm9kRW51bSh7XG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFbnVtLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59XG5leHBvcnQgY2xhc3MgWm9kRW51bSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0LmRhdGEgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdGhpcy5fZGVmLnZhbHVlcztcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiB1dGlsLmpvaW5WYWx1ZXMoZXhwZWN0ZWRWYWx1ZXMpLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2NhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZSA9IG5ldyBTZXQodGhpcy5fZGVmLnZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZS5oYXMoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdGhpcy5fZGVmLnZhbHVlcztcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4cGVjdGVkVmFsdWVzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlcztcbiAgICB9XG4gICAgZ2V0IGVudW0oKSB7XG4gICAgICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xuICAgICAgICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICAgIH1cbiAgICBnZXQgVmFsdWVzKCkge1xuICAgICAgICBjb25zdCBlbnVtVmFsdWVzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgdmFsIG9mIHRoaXMuX2RlZi52YWx1ZXMpIHtcbiAgICAgICAgICAgIGVudW1WYWx1ZXNbdmFsXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW51bVZhbHVlcztcbiAgICB9XG4gICAgZ2V0IEVudW0oKSB7XG4gICAgICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xuICAgICAgICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICAgIH1cbiAgICBleHRyYWN0KHZhbHVlcywgbmV3RGVmID0gdGhpcy5fZGVmKSB7XG4gICAgICAgIHJldHVybiBab2RFbnVtLmNyZWF0ZSh2YWx1ZXMsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIC4uLm5ld0RlZixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGV4Y2x1ZGUodmFsdWVzLCBuZXdEZWYgPSB0aGlzLl9kZWYpIHtcbiAgICAgICAgcmV0dXJuIFpvZEVudW0uY3JlYXRlKHRoaXMub3B0aW9ucy5maWx0ZXIoKG9wdCkgPT4gIXZhbHVlcy5pbmNsdWRlcyhvcHQpKSwge1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgLi4ubmV3RGVmLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5ab2RFbnVtLmNyZWF0ZSA9IGNyZWF0ZVpvZEVudW07XG5leHBvcnQgY2xhc3MgWm9kTmF0aXZlRW51bSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBuYXRpdmVFbnVtVmFsdWVzID0gdXRpbC5nZXRWYWxpZEVudW1WYWx1ZXModGhpcy5fZGVmLnZhbHVlcyk7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnN0cmluZyAmJiBjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5udW1iZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdXRpbC5vYmplY3RWYWx1ZXMobmF0aXZlRW51bVZhbHVlcyk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogdXRpbC5qb2luVmFsdWVzKGV4cGVjdGVkVmFsdWVzKSxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUgPSBuZXcgU2V0KHV0aWwuZ2V0VmFsaWRFbnVtVmFsdWVzKHRoaXMuX2RlZi52YWx1ZXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2NhY2hlLmhhcyhpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB1dGlsLm9iamVjdFZhbHVlcyhuYXRpdmVFbnVtVmFsdWVzKTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4cGVjdGVkVmFsdWVzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxuICAgIGdldCBlbnVtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlcztcbiAgICB9XG59XG5ab2ROYXRpdmVFbnVtLmNyZWF0ZSA9ICh2YWx1ZXMsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTmF0aXZlRW51bSh7XG4gICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hdGl2ZUVudW0sXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kUHJvbWlzZSBleHRlbmRzIFpvZFR5cGUge1xuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi50eXBlO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5wcm9taXNlICYmIGN0eC5jb21tb24uYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnByb21pc2UsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9taXNpZmllZCA9IGN0eC5wYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlLnByb21pc2UgPyBjdHguZGF0YSA6IFByb21pc2UucmVzb2x2ZShjdHguZGF0YSk7XG4gICAgICAgIHJldHVybiBPSyhwcm9taXNpZmllZC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGUucGFyc2VBc3luYyhkYXRhLCB7XG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgZXJyb3JNYXA6IGN0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5ab2RQcm9taXNlLmNyZWF0ZSA9IChzY2hlbWEsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kUHJvbWlzZSh7XG4gICAgICAgIHR5cGU6IHNjaGVtYSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RQcm9taXNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEVmZmVjdHMgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBpbm5lclR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hO1xuICAgIH1cbiAgICBzb3VyY2VUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnNjaGVtYS5fZGVmLnR5cGVOYW1lID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0c1xuICAgICAgICAgICAgPyB0aGlzLl9kZWYuc2NoZW1hLnNvdXJjZVR5cGUoKVxuICAgICAgICAgICAgOiB0aGlzLl9kZWYuc2NoZW1hO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgY29uc3QgZWZmZWN0ID0gdGhpcy5fZGVmLmVmZmVjdCB8fCBudWxsO1xuICAgICAgICBjb25zdCBjaGVja0N0eCA9IHtcbiAgICAgICAgICAgIGFkZElzc3VlOiAoYXJnKSA9PiB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCBhcmcpO1xuICAgICAgICAgICAgICAgIGlmIChhcmcuZmF0YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IHBhdGgoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eC5wYXRoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY2hlY2tDdHguYWRkSXNzdWUgPSBjaGVja0N0eC5hZGRJc3N1ZS5iaW5kKGNoZWNrQ3R4KTtcbiAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBcInByZXByb2Nlc3NcIikge1xuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2VkID0gZWZmZWN0LnRyYW5zZm9ybShjdHguZGF0YSwgY2hlY2tDdHgpO1xuICAgICAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHByb2Nlc3NlZCkudGhlbihhc3luYyAocHJvY2Vzc2VkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMudmFsdWUgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcHJvY2Vzc2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMudmFsdWUgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBESVJUWShyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHByb2Nlc3NlZCxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRElSVFkocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlZmZlY3QudHlwZSA9PT0gXCJyZWZpbmVtZW50XCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4ZWN1dGVSZWZpbmVtZW50ID0gKGFjYykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVmZmVjdC5yZWZpbmVtZW50KGFjYywgY2hlY2tDdHgpO1xuICAgICAgICAgICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXN5bmMgcmVmaW5lbWVudCBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5uZXIgPSB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkXG4gICAgICAgICAgICAgICAgZXhlY3V0ZVJlZmluZW1lbnQoaW5uZXIudmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHsgZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KS50aGVuKChpbm5lcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGVSZWZpbmVtZW50KGlubmVyLnZhbHVlKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWUgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlID0gdGhpcy5fZGVmLnNjaGVtYS5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQoYmFzZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQXN5bmNocm9ub3VzIHRyYW5zZm9ybSBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiByZXN1bHQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHsgZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KS50aGVuKChiYXNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZChiYXNlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpKS50aGVuKChyZXN1bHQpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHN0YXR1cy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGVmZmVjdCk7XG4gICAgfVxufVxuWm9kRWZmZWN0cy5jcmVhdGUgPSAoc2NoZW1hLCBlZmZlY3QsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzLFxuICAgICAgICBlZmZlY3QsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5ab2RFZmZlY3RzLmNyZWF0ZVdpdGhQcmVwcm9jZXNzID0gKHByZXByb2Nlc3MsIHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBlZmZlY3Q6IHsgdHlwZTogXCJwcmVwcm9jZXNzXCIsIHRyYW5zZm9ybTogcHJlcHJvY2VzcyB9LFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgeyBab2RFZmZlY3RzIGFzIFpvZFRyYW5zZm9ybWVyIH07XG5leHBvcnQgY2xhc3MgWm9kT3B0aW9uYWwgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBPSyh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gICAgfVxuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gICAgfVxufVxuWm9kT3B0aW9uYWwuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT3B0aW9uYWwoe1xuICAgICAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT3B0aW9uYWwsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTnVsbGFibGUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5udWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gT0sobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKGlucHV0KTtcbiAgICB9XG4gICAgdW53cmFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZTtcbiAgICB9XG59XG5ab2ROdWxsYWJsZS5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROdWxsYWJsZSh7XG4gICAgICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdWxsYWJsZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2REZWZhdWx0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBsZXQgZGF0YSA9IGN0eC5kYXRhO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgPT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkYXRhID0gdGhpcy5fZGVmLmRlZmF1bHRWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZSh7XG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbW92ZURlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZERlZmF1bHQuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kRGVmYXVsdCh7XG4gICAgICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0LFxuICAgICAgICBkZWZhdWx0VmFsdWU6IHR5cGVvZiBwYXJhbXMuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zLmRlZmF1bHQgOiAoKSA9PiBwYXJhbXMuZGVmYXVsdCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RDYXRjaCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgLy8gbmV3Q3R4IGlzIHVzZWQgdG8gbm90IGNvbGxlY3QgaXNzdWVzIGZyb20gaW5uZXIgdHlwZXMgaW4gY3R4XG4gICAgICAgIGNvbnN0IG5ld0N0eCA9IHtcbiAgICAgICAgICAgIC4uLmN0eCxcbiAgICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgICAgIC4uLmN0eC5jb21tb24sXG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKHtcbiAgICAgICAgICAgIGRhdGE6IG5ld0N0eC5kYXRhLFxuICAgICAgICAgICAgcGF0aDogbmV3Q3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IHtcbiAgICAgICAgICAgICAgICAuLi5uZXdDdHgsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGlzQXN5bmMocmVzdWx0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IFwidmFsaWRcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC5zdGF0dXMgPT09IFwidmFsaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZXN1bHQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5fZGVmLmNhdGNoVmFsdWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBlcnJvcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RFcnJvcihuZXdDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogbmV3Q3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogXCJ2YWxpZFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQuc3RhdHVzID09PSBcInZhbGlkXCJcbiAgICAgICAgICAgICAgICAgICAgPyByZXN1bHQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9kZWYuY2F0Y2hWYWx1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RFcnJvcihuZXdDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IG5ld0N0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlQ2F0Y2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZENhdGNoLmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZENhdGNoKHtcbiAgICAgICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZENhdGNoLFxuICAgICAgICBjYXRjaFZhbHVlOiB0eXBlb2YgcGFyYW1zLmNhdGNoID09PSBcImZ1bmN0aW9uXCIgPyBwYXJhbXMuY2F0Y2ggOiAoKSA9PiBwYXJhbXMuY2F0Y2gsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTmFOIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubmFuKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm5hbixcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xuICAgIH1cbn1cblpvZE5hTi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROYU4oe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hTixcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjb25zdCBCUkFORCA9IFN5bWJvbChcInpvZF9icmFuZFwiKTtcbmV4cG9ydCBjbGFzcyBab2RCcmFuZGVkIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBkYXRhID0gY3R4LmRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZS5fcGFyc2Uoe1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1bndyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kUGlwZWxpbmUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZUFzeW5jID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluUmVzdWx0ID0gYXdhaXQgdGhpcy5fZGVmLmluLl9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRElSVFkoaW5SZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vdXQuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogaW5SZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUFzeW5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpblJlc3VsdCA9IHRoaXMuX2RlZi5pbi5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IFwiZGlydHlcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGluUmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLm91dC5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogaW5SZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RQaXBlbGluZSh7XG4gICAgICAgICAgICBpbjogYSxcbiAgICAgICAgICAgIG91dDogYixcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUGlwZWxpbmUsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBab2RSZWFkb25seSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gICAgICAgIGNvbnN0IGZyZWV6ZSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZChkYXRhKSkge1xuICAgICAgICAgICAgICAgIGRhdGEudmFsdWUgPSBPYmplY3QuZnJlZXplKGRhdGEudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpc0FzeW5jKHJlc3VsdCkgPyByZXN1bHQudGhlbigoZGF0YSkgPT4gZnJlZXplKGRhdGEpKSA6IGZyZWV6ZShyZXN1bHQpO1xuICAgIH1cbiAgICB1bndyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZFJlYWRvbmx5LmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFJlYWRvbmx5KHtcbiAgICAgICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFJlYWRvbmx5LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgIHouY3VzdG9tICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZnVuY3Rpb24gY2xlYW5QYXJhbXMocGFyYW1zLCBkYXRhKSB7XG4gICAgY29uc3QgcCA9IHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcyhkYXRhKSA6IHR5cGVvZiBwYXJhbXMgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2U6IHBhcmFtcyB9IDogcGFyYW1zO1xuICAgIGNvbnN0IHAyID0gdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2U6IHAgfSA6IHA7XG4gICAgcmV0dXJuIHAyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbShjaGVjaywgX3BhcmFtcyA9IHt9LCBcbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiBQYXNzIGBmYXRhbGAgaW50byB0aGUgcGFyYW1zIG9iamVjdCBpbnN0ZWFkOlxuICpcbiAqIGBgYHRzXG4gKiB6LnN0cmluZygpLmN1c3RvbSgodmFsKSA9PiB2YWwubGVuZ3RoID4gNSwgeyBmYXRhbDogZmFsc2UgfSlcbiAqIGBgYFxuICpcbiAqL1xuZmF0YWwpIHtcbiAgICBpZiAoY2hlY2spXG4gICAgICAgIHJldHVybiBab2RBbnkuY3JlYXRlKCkuc3VwZXJSZWZpbmUoKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgciA9IGNoZWNrKGRhdGEpO1xuICAgICAgICAgICAgaWYgKHIgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIudGhlbigocikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGNsZWFuUGFyYW1zKF9wYXJhbXMsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgX2ZhdGFsID0gcGFyYW1zLmZhdGFsID8/IGZhdGFsID8/IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYWRkSXNzdWUoeyBjb2RlOiBcImN1c3RvbVwiLCAuLi5wYXJhbXMsIGZhdGFsOiBfZmF0YWwgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGNsZWFuUGFyYW1zKF9wYXJhbXMsIGRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IF9mYXRhbCA9IHBhcmFtcy5mYXRhbCA/PyBmYXRhbCA/PyB0cnVlO1xuICAgICAgICAgICAgICAgIGN0eC5hZGRJc3N1ZSh7IGNvZGU6IFwiY3VzdG9tXCIsIC4uLnBhcmFtcywgZmF0YWw6IF9mYXRhbCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIFpvZEFueS5jcmVhdGUoKTtcbn1cbmV4cG9ydCB7IFpvZFR5cGUgYXMgU2NoZW1hLCBab2RUeXBlIGFzIFpvZFNjaGVtYSB9O1xuZXhwb3J0IGNvbnN0IGxhdGUgPSB7XG4gICAgb2JqZWN0OiBab2RPYmplY3QubGF6eWNyZWF0ZSxcbn07XG5leHBvcnQgdmFyIFpvZEZpcnN0UGFydHlUeXBlS2luZDtcbihmdW5jdGlvbiAoWm9kRmlyc3RQYXJ0eVR5cGVLaW5kKSB7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kU3RyaW5nXCJdID0gXCJab2RTdHJpbmdcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROdW1iZXJcIl0gPSBcIlpvZE51bWJlclwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE5hTlwiXSA9IFwiWm9kTmFOXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQmlnSW50XCJdID0gXCJab2RCaWdJbnRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RCb29sZWFuXCJdID0gXCJab2RCb29sZWFuXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGF0ZVwiXSA9IFwiWm9kRGF0ZVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFN5bWJvbFwiXSA9IFwiWm9kU3ltYm9sXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVW5kZWZpbmVkXCJdID0gXCJab2RVbmRlZmluZWRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROdWxsXCJdID0gXCJab2ROdWxsXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQW55XCJdID0gXCJab2RBbnlcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RVbmtub3duXCJdID0gXCJab2RVbmtub3duXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTmV2ZXJcIl0gPSBcIlpvZE5ldmVyXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVm9pZFwiXSA9IFwiWm9kVm9pZFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEFycmF5XCJdID0gXCJab2RBcnJheVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE9iamVjdFwiXSA9IFwiWm9kT2JqZWN0XCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVW5pb25cIl0gPSBcIlpvZFVuaW9uXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGlzY3JpbWluYXRlZFVuaW9uXCJdID0gXCJab2REaXNjcmltaW5hdGVkVW5pb25cIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RJbnRlcnNlY3Rpb25cIl0gPSBcIlpvZEludGVyc2VjdGlvblwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFR1cGxlXCJdID0gXCJab2RUdXBsZVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFJlY29yZFwiXSA9IFwiWm9kUmVjb3JkXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTWFwXCJdID0gXCJab2RNYXBcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RTZXRcIl0gPSBcIlpvZFNldFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEZ1bmN0aW9uXCJdID0gXCJab2RGdW5jdGlvblwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZExhenlcIl0gPSBcIlpvZExhenlcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RMaXRlcmFsXCJdID0gXCJab2RMaXRlcmFsXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRW51bVwiXSA9IFwiWm9kRW51bVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEVmZmVjdHNcIl0gPSBcIlpvZEVmZmVjdHNcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROYXRpdmVFbnVtXCJdID0gXCJab2ROYXRpdmVFbnVtXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kT3B0aW9uYWxcIl0gPSBcIlpvZE9wdGlvbmFsXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTnVsbGFibGVcIl0gPSBcIlpvZE51bGxhYmxlXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGVmYXVsdFwiXSA9IFwiWm9kRGVmYXVsdFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZENhdGNoXCJdID0gXCJab2RDYXRjaFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFByb21pc2VcIl0gPSBcIlpvZFByb21pc2VcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RCcmFuZGVkXCJdID0gXCJab2RCcmFuZGVkXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kUGlwZWxpbmVcIl0gPSBcIlpvZFBpcGVsaW5lXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kUmVhZG9ubHlcIl0gPSBcIlpvZFJlYWRvbmx5XCI7XG59KShab2RGaXJzdFBhcnR5VHlwZUtpbmQgfHwgKFpvZEZpcnN0UGFydHlUeXBlS2luZCA9IHt9KSk7XG4vLyByZXF1aXJlcyBUUyA0LjQrXG5jbGFzcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoLi4uXykgeyB9XG59XG5jb25zdCBpbnN0YW5jZU9mVHlwZSA9IChcbi8vIGNvbnN0IGluc3RhbmNlT2ZUeXBlID0gPFQgZXh0ZW5kcyBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KFxuY2xzLCBwYXJhbXMgPSB7XG4gICAgbWVzc2FnZTogYElucHV0IG5vdCBpbnN0YW5jZSBvZiAke2Nscy5uYW1lfWAsXG59KSA9PiBjdXN0b20oKGRhdGEpID0+IGRhdGEgaW5zdGFuY2VvZiBjbHMsIHBhcmFtcyk7XG5jb25zdCBzdHJpbmdUeXBlID0gWm9kU3RyaW5nLmNyZWF0ZTtcbmNvbnN0IG51bWJlclR5cGUgPSBab2ROdW1iZXIuY3JlYXRlO1xuY29uc3QgbmFuVHlwZSA9IFpvZE5hTi5jcmVhdGU7XG5jb25zdCBiaWdJbnRUeXBlID0gWm9kQmlnSW50LmNyZWF0ZTtcbmNvbnN0IGJvb2xlYW5UeXBlID0gWm9kQm9vbGVhbi5jcmVhdGU7XG5jb25zdCBkYXRlVHlwZSA9IFpvZERhdGUuY3JlYXRlO1xuY29uc3Qgc3ltYm9sVHlwZSA9IFpvZFN5bWJvbC5jcmVhdGU7XG5jb25zdCB1bmRlZmluZWRUeXBlID0gWm9kVW5kZWZpbmVkLmNyZWF0ZTtcbmNvbnN0IG51bGxUeXBlID0gWm9kTnVsbC5jcmVhdGU7XG5jb25zdCBhbnlUeXBlID0gWm9kQW55LmNyZWF0ZTtcbmNvbnN0IHVua25vd25UeXBlID0gWm9kVW5rbm93bi5jcmVhdGU7XG5jb25zdCBuZXZlclR5cGUgPSBab2ROZXZlci5jcmVhdGU7XG5jb25zdCB2b2lkVHlwZSA9IFpvZFZvaWQuY3JlYXRlO1xuY29uc3QgYXJyYXlUeXBlID0gWm9kQXJyYXkuY3JlYXRlO1xuY29uc3Qgb2JqZWN0VHlwZSA9IFpvZE9iamVjdC5jcmVhdGU7XG5jb25zdCBzdHJpY3RPYmplY3RUeXBlID0gWm9kT2JqZWN0LnN0cmljdENyZWF0ZTtcbmNvbnN0IHVuaW9uVHlwZSA9IFpvZFVuaW9uLmNyZWF0ZTtcbmNvbnN0IGRpc2NyaW1pbmF0ZWRVbmlvblR5cGUgPSBab2REaXNjcmltaW5hdGVkVW5pb24uY3JlYXRlO1xuY29uc3QgaW50ZXJzZWN0aW9uVHlwZSA9IFpvZEludGVyc2VjdGlvbi5jcmVhdGU7XG5jb25zdCB0dXBsZVR5cGUgPSBab2RUdXBsZS5jcmVhdGU7XG5jb25zdCByZWNvcmRUeXBlID0gWm9kUmVjb3JkLmNyZWF0ZTtcbmNvbnN0IG1hcFR5cGUgPSBab2RNYXAuY3JlYXRlO1xuY29uc3Qgc2V0VHlwZSA9IFpvZFNldC5jcmVhdGU7XG5jb25zdCBmdW5jdGlvblR5cGUgPSBab2RGdW5jdGlvbi5jcmVhdGU7XG5jb25zdCBsYXp5VHlwZSA9IFpvZExhenkuY3JlYXRlO1xuY29uc3QgbGl0ZXJhbFR5cGUgPSBab2RMaXRlcmFsLmNyZWF0ZTtcbmNvbnN0IGVudW1UeXBlID0gWm9kRW51bS5jcmVhdGU7XG5jb25zdCBuYXRpdmVFbnVtVHlwZSA9IFpvZE5hdGl2ZUVudW0uY3JlYXRlO1xuY29uc3QgcHJvbWlzZVR5cGUgPSBab2RQcm9taXNlLmNyZWF0ZTtcbmNvbnN0IGVmZmVjdHNUeXBlID0gWm9kRWZmZWN0cy5jcmVhdGU7XG5jb25zdCBvcHRpb25hbFR5cGUgPSBab2RPcHRpb25hbC5jcmVhdGU7XG5jb25zdCBudWxsYWJsZVR5cGUgPSBab2ROdWxsYWJsZS5jcmVhdGU7XG5jb25zdCBwcmVwcm9jZXNzVHlwZSA9IFpvZEVmZmVjdHMuY3JlYXRlV2l0aFByZXByb2Nlc3M7XG5jb25zdCBwaXBlbGluZVR5cGUgPSBab2RQaXBlbGluZS5jcmVhdGU7XG5jb25zdCBvc3RyaW5nID0gKCkgPT4gc3RyaW5nVHlwZSgpLm9wdGlvbmFsKCk7XG5jb25zdCBvbnVtYmVyID0gKCkgPT4gbnVtYmVyVHlwZSgpLm9wdGlvbmFsKCk7XG5jb25zdCBvYm9vbGVhbiA9ICgpID0+IGJvb2xlYW5UeXBlKCkub3B0aW9uYWwoKTtcbmV4cG9ydCBjb25zdCBjb2VyY2UgPSB7XG4gICAgc3RyaW5nOiAoKGFyZykgPT4gWm9kU3RyaW5nLmNyZWF0ZSh7IC4uLmFyZywgY29lcmNlOiB0cnVlIH0pKSxcbiAgICBudW1iZXI6ICgoYXJnKSA9PiBab2ROdW1iZXIuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxuICAgIGJvb2xlYW46ICgoYXJnKSA9PiBab2RCb29sZWFuLmNyZWF0ZSh7XG4gICAgICAgIC4uLmFyZyxcbiAgICAgICAgY29lcmNlOiB0cnVlLFxuICAgIH0pKSxcbiAgICBiaWdpbnQ6ICgoYXJnKSA9PiBab2RCaWdJbnQuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxuICAgIGRhdGU6ICgoYXJnKSA9PiBab2REYXRlLmNyZWF0ZSh7IC4uLmFyZywgY29lcmNlOiB0cnVlIH0pKSxcbn07XG5leHBvcnQgeyBhbnlUeXBlIGFzIGFueSwgYXJyYXlUeXBlIGFzIGFycmF5LCBiaWdJbnRUeXBlIGFzIGJpZ2ludCwgYm9vbGVhblR5cGUgYXMgYm9vbGVhbiwgZGF0ZVR5cGUgYXMgZGF0ZSwgZGlzY3JpbWluYXRlZFVuaW9uVHlwZSBhcyBkaXNjcmltaW5hdGVkVW5pb24sIGVmZmVjdHNUeXBlIGFzIGVmZmVjdCwgZW51bVR5cGUgYXMgZW51bSwgZnVuY3Rpb25UeXBlIGFzIGZ1bmN0aW9uLCBpbnN0YW5jZU9mVHlwZSBhcyBpbnN0YW5jZW9mLCBpbnRlcnNlY3Rpb25UeXBlIGFzIGludGVyc2VjdGlvbiwgbGF6eVR5cGUgYXMgbGF6eSwgbGl0ZXJhbFR5cGUgYXMgbGl0ZXJhbCwgbWFwVHlwZSBhcyBtYXAsIG5hblR5cGUgYXMgbmFuLCBuYXRpdmVFbnVtVHlwZSBhcyBuYXRpdmVFbnVtLCBuZXZlclR5cGUgYXMgbmV2ZXIsIG51bGxUeXBlIGFzIG51bGwsIG51bGxhYmxlVHlwZSBhcyBudWxsYWJsZSwgbnVtYmVyVHlwZSBhcyBudW1iZXIsIG9iamVjdFR5cGUgYXMgb2JqZWN0LCBvYm9vbGVhbiwgb251bWJlciwgb3B0aW9uYWxUeXBlIGFzIG9wdGlvbmFsLCBvc3RyaW5nLCBwaXBlbGluZVR5cGUgYXMgcGlwZWxpbmUsIHByZXByb2Nlc3NUeXBlIGFzIHByZXByb2Nlc3MsIHByb21pc2VUeXBlIGFzIHByb21pc2UsIHJlY29yZFR5cGUgYXMgcmVjb3JkLCBzZXRUeXBlIGFzIHNldCwgc3RyaWN0T2JqZWN0VHlwZSBhcyBzdHJpY3RPYmplY3QsIHN0cmluZ1R5cGUgYXMgc3RyaW5nLCBzeW1ib2xUeXBlIGFzIHN5bWJvbCwgZWZmZWN0c1R5cGUgYXMgdHJhbnNmb3JtZXIsIHR1cGxlVHlwZSBhcyB0dXBsZSwgdW5kZWZpbmVkVHlwZSBhcyB1bmRlZmluZWQsIHVuaW9uVHlwZSBhcyB1bmlvbiwgdW5rbm93blR5cGUgYXMgdW5rbm93biwgdm9pZFR5cGUgYXMgdm9pZCwgfTtcbmV4cG9ydCBjb25zdCBORVZFUiA9IElOVkFMSUQ7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elizaos/core/node_modules/zod/v3/types.js\n");

/***/ })

};
;